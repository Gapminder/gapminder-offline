/**
 * vizabi - Vizabi Framework, Interactive charts and visualization tools animated through time
 * @version v0.40.14
 * @build timestamp Wed Mar 06 2019 13:38:10 GMT+0100 (CET)
 * @link http://vizabi.org
 * @license BSD-3-Clause
 */

((function(){})({version: '"0.40.14"'}));
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("Vizabi", [], factory);
	else if(typeof exports === 'object')
		exports["Vizabi"] = factory();
	else
		root["Vizabi"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 192);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(22);
var hide = __webpack_require__(14);
var redefine = __webpack_require__(15);
var ctx = __webpack_require__(23);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOSname = exports.normaliseLink = exports.getBrowserDetails = exports.getSubtitle = exports.replaceNumberSpacesToNonBreak = exports.px2num = exports.getProp = exports.isFunction = exports.isMobileOrTablet = exports.capitalize = exports.setIcon = exports.pruneTree = exports.isTouchDevice = exports.debounce = exports.memoize = exports.post = exports.get = exports.ajax = exports.interpolatePoint = exports.interpolateVector = exports.nestArrayToValues = exports.nestArrayToObjWithFlatKeys = exports.nestArrayToObj = exports.hashCode = exports.clearDelay = exports.delay = exports.defer = exports.diffObject = exports.arrayLast = exports.arrayMedian = exports.arraySum = exports.arrayMean = exports.arrayMax = exports.arrayMin = exports.values = exports.keys = exports.throttle = exports.hasClass = exports.classed = exports.removeClass = exports.addClass = exports.countDecimals = exports.error = exports.groupEnd = exports.groupCollapsed = exports.warn = exports.timeStamp = exports.areaToRadius = exports.cathetus = exports.hypotenuse = exports.radiusToArea = exports.preventAncestorScrolling = exports.matchAny = exports.filterAny = exports.filter = exports.find = exports.uniqueLast = exports.unique = exports.without = exports.deepClone = exports.clone = exports.merge = exports.deepExtend = exports.extend = exports.forEach = exports.strToFloat = exports.roundStep = exports.findScrollableAncestor = exports.getViewportPosition = exports.comparePlainObjects = exports.deepArrayEquals = exports.arrayEquals = exports.isPlainObject = exports.isNumber = exports.isEmpty = exports.isNaN = exports.isString = exports.isDate = exports.isObject = exports.isArray = exports.isElement = exports.uniqueId = exports.printAutoconfigResult = exports.approxEqual = exports.d3text = exports.d3json = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.makeAbsoluteContext = makeAbsoluteContext;
exports.firstBy = firstBy;
exports.transform = transform;
exports.getKey = getKey;

var _interpolators = __webpack_require__(397);

var _interpolators2 = _interopRequireDefault(_interpolators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var d3json = exports.d3json = function d3json(path, callback) {
  d3.json(path).then(function (response) {
    return callback(null, response);
  }).catch(function (error) {
    return callback(error);
  });
};

var d3text = exports.d3text = function d3text(path, callback) {
  d3.text(path).then(function (response) {
    return callback(null, response);
  }).catch(function (error) {
    return callback(error);
  });
};

/*
 * Check if value A is in +- proximity of value B
 * @param {Number} a
 * @param {Number} b
 * @param {Number} tolerance
 * @returns {Boolean} true if values are approximately equal or false otherwise
 */
var approxEqual = exports.approxEqual = function approxEqual(a, b, tolerance) {
  tolerance = tolerance || 0;
  if (b > 0) {
    return (1 - tolerance) * b <= a && a <= b * (1 + tolerance);
  } else if (b < 0) {
    return (1 + tolerance) * b <= a && a <= b * (1 - tolerance);
  }
  return Math.abs(a) <= tolerance;
};

/*
 * prints out a string like this "AUTOCONFIG: axis_x choses armed_conflicts_internal from data to be WHICH"
 */
var printAutoconfigResult = exports.printAutoconfigResult = function printAutoconfigResult(mdl) {
  console.info("AUTOCONFIG: " + mdl._name + (mdl.isHook() ? " of " + mdl._parent._name : "") + " choses " + (mdl.dim || mdl.which) + " from " + (mdl.dataSource ? mdl.dataSource._name : "<DATA SOURCE MISSING!>") + " to be " + (mdl._type === "entities" || mdl._type === "time" ? "DIM" : "WHICH"));
};

/*
 * returns unique id with optional prefix
 * @param {String} prefix
 * @returns {String} id
 */
var uniqueId = exports.uniqueId = function () {
  var id = 0;
  return function (p) {
    return p ? p + (id += 1) : id += 1;
  };
}();

/*
 * checks whether obj is a DOM element
 * @param {Object} obj
 * @returns {Boolean}
 * from underscore: https://github.com/jashkenas/underscore/blob/master/underscore.js
 */
var isElement = exports.isElement = function isElement(obj) {
  return !!(obj && obj.nodeType === 1);
};

/*
 * checks whether obj is an Array
 * @param {Object} target
 * @returns {Boolean}
 * from underscore: https://github.com/jashkenas/underscore/blob/master/underscore.js
 */
var isArray = exports.isArray = Array.isArray || function (target) {
  return Object.prototype.toString.call(target) === "[object Array]";
};

/*
 * checks whether obj is an object
 * @param {Object} obj
 * @returns {Boolean}
 * from underscore: https://github.com/jashkenas/underscore/blob/master/underscore.js
 */
var isObject = exports.isObject = function isObject(obj) {
  var type = typeof obj === "undefined" ? "undefined" : _typeof(obj);
  return type === "object" && !!obj;
};

/*
 * checks whether arg is a date
 * @param {Object} arg
 * @returns {Boolean}
 */
var isDate = exports.isDate = function isDate(arg) {
  return arg instanceof Date;
};

/*
 * checks whether arg is a string
 * @param {Object} arg
 * @returns {Boolean}
 */
var isString = exports.isString = function isString(value) {
  return typeof value === "string";
};

/*
 * checks whether arg is a NaN
 * @param {*} arg
 * @returns {Boolean}
 * from lodash: https://github.com/lodash/lodash/blob/master/lodash.js
 */
var isNaN = exports.isNaN = function isNaN(arg) {
  // A `NaN` primitive is the only number that is not equal to itself
  return isNumber(arg) && arg !== +arg;
};

var isEmpty = exports.isEmpty = function isEmpty(obj) {
  return Object.keys(obj).length === 0 && obj.constructor === Object;
};

/*
 * checks whether arg is a number. NaN is a number too
 * @param {*} arg
 * @returns {Boolean}
 * from lodash: https://github.com/lodash/lodash/blob/master/lodash.js
 * dependencies are resolved and included here
 */
var isNumber = exports.isNumber = function isNumber(arg) {
  return typeof arg === "number" || !!arg && (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === "object" && Object.prototype.toString.call(arg) === "[object Number]";
};

/*
 * checks whether obj is a plain object {}
 * @param {Object} obj
 * @returns {Boolean}
 */
var isPlainObject = exports.isPlainObject = function isPlainObject(obj) {
  return obj !== null && Object.prototype.toString.call(obj) === "[object Object]";
};

/*
 * checks whether two arrays are equal
 * @param {Array} a
 * @param {Array} b
 * @returns {Boolean}
 */
var arrayEquals = exports.arrayEquals = function arrayEquals(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};

var deepArrayEquals = exports.deepArrayEquals = function deepArrayEquals(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; ++i) {
    if (isPlainObject(a[i]) && isPlainObject(b[i])) {
      if (!comparePlainObjects(a[i], b[i])) return false;
    } else if (a[i] !== b[i]) return false;
  }
  return true;
};

/**
 * Object Comparison
 *
 * http://stamat.wordpress.com/2013/06/22/javascript-object-comparison/
 *
 * No version
 *
 * @param a
 * @param b
 * @returns {boolean} if objects are equal
 */
var comparePlainObjects = exports.comparePlainObjects = function comparePlainObjects(a, b) {

  //Returns the object's class, Array, Date, RegExp, Object are of interest to us
  var getClass = function getClass(val) {
    return Object.prototype.toString.call(val).match(/^\[object\s(.*)\]$/)[1];
  };

  //Defines the type of the value, extended typeof
  var whatis = function whatis(val) {

    if (val === undefined) {
      return "undefined";
    }
    if (val === null) {
      return "null";
    }

    var type = typeof val === "undefined" ? "undefined" : _typeof(val);

    if (type === "object") {
      type = getClass(val).toLowerCase();
    }

    if (type === "number") {
      return val.toString().indexOf(".") > 0 ? "float" : "integer";
    }

    return type;
  };

  var compare = function compare(a, b) {
    if (a === b) {
      return true;
    }
    for (var i in a) {
      if (b.hasOwnProperty(i)) {
        if (!equal(a[i], b[i])) {
          return false;
        }
      } else {
        return false;
      }
    }

    for (var _i in b) {
      if (!a.hasOwnProperty(_i)) {
        return false;
      }
    }
    return true;
  };

  var compareArrays = function compareArrays(a, b) {
    if (a === b) {
      return true;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!equal(a[i], b[i])) {
        return false;
      }
    }
    return true;
  };

  var _equal = {};
  _equal.array = compareArrays;
  _equal.object = compare;
  _equal.date = function (a, b) {
    return a.getTime() === b.getTime();
  };
  _equal.regexp = function (a, b) {
    return a.toString() === b.toString();
  };

  /**
   * Are two values equal, deep compare for objects and arrays.
   * @param a {any}
   * @param b {any}
   * @return {boolean} Are equal?
   */
  var equal = function equal(a, b) {
    if (a !== b) {
      var atype = whatis(a);
      var btype = whatis(b);

      if (atype === btype) {
        return _equal.hasOwnProperty(atype) ? _equal[atype](a, b) : a == b;
      }

      return false;
    }

    return true;
  };

  return compare(a, b);
};

var getViewportPosition = exports.getViewportPosition = function getViewportPosition(element) {
  var xPosition = 0;
  var yPosition = 0;

  while (element) {
    xPosition += element.offsetLeft - element.scrollLeft + element.clientLeft;
    yPosition += element.offsetTop - element.scrollTop + element.clientTop;
    element = element.offsetParent;
  }

  return {
    x: xPosition,
    y: yPosition
  };
};

var findScrollableAncestor = exports.findScrollableAncestor = function findScrollableAncestor(node) {
  var scrollable = ["scroll", "auto"];
  while (node = node.parentNode) {
    var scrollHeight = node.scrollHeight;
    var height = node.clientHeight;
    if (scrollHeight > height && scrollable.indexOf(d3.select(node).style("overflow")) !== -1) {
      return node;
    }
  }
  return null;
};

var roundStep = exports.roundStep = function roundStep(number, step) {
  return Math.round(number / step) * step;
};

/*
 * transforms a string into a validated fload value
 * @param {string} string to be transformed
 */
var strToFloat = exports.strToFloat = function strToFloat(string) {
  return +string.replace(/[^\d.-]/g, "");
};

/*
 * loops through an object or array
 * @param {Object|Array} obj object or array
 * @param {Function} callback callback function
 * @param {Object} ctx context object
 */
var forEach = exports.forEach = function forEach(obj, callback, ctx) {
  if (!obj) {
    return;
  }
  var i = void 0,
      size = void 0;
  if (isArray(obj)) {
    size = obj.length;
    for (i = 0; i < size; i += 1) {
      var result = callback.apply(ctx, [obj[i], i]);
      if (result === false) {
        break;
      }
    }
  } else {
    var _keys = Object.keys(obj);
    size = _keys.length;
    for (i = 0; i < size; i += 1) {
      var _result = callback.apply(ctx, [obj[_keys[i]], _keys[i]]);
      if (_result === false) {
        break;
      }
    }
  }
};

/*
 * extends an object
 * @param {Object} destination object
 * @returns {Object} extented object
 */
var extend = exports.extend = function extend(dest) {
  //objects to overwrite dest are next arguments
  var objs = Array.prototype.slice.call(arguments, 1);
  //loop through each obj and each argument, left to right
  forEach(objs, function (obj, i) {
    forEach(obj, function (value, k) {
      if (obj.hasOwnProperty(k)) {
        dest[k] = value;
      }
    });
  });
  return dest;
};

// Deep extend and helper functions
// https://github.com/unclechu/node-deep-extend/blob/master/lib/deep-extend.js

function isSpecificValue(val) {
  return Boolean(val instanceof Date || val instanceof RegExp);
}

function cloneSpecificValue(val) {
  if (val instanceof Date) {
    return new Date(val.getTime());
  } else if (val instanceof RegExp) {
    return new RegExp(val);
  }
  throw new Error("Unexpected situation");
}

/**
 * Recursive cloning array.
 */
function deepCloneArray(arr) {
  var clone = [];
  forEach(arr, function (item, index) {
    if ((typeof item === "undefined" ? "undefined" : _typeof(item)) === "object" && item !== null) {
      if (isArray(item)) {
        clone[index] = deepCloneArray(item);
      } else if (isSpecificValue(item)) {
        clone[index] = cloneSpecificValue(item);
      } else {
        clone[index] = deepExtend({}, item);
      }
    } else {
      clone[index] = item;
    }
  });
  return clone;
}

/**
 * Extening object that entered in first argument.
 *
 * Returns extended object or false if have no target object or incorrect type.
 *
 * If you wish to clone source object (without modify it), just use empty new
 * object as first argument, like this:
 *   deepExtend({}, yourObj_1, [yourObj_N]);
 */
var deepExtend = exports.deepExtend = function deepExtend() /*obj_1, [obj_2], [obj_N]*/{
  if (arguments.length < 1 || _typeof(arguments[0]) !== "object") {
    return false;
  }

  if (arguments.length < 2) {
    return arguments[0];
  }

  var target = arguments[0];

  var lastArgIsBool = typeof arguments[arguments.length - 1] === "boolean";
  var overwriteByEmpty = lastArgIsBool && arguments[arguments.length - 1];
  // convert arguments to array and cut off target object
  var args = Array.prototype.slice.call(arguments, 1, lastArgIsBool ? -1 : arguments.length);

  var val = void 0,
      src = void 0,
      clone = void 0;

  forEach(args, function (obj) {
    // skip argument if it is array or isn't object
    if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object" || isArray(obj)) {
      return;
    }

    forEach(Object.keys(obj), function (key) {
      src = target[key]; // source value
      val = obj[key]; // new value

      // recursion prevention
      if (val === target) {
        /*
         * if new value isn't object then just overwrite by new value
         * instead of extending.
         * 2016-11-07 / Jasper: Added specific check for val instanceof Model for merging defaults & values of ComponentModels
         * 2016-11-07 / Jasper: Hack because importing Model doesn't work: instead check for val._data
         */
      } else if ((typeof val === "undefined" ? "undefined" : _typeof(val)) !== "object" || val === null || val._data) {
        target[key] = val;

        // just clone arrays (and recursive clone objects inside)
      } else if (isArray(val)) {
        target[key] = deepCloneArray(val);

        // custom cloning and overwrite for specific objects
      } else if (isSpecificValue(val)) {
        target[key] = cloneSpecificValue(val);

        // overwrite by new value if source isn't object or array
      } else if ((typeof src === "undefined" ? "undefined" : _typeof(src)) !== "object" || src === null || isArray(src)) {
        target[key] = deepExtend({}, val);

        // new value is empty object
      } else if (overwriteByEmpty && isEmpty(val)) {
        target[key] = {};

        // source value and new value is objects both, extending...
      } else {
        target[key] = deepExtend(src, val, overwriteByEmpty);
      }
    });
  });

  return target;
};

/*
 * merges objects instead of replacing
 * @param {Object} destination object
 * @returns {Object} merged object
 */
var merge = exports.merge = function merge(dest) {

  // objects to overwrite dest are next arguments
  var objs = Array.prototype.slice.call(arguments, 1);

  // loop through each obj and each argument, left to right
  forEach(objs, function (obj, i) {
    forEach(obj, function (value, k) {
      if (obj.hasOwnProperty(k)) {
        if (dest.hasOwnProperty(k)) {
          if (!isArray(dest[k])) {
            dest[k] = [dest[k]];
          }
          dest[k].push(value);
        } else {
          dest[k] = value;
        }
      }
    });
  });
  return dest;
};

/*
 * clones an object (shallow copy)
 * @param {Object} src original object
 * @param {Array} arr filter keys
 * @returns {Object} cloned object
 */
var clone = exports.clone = function clone(src, arr, exclude) {
  if (isArray(src)) {
    return src.slice(0);
  }
  var clone = {};
  forEach(src, function (value, k) {
    if (arr && arr.indexOf(k) === -1 || exclude && exclude.indexOf(k) !== -1) {
      return;
    }
    if (src.hasOwnProperty(k)) {
      clone[k] = value;
    }
  });
  return clone;
};

/*
 * deep clones an object (deep copy)
 * @param {Object} src original object
 * @returns {Object} cloned object
 */
var deepClone = exports.deepClone = function deepClone(src) {
  var clone = {};
  if (isArray(src)) clone = [];

  forEach(src, function (value, k) {
    if (isObject(value) || isArray(value)) {
      clone[k] = deepClone(value);
    } else {
      clone[k] = value;
    }
  });
  return clone;
};

/*
 * Prints message to timestamp
 * @param {Arr} arr
 * @param {Object} el
 */
var without = exports.without = function without(arr, el) {
  var idx = arr.indexOf(el);
  if (idx !== -1) {
    arr.splice(idx, 1);
  }
  return arr;
};

/*
 * unique items in an array
 * @param {Array} arr original array
 * @param {Function} func optional evaluation function
 * @returns {Array} unique items
 * Based on:
 * http://stackoverflow.com/questions/1960473/unique-values-in-an-array
 */
var unique = exports.unique = function unique(array) {
  var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (data) {
    return data;
  };

  var uniqueValues = {};

  return array.filter(function (item) {
    var value = map(item);

    if (uniqueValues.hasOwnProperty(value)) {
      return false;
    }

    uniqueValues[value] = 1;

    return true;
  });
};

/*
 * unique items in an array keeping the last item
 * @param {Array} arr original array
 * @param {Function} func optional evaluation function
 * @returns {Array} unique items
 * Based on the previous method
 */
var uniqueLast = exports.uniqueLast = function uniqueLast(arr, func) {
  var u = {};
  var a = [];
  if (!func) {
    func = function func(d) {
      return d;
    };
  }
  for (var i = 0, l = arr.length; i < l; i += 1) {
    var key = func(arr[i]);
    if (u.hasOwnProperty(key)) {
      a.splice(u[key], 1); //remove old item from array
    }
    a.push(arr[i]);
    u[key] = a.length - 1;
  }
  return a;
};

/*
 * returns first value that passes the test
 * @param {Array} arr original collection
 * @returns {Function} func test function
 */
var find = exports.find = function find(arr, func) {
  var found = void 0;
  forEach(arr, function (i) {
    if (func(i)) {
      found = i;
      return false; //break
    }
  });
  return found;
};

/*
 * filters an array based on object properties
 * @param {Array} arr original array
 * @returns {Object} filter properties to use as filter
 */
var filter = exports.filter = function filter(arr, _filter) {
  var index = -1;
  var length = arr.length;
  var resIndex = -1;
  var result = [];
  var keys = Object.keys(_filter);
  var s_keys = keys.length;
  var i = void 0;
  var f = void 0;
  while ((index += 1) < length) {
    var value = arr[index];
    var match = true;
    for (i = 0; i < s_keys; i += 1) {
      f = keys[i];
      if (!value.hasOwnProperty(f) || value[f] !== _filter[f]) {
        match = false;
        break;
      }
    }
    if (match) {
      result[resIndex += 1] = value;
    }
  }
  return result;
};

/*
 * filters an array based on object properties.
 * Properties may be arrays determining possible values
 * @param {Array} arr original array
 * @returns {Object} filter properties to use as filter
 */
var filterAny = exports.filterAny = function filterAny(arr, filter, wildcard) {
  var index = -1;
  var length = arr.length;
  var resIndex = -1;
  var result = [];
  var keys = Object.keys(filter);
  var s_keys = keys.length;
  var i = void 0,
      f = void 0;
  while ((index += 1) < length) {
    var value = arr[index];
    //normalize to array
    var match = true;
    for (i = 0; i < s_keys; i += 1) {
      f = keys[i];
      if (!value.hasOwnProperty(f) || !matchAny(value[f], filter[f], wildcard)) {
        match = false;
        break;
      }
    }
    if (match) {
      result[resIndex += 1] = value;
    }
  }
  return result;
};

/*
 * checks if the value matches the comparison value or any in array
 * compare may be an determining possible values
 * @param value original value
 * @param compare value or array
 * @param {String} wildc wildcard value
 * @returns {Boolean} try
 */
var matchAny = exports.matchAny = function matchAny(values, compare, wildc) {
  //normalize value
  if (!isArray(values)) values = [values];
  if (!wildc) wildc = "*"; //star by default
  var match = false;
  for (var e = 0; e < values.length; e++) {
    var value = values[e];

    if (!isArray(compare) && value == compare) {
      match = true;
      break;
    } else if (isArray(compare)) {
      var found = -1;
      for (var i = 0; i < compare.length; i++) {
        var c = compare[i];
        if (!isArray(c) && (c == value || c === wildc)) {
          found = i;
          break;
        } else if (isArray(c)) {
          //range
          var min = c[0];
          var max = c[1] || min;
          if (value >= min && value <= max) {
            found = i;
            break;
          }
        }
      }
      if (found !== -1) {
        match = true;
        break;
      }
    }
  }
  return match;
};

/**
 * prevent scrolling parent scrollable elements for 2 second when element scrolled to end
 * @param node
 */

var preventAncestorScrolling = exports.preventAncestorScrolling = function preventAncestorScrolling(element) {
  var preventScrolling = false;
  element.on("mousewheel", function (d, i) {
    var scrollTop = this.scrollTop;
    var scrollHeight = this.scrollHeight;
    var height = element.node().offsetHeight;
    var delta = d3.event.wheelDelta;
    var up = delta > 0;
    var prevent = function prevent() {
      d3.event.stopPropagation();
      d3.event.preventDefault();
      d3.event.returnValue = false;
      return false;
    };

    var scrollTopTween = function scrollTopTween(scrollTop) {
      return function () {
        var _this = this;
        var i = d3.interpolateNumber(this.scrollTop, scrollTop);
        return function (t) {
          _this.scrollTop = i(t);
        };
      };
    };
    if (!up) {
      // Scrolling down
      if (-delta > scrollHeight - height - scrollTop && scrollHeight != height + scrollTop) {
        element.transition().delay(0).duration(0).tween("scrolltween", scrollTopTween(scrollHeight));
        //freeze scrolling on 2 seconds on bottom position
        preventScrolling = true;
        setTimeout(function () {
          preventScrolling = false;
        }, 2000);
      } else if (scrollTop == 0) {
        //unfreeze when direction changed
        preventScrolling = false;
      }
    } else if (up) {
      // Scrolling up
      if (delta > scrollTop && scrollTop > 0) {
        //
        //freeze scrolling on 2 seconds on top position
        element.transition().delay(0).duration(0).tween("scrolltween", scrollTopTween(0));
        preventScrolling = true;
        setTimeout(function () {
          preventScrolling = false;
        }, 2000);
      } else if (scrollHeight == height + scrollTop) {
        //unfreeze when direction changed
        preventScrolling = false;
      }
    }
    if (preventScrolling) {
      return prevent();
    }
  });
};

/*
 * Converts radius to area, simple math
 * @param {Number} radius
 * @returns {Number} area
 */
var radiusToArea = exports.radiusToArea = function radiusToArea(r) {
  return r * r * Math.PI;
};

/*
 * Computes hypotenuse of a right triangle, given the catheti
 * @param {Number} x
 * @param {Number} y
 * @returns {Number} square root of sum of the squares of x and y
 */
var hypotenuse = exports.hypotenuse = function hypotenuse(x, y) {
  return Math.sqrt(x * x + y * y);
};

/*
 * Computes cathetus of a right triangle, given the hypotenuse and cathetus
 * @param {Number} h
 * @param {Number} c
 * @returns {Number} square root of difference of the squares of h and c
 */
var cathetus = exports.cathetus = function cathetus(h, c) {
  return Math.sqrt(h * h - c * c);
};

/*
 * Converts area to radius, simple math
 * @param {Number} area
 * @returns {Number} radius
 */
var areaToRadius = exports.areaToRadius = function areaToRadius(a) {
  return Math.sqrt(a / Math.PI);
};

/*
 * Prints message to timestamp
 * @param {String} message
 */
var timeStamp = exports.timeStamp = function timeStamp(message) {
  if (console && typeof console.timeStamp === "function") {
    console.timeStamp(message);
  }
};

/*
 * Prints warning
 * @param {String} message
 */
var warn = exports.warn = function warn(message) {
  message = Array.prototype.slice.call(arguments).map(function (m) {
    return m instanceof Object ? JSON.stringify(m, null, 4) : m;
  }).join(" ");
  if (console && typeof console.warn === "function") {

    console.warn(message);
  }
  // "return true" is needed to find out if a parent function is exited with warning
  // example:
  // myfunction = function() { if(brokenstuff) return utils.warn("broken stuff found") }
  // if(myfunction()) return; // stopped execution after myfunction finds broken stuff
  // ... or moving on
  return true;
};

/*
 * Prints message for group
 * @param {String} message
 */
var groupCollapsed = exports.groupCollapsed = function groupCollapsed(message) {
  message = Array.prototype.slice.call(arguments).join(" ");
  if (console && typeof console.groupCollapsed === "function") {
    console.groupCollapsed(message);
  }
};

/*
 * Prints end of group
 * @param {String} message
 */
var groupEnd = exports.groupEnd = function groupEnd() {
  if (console && typeof console.groupEnd === "function") {
    console.groupEnd();
  }
};

/*
 * Prints error
 * @param {String} message
 */
var error = exports.error = function error(err) {
  if (console && typeof console.error === "function") {
    if (err.stack) {
      console.error(err.stack);
    } else {
      console.error(err);
    }
    if (arguments.length > 1) {
      console.error.apply(this, Array.prototype.slice.call(arguments, 1));
    }
  }
};

/*
 * Count the number of decimal numbers
 * @param {Number} number
 */
var countDecimals = exports.countDecimals = function countDecimals(number) {
  if (Math.floor(number.valueOf()) === number.valueOf()) {
    return 0;
  }
  return number.toString().split(".")[1].length || 0;
};

/*
 * Adds class to DOM element
 * @param {Element} el
 * @param {String} className
 */
var addClass = exports.addClass = function addClass(el, className) {
  if (el.classList) {
    el.classList.add(className);
  } else {
    //IE<10
    el.className += " " + className;
  }
};

/*
 * Remove class from DOM element
 * @param {Element} el
 * @param {String} className
 */
var removeClass = exports.removeClass = function removeClass(el, className) {
  if (el.classList) {
    el.classList.remove(className);
  } else {
    //IE<10
    el.className = el.className.replace(new RegExp("(^|\\b)" + className.split(" ").join("|") + "(\\b|$)", "gi"), " ");
  }
};

/*
 * Adds or removes class depending on value
 * @param {Element} el
 * @param {String} className
 * @param {Boolean} value
 */
var classed = exports.classed = function classed(el, className, value) {
  if (value === true) {
    addClass(el, className);
  } else if (value === false) {
    removeClass(el, className);
  } else {
    return hasClass(el, className);
  }
};

/*
 * Checks whether a DOM element has a class or not
 * @param {Element} el
 * @param {String} className
 * @return {Boolean}
 */
var hasClass = exports.hasClass = function hasClass(el, className) {
  return el.classList ? el.classList.contains(className) : new RegExp("(^| )" + className + "( |$)", "gi").test(el.className);
};

/*
 * Throttles a function
 * @param {Function} func
 * @param {Number} ms duration
 * @return {Function}
 * Function recallLast was added to prototype of returned function.
 * Call Function.recallLast() - immediate recall func with last saved arguments,
 *                              else func will be called automaticly after ms duration
 */
var throttle = exports.throttle = function throttle(func, ms) {

  var throttled = false;
  var savedArgs = void 0;
  var savedThis = void 0;
  var nextTime = void 0;

  var __recallLast = function __recallLast() {
    if (throttled) {
      throttled = false;
      func.apply(savedThis, savedArgs);
    }
  };

  var wrapper = function wrapper() {

    if (nextTime > Date.now()) {
      throttled = true;
      savedArgs = arguments;
      savedThis = this;
      return;
    }

    nextTime = Date.now() + ms;
    throttled = false;

    func.apply(this, arguments);

    setTimeout(function () {
      __recallLast();
    }, ms);
  };

  wrapper.recallLast = __recallLast;

  return wrapper;
};

/*
 * Returns keys of an object as array
 * @param {Object} arg
 * @returns {Array} keys
 */
var keys = exports.keys = function keys(arg) {
  return Object.keys(arg);
};

/*
 * returns the values of an object in an array format
 * @param {Object} obj
 * @return {Array}
 */
var values = exports.values = function values(obj) {
  var arr = [];
  var keys = Object.keys(obj);
  var size = keys.length;
  for (var i = 0; i < size; i += 1) {
    arr.push(obj[keys[i]]);
  }
  return arr;
};

/*
 * Computes the minumum value in an array
 * @param {Array} arr
 */
var arrayMin = exports.arrayMin = function arrayMin(arr) {
  return arr.reduce(function (p, v) {
    return p < v ? p : v;
  });
};

/*
 * Computes the minumum value in an array
 * @param {Array} arr
 */
var arrayMax = exports.arrayMax = function arrayMax(arr) {
  return arr.reduce(function (p, v) {
    return p > v ? p : v;
  });
};

/*
 * Computes the mean of an array
 * @param {Array} arr
 */
var arrayMean = exports.arrayMean = function arrayMean(arr) {
  return arraySum(arr) / arr.length;
};

/*
 * Computes the sum of an array
 * @param {Array} arr
 */
var arraySum = exports.arraySum = function arraySum(arr) {
  return arr.reduce(function (a, b) {
    return a + b;
  });
};

/*
 * Computes the median of an array
 * @param {Array} arr
 */
var arrayMedian = exports.arrayMedian = function arrayMedian(arr) {
  arr = arr.sort(function (a, b) {
    return a - b;
  });
  var middle = Math.floor((arr.length - 1) / 2);

  return arr.length % 2 ? arr[middle] : (arr[middle] + arr[middle + 1]) / 2;
};

/*
 * Returns the last value of array
 * @param {Array} arr
 */
var arrayLast = exports.arrayLast = function arrayLast(arr) {
  if (!arr.length) return null;
  return arr[arr.length - 1];
};

/*
 * Returns the resulting object of the difference between two objects
 * @param {Object} obj2
 * @param {Object} obj1
 * @returns {Object}
 */
var diffObject = exports.diffObject = function diffObject(obj2, obj1) {
  var diff = {};
  forEach(obj1, function (value, key) {
    if (!obj2.hasOwnProperty(key) && isPlainObject(value)) {
      diff[key] = diffObject({}, value);
    }
  });
  forEach(obj2, function (value, key) {
    if (!obj1.hasOwnProperty(key)) {
      diff[key] = value;
    } else if (value !== obj1[key]) {
      if (isPlainObject(value) && isPlainObject(obj1[key])) {
        if (isEmpty(value)) {
          if (!isEmpty(obj1[key])) {
            diff[key] = {};
          }
        } else {
          var d = diffObject(value, obj1[key]);
          if (Object.keys(d).length > 0) {
            diff[key] = d;
          }
        }
      } else if (!isArray(value) || !isArray(obj1[key]) || !deepArrayEquals(value, obj1[key])) {
        diff[key] = value;
      }
    }
  });
  return diff;
};

/*
 * Defers a function
 * @param {Function} func
 */
var defer = exports.defer = function defer(func) {
  setTimeout(func, 1);
};

/*
 * Defers a function
 * @param {Function} func
 */
var delay = exports.delay = function delay(_delay) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, _delay);
  });
};

var clearDelay = exports.clearDelay = function clearDelay(delayId) {
  return clearTimeout(delayId);
};

/*
 * Creates a hashcode for a string or array
 * @param {String|Array} str
 * @return {Number} hashCode
 */
var hashCode = exports.hashCode = function hashCode(str) {
  if (!isString(str)) {
    str = JSON.stringify(str);
  }
  var hash = 0;
  var size = str.length;
  var c = void 0;
  if (size === 0) {
    return hash;
  }
  for (var i = 0; i < size; i += 1) {
    c = str.charCodeAt(i);
    hash = (hash << 5) - hash + c;
    hash &= hash; // Convert to 32bit integer
  }
  return hash.toString();
};

/*
 * Converts D3 nest array into the object with key-value pairs, recursively
 * @param {Array} arr - array like this [{key: k, values: [a, b, ...]}, {...} ... {...}]
 * @return {Object} object like this {k: [a, b, ...], ...}
 */
//
var nestArrayToObj = exports.nestArrayToObj = function nestArrayToObj(arr) {
  if (!arr || !arr.length || !arr[0].key) return arr;
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    res[arr[i].key] = nestArrayToObj(arr[i].values);
  }
  return res;
};

var nestArrayToObjWithFlatKeys = exports.nestArrayToObjWithFlatKeys = function nestArrayToObjWithFlatKeys(arr) {
  var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var keys = arguments[2];
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

  if (!arr || !arr.length || !arr[0].key) {
    if (keys) {
      keys += "]";
      !res[keys] && (res[keys] = {});
      res[keys][key] = arr;
    } else {
      res[key] = arr;
    }
    return arr;
  }
  if (key) keys = keys ? keys + "," + JSON.stringify(key) : "[" + JSON.stringify(key);
  for (var i = 0; i < arr.length; i++) {
    nestArrayToObjWithFlatKeys(arr[i].values || arr[i].value, res, keys, arr[i].key);
  }
  return res;
};

var nestArrayToValues = exports.nestArrayToValues = function nestArrayToValues(arr) {
  var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!arr || !arr.length || !arr[0].key) {
    res.push.apply(res, _toConsumableArray(arr));
    return;
  }
  for (var i = 0; i < arr.length; i++) {
    nestArrayToValues(arr[i].values || arr[i].value, res);
  }
  return res;
};

var interpolateVector = exports.interpolateVector = function interpolateVector() {};

/**
 * interpolates the specific value
 * @param {Array} items -- an array of items, sorted by "dimTime", filtered so that no item[which] is null
 * @param {String} use -- a use of hook that wants to interpolate. can be "indicator" or "property" or "constant"
 * @param {String} which -- a hook pointer to indicator or property, e.g. "lex"
 * @param {Number} next -- an index of next item in "items" array after the value to be interpolated. if omitted, then calculated here, but it's expensive
 * @param {String} dimTime -- a pointer to time dimension, usually "time"
 * @param {Date} time -- reference point for interpolation. here the valus is to be found
 * @param {String} method refers to which formula to use. "linear" or "exp". Falls back to "linear" if undefined
 * @param {Boolean} extrapolate indicates if we should use zero-order extrapolation outside the range of available data
 * @returns {Number} interpolated value
 */
var interpolatePoint = exports.interpolatePoint = function interpolatePoint(items, use, which, next, dimTime, time, method, extrapolate) {

  if (!items || items.length === 0) {
    warn("interpolatePoint failed because incoming array is empty. It was " + which);
    return null;
  }
  // return constant for the use of "constant"
  if (use === "constant") return which;

  // zero-order interpolation for the use of properties
  if (use === "property") return items[0][which];

  // the rest is for the continuous measurements

  if (extrapolate) {
    // check if the desired value is out of range. 0-order extrapolation
    if (time - items[0][dimTime] <= 0) return items[0][which];
    if (time - items[items.length - 1][dimTime] >= 0) return items[items.length - 1][which];
  } else {
    // no extrapolation according to Ola's request
    if (time < items[0][dimTime] || time > items[items.length - 1][dimTime]) return null;
  }

  if (!next && next !== 0) next = d3.bisectLeft(items.map(function (m) {
    return m[dimTime];
  }), time);

  if (next === 0) return items[0][which];

  //return null if data is missing
  if (items[next] === undefined || items[next][which] === null || items[next - 1][which] === null || items[next][which] === "") {
    warn("interpolatePoint failed because next/previous points are bad in " + which);
    return null;
  }

  //do the math to calculate a value between the two points
  var result = _interpolators2.default[method || "linear"](items[next - 1][dimTime], items[next][dimTime], items[next - 1][which], items[next][which], time);

  // cast to time object if we are interpolating time
  if (which === dimTime) result = new Date(result);
  if (isNaN(result)) {
    warn("interpolatePoint failed because result is NaN. It was " + which);
    result = null;
  }

  return result;
};

/*
 * Performs an ajax request
 * @param {Object} options
 * @param {String} className
 * @return {Boolean}
 */
var ajax = exports.ajax = function ajax(options) {
  var request = new XMLHttpRequest();
  request.open(options.method, options.url, true);
  if (options.method === "POST" && !options.json) {
    request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
  } else if (options.method === "POST" && options.json) {
    request.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
  }
  request.onload = function () {
    if (request.status >= 200 && request.status < 400) {
      // Success!
      var data = options.json ? JSON.parse(request.responseText) : request.responseText;
      if (options.success) {
        options.success(data);
      }
    } else {
      if (options.error) {
        options.error();
      }
    }
  };
  request.onerror = function () {
    if (options.error) {
      options.error();
    }
  };
  request.send(options.data);
};

/*
 * Performs a GET http request
 */
var get = exports.get = function get(url, pars, success, error, json) {
  pars = pars || [];
  forEach(pars, function (value, key) {
    pars.push(key + "=" + value);
  });
  url = pars.length ? url + "?" + pars.join("&") : url;
  ajax({
    method: "GET",
    url: url,
    success: success,
    error: error,
    json: json
  });
};

/*
 * Performs a POST http request
 */
var post = exports.post = function post(url, pars, success, error, json) {
  ajax({
    method: "POST",
    url: url,
    success: success,
    error: error,
    json: json,
    data: pars
  });
};

/**
 * Make function memoized
 * @param {Function} fn
 * @returns {Function}
 */
var memoize = exports.memoize = function memoize(fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments);
    var hash = "";
    var i = args.length;
    var currentArg = null;

    while (i--) {
      currentArg = args[i];
      hash += currentArg === Object(currentArg) ? JSON.stringify(currentArg) : currentArg;
      fn.memoize || (fn.memoize = {});
    }

    return hash in fn.memoize ? fn.memoize[hash] : fn.memoize[hash] = fn.apply(this, args);
  };
};

// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.
var debounce = exports.debounce = function debounce(func, wait, immediate) {
  var timeout = void 0;
  return function () {
    var context = this;
    var args = arguments;
    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
};

var isTouchDevice = exports.isTouchDevice = function isTouchDevice() {
  //'ontouchstart' is not reliable in Google Chrome #2116, but Chrome has this firesTouchEvents flag
  if (((d3.event || {}).sourceCapabilities || {}).firesTouchEvents != null) {
    return d3.event.sourceCapabilities.firesTouchEvents;
  }
  return !!("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);
};

//return a pruneed tree
var pruneTree = exports.pruneTree = function pruneTree(tree, filterCallback) {
  var filteredTree = {};
  var filteredChildrens = [];
  if (tree.hasOwnProperty("children")) {
    filteredChildrens = tree.children.map(function (childrenTree) {
      return pruneTree(childrenTree, filterCallback);
    }).filter(function (childrenTree) {
      return Object.keys(childrenTree).length !== 0;
    });
  }
  if (filteredChildrens.length != 0 || filterCallback(tree)) {
    //copy all the properties to the new tree
    forEach(tree, function (value, key) {
      filteredTree[key] = value;
    });
  }
  if (filteredChildrens.length != 0) {
    filteredTree["children"] = filteredChildrens;
  }
  return filteredTree;
};

var setIcon = exports.setIcon = function setIcon(element, icon) {
  element.selectAll("*").remove();
  element.node().appendChild(element.node().ownerDocument.importNode(new DOMParser().parseFromString(icon, "application/xml").documentElement, true));
  return element;
};

//http://stackoverflow.com/questions/26049488/how-to-get-absolute-coordinates-of-object-inside-a-g-group
function makeAbsoluteContext(element, svgDocument) {
  return function (x, y) {
    var offset = svgDocument.getBoundingClientRect();
    var matrix = element.getScreenCTM();
    return {
      x: matrix.a * x + matrix.c * y + matrix.e - offset.left,
      y: matrix.b * x + matrix.d * y + matrix.f - offset.top
    };
  };
}

/***
 thenBy.js
 Copyright 2013 Teun Duynstee
 https://github.com/Teun/thenBy.js/blob/master/thenBy.module.js

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
function firstBy() {

  function identity(v) {
    return v;
  }

  function ignoreCase(v) {
    return typeof v === "string" ? v.toLowerCase() : v;
  }

  function makeCompareFunction(f, opt) {
    opt = typeof opt === "number" ? { direction: opt } : opt || {};
    if (typeof f !== "function") {
      var prop = f;
      // make unary function
      f = function f(v1) {
        return v1[prop] ? v1[prop] : "";
      };
    }
    if (f.length === 1) {
      // f is a unary function mapping a single item to its sort score
      var uf = f;
      var preprocess = opt.ignoreCase ? ignoreCase : identity;
      f = function f(v1, v2) {
        return preprocess(uf(v1)) < preprocess(uf(v2)) ? -1 : preprocess(uf(v1)) > preprocess(uf(v2)) ? 1 : 0;
      };
    }
    if (opt.direction === -1) return function (v1, v2) {
      return -f(v1, v2);
    };
    return f;
  }

  /* adds a secondary compare function to the target function (`this` context)
   which is applied in case the first one returns 0 (equal)
   returns a new compare function, which has a `thenBy` method as well */
  function tb(func, opt) {
    var x = typeof this === "function" ? this : false;
    var y = makeCompareFunction(func, opt);
    var f = x ? function (a, b) {
      return x(a, b) || y(a, b);
    } : y;
    f.thenBy = tb;
    return f;
  }

  return tb;
}

function transform(node) {
  var _node$transform$baseV = node.transform.baseVal.consolidate().matrix,
      a = _node$transform$baseV.a,
      b = _node$transform$baseV.b,
      c = _node$transform$baseV.c,
      d = _node$transform$baseV.d,
      e = _node$transform$baseV.e,
      f = _node$transform$baseV.f;


  return function (a, b, c, d, e, f) {
    var scaleX = void 0,
        scaleY = void 0,
        skewX = void 0;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * Math.PI / 180,
      skewX: Math.atan(skewX) * Math.PI / 180,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }(a, b, c, d, e, f);
}

var capitalize = exports.capitalize = function capitalize(string) {
  return string.slice(0, 1).toUpperCase() + string.slice(1).toLowerCase();
};

// http://stackoverflow.com/questions/11381673/detecting-a-mobile-browser
var isMobileOrTablet = exports.isMobileOrTablet = function isMobileOrTablet() {
  var agent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator.userAgent || navigator.vendor || window.opera;
  return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(agent.substr(0, 4))
  );
};

function getKey(d, keysArray) {
  var key = d[keysArray[0]];
  for (var i = 1, j = keysArray.length; i < j; i++) {
    key = key + "," + d[keysArray[i]];
  }
  return key;
}

var isFunction = exports.isFunction = function isFunction(value) {
  return typeof value === "function";
};

/**
 * This is helper for getting some deep props in object. It's added to remove code like
 * this.show[dimension]
 *   && this.show[dimension]["$in"]
 *   && this.show[dimension]["$in"].indexOf(d[dimension]) !== -1;
 * when you need to get (+check) nested properties.

 * @param {context} object The root object where we start to look for the props
 * @param {Array} props Names of properties for nesting
 * @param {*} defaultValue Default value that will be returned if there is no such properties in object
 * @returns {property} The property we're looking for or a default value

 * Usage:
 * const object = { one: { two: "your value" } };
 * utils.getProp(object, ["one", "two"]); // "your value"
 */
var getProp = exports.getProp = function getProp(object, props, defaultValue) {
  while (props.length) {
    var prop = props.shift();
    if (object.hasOwnProperty(prop)) {
      object = object[prop];
    } else {
      return defaultValue;
    }
  }
  return object;
};

var px2num = exports.px2num = function px2num(pixels) {
  return isString(pixels) && pixels.endsWith("px") ? parseFloat(pixels) : console.warn("Strange pixels value: " + pixels) || pixels;
};

var replaceNumberSpacesToNonBreak = exports.replaceNumberSpacesToNonBreak = function replaceNumberSpacesToNonBreak(numString) {
  return numString ? numString.replace(/\d{1,3}(?: \d{3})+(?=\W)/g, function (match) {
    return match.replace(/ /g, "\xa0");
  }) : numString;
};

var getSubtitle = exports.getSubtitle = function getSubtitle() {
  var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var shortTitle = arguments[1];

  var subtitle = title.replace(shortTitle, "");
  if (subtitle[0] === ",") subtitle = subtitle.slice(1);
  var regexpResult = /^\((.*)\)$|.*/.exec(subtitle.trim());
  return regexpResult[1] || regexpResult[0] || "";
};

var getBrowserDetails = exports.getBrowserDetails = function getBrowserDetails() {

  var nVer = navigator.appVersion;
  var nAgt = navigator.userAgent;
  var browserName = navigator.appName;
  var fullVersion = "" + parseFloat(navigator.appVersion);
  var majorVersion = parseInt(navigator.appVersion, 10);
  var nameOffset = void 0,
      verOffset = void 0,
      ix = void 0;
  var isElectron = navigator.userAgent.toLowerCase().indexOf(" electron/") > -1;

  // In Opera, the true version is after "Opera" or after "Version"
  if ((verOffset = nAgt.indexOf("Opera")) != -1) {
    browserName = "Opera";
    fullVersion = nAgt.substring(verOffset + 6);
    if ((verOffset = nAgt.indexOf("Version")) != -1) fullVersion = nAgt.substring(verOffset + 8);
  }
  // In MSIE, the true version is after "MSIE" in userAgent
  else if ((verOffset = nAgt.indexOf("MSIE")) != -1) {
      browserName = "Microsoft Internet Explorer";
      fullVersion = nAgt.substring(verOffset + 5);
    }
    // In Chrome, the true version is after "Chrome"
    else if ((verOffset = nAgt.indexOf("Chrome")) != -1) {
        browserName = "Chrome";
        fullVersion = nAgt.substring(verOffset + 7);
      }
      // In Safari, the true version is after "Safari" or after "Version"
      else if ((verOffset = nAgt.indexOf("Safari")) != -1) {
          browserName = "Safari";
          fullVersion = nAgt.substring(verOffset + 7);
          if ((verOffset = nAgt.indexOf("Version")) != -1) fullVersion = nAgt.substring(verOffset + 8);
        }
        // In Firefox, the true version is after "Firefox"
        else if ((verOffset = nAgt.indexOf("Firefox")) != -1) {
            browserName = "Firefox";
            fullVersion = nAgt.substring(verOffset + 8);
          }
          // In most other browsers, "name/version" is at the end of userAgent
          else if ((nameOffset = nAgt.lastIndexOf(" ") + 1) < (verOffset = nAgt.lastIndexOf("/"))) {
              browserName = nAgt.substring(nameOffset, verOffset);
              fullVersion = nAgt.substring(verOffset + 1);
              if (browserName.toLowerCase() == browserName.toUpperCase()) {
                browserName = navigator.appName;
              }
            }
  // trim the fullVersion string at semicolon/space if present
  if ((ix = fullVersion.indexOf(";")) != -1) fullVersion = fullVersion.substring(0, ix);
  if ((ix = fullVersion.indexOf(" ")) != -1) fullVersion = fullVersion.substring(0, ix);

  majorVersion = parseInt("" + fullVersion, 10);
  if (isNaN(majorVersion)) {
    fullVersion = "" + parseFloat(navigator.appVersion);
    majorVersion = parseInt(navigator.appVersion, 10);
  }

  return (isElectron ? "Electron " : "") + browserName + " " + majorVersion + " (" + fullVersion + ")";
};

var normaliseLink = exports.normaliseLink = function normaliseLink(input) {
  if (input.indexOf("http://") === 0 || input.indexOf("https://") === 0) return input;
  if (input.indexOf("//") === 0) return "http://" + input.slice(2);
  return "http://" + input;
};

var getOSname = exports.getOSname = function getOSname() {
  var OSName = "Unknown";
  if (window.navigator.userAgent.indexOf("Windows NT 10.0") != -1) OSName = "Windows 10";
  if (window.navigator.userAgent.indexOf("Windows NT 6.2") != -1) OSName = "Windows 8";
  if (window.navigator.userAgent.indexOf("Windows NT 6.1") != -1) OSName = "Windows 7";
  if (window.navigator.userAgent.indexOf("Windows NT 6.0") != -1) OSName = "Windows Vista";
  if (window.navigator.userAgent.indexOf("Windows NT 5.1") != -1) OSName = "Windows XP";
  if (window.navigator.userAgent.indexOf("Windows NT 5.0") != -1) OSName = "Windows 2000";
  if (window.navigator.userAgent.indexOf("Mac") != -1) OSName = "Mac/iOS";
  if (window.navigator.userAgent.indexOf("X11") != -1) OSName = "UNIX";
  if (window.navigator.userAgent.indexOf("Linux") != -1) OSName = "Linux";

  return OSName;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 3 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

var _globals = __webpack_require__(113);

var _globals2 = _interopRequireDefault(_globals);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var class_loading_first = "vzb-loading-first";
var class_loading_data = "vzb-loading-data";
var class_error = "vzb-error";

var templates = {};
var Component = _events2.default.extend({

  /**
   * Initializes the component
   * @param {Object} config Initial config, with name and placeholder
   * @param {Object} parent Reference to tool
   */
  init: function init(config, parent) {
    this._id = this._id || utils.uniqueId("c");
    this._ready = false;
    this._readyOnce = false;
    this.name = this.name || config.name || this._id;
    this.template = this.template || "<div></div>";
    this.placeholder = this.placeholder || config.placeholder;
    this.template_data = this.template_data || {
      name: this.name
    };
    //make sure placeholder is DOM element
    if (this.placeholder && !utils.isElement(this.placeholder)) {
      try {
        this.placeholder = parent.placeholder.querySelector(this.placeholder);
      } catch (e) {
        utils.error("Error finding placeholder '" + this.placeholder + "' for component '" + this.name + "'");
      }
    }
    this.parent = parent || null;
    this.root = this.parent ? this.parent.root : this;

    this.components = this.components || [];
    this._components_config = this.components.map(function (x) {
      return utils.clone(x);
    });

    //define expected models for this component
    this.model_expects = this.model_expects || [];
    this.model_binds = this.model_binds || {};
    this.createModel(config.model);

    this.ui = this.model.ui || this.ui || config.ui;
    this._super();

    this.registerListeners();
  },
  createModel: function createModel(configModel) {
    this.model = this._modelMapping(configModel);
  },
  registerListeners: function registerListeners() {
    this.on({
      "readyOnce": this.readyOnce,
      "ready": this.ready,
      "domReady": this.domReady,
      "resize": this.resize
    });
  },


  /**
   * Recursively starts preloading in components
   * @return {[type]} [description]
   */
  startPreload: function startPreload() {

    var promises = [];
    promises.push(this.preload());

    utils.forEach(this.components, function (subComponent) {
      return promises.push(subComponent.startPreload());
    });

    return Promise.all(promises);
  },
  preload: function preload() {
    return Promise.resolve();
  },


  /**
   * Executes after preloading is finished
   */
  afterPreload: function afterPreload() {
    if (this.model) {
      this.model.afterPreload();
    }
    utils.forEach(this.components, function (subcomp) {
      subcomp.afterPreload();
    });
  },


  /**
   * Renders the component (after data is ready)
   */
  render: function render() {
    this.prerender();
    this.postrender();
  },
  prerender: function prerender() {
    this.loadTemplate();
    this.loadSubComponents();
  },
  postrender: function postrender() {
    var _this2 = this;

    //render each subcomponent
    utils.forEach(this.components, function (subcomp) {
      subcomp.render();
      _this2.on("resize", function () {
        subcomp.trigger("resize");
      });
    });

    this.startLoading();
  },


  /**
   * Overloaded by Tool which starts loading of model
   * @return {[type]} [description]
   */
  startLoading: function startLoading() {
    var _this3 = this;

    // if a componente's model is ready, the component is ready
    this.model.on("ready", function () {
      _this3.loadingDone();
    });

    if (!(this.model && this.model.isLoading())) {
      this.loadingDone();
    }
  },
  loadingDone: function loadingDone() {
    utils.removeClass(this.placeholder, class_loading_first);
    utils.removeClass(this.placeholder, class_loading_data);
    this.setReady();
  },


  /**
   * Visually display errors
   * @param {Error} error — object of type class Error or its extension
   */
  renderError: function renderError(error) {
    var _this4 = this;

    if (!error) return utils.warn("renderError() was called without any specific error. Not rendering anything then.");
    if (utils.hasClass(this.placeholder, class_error)) return utils.warn("The app is already showing error dialog. Not rendering again.");

    utils.removeClass(this.placeholder, class_loading_first);
    utils.removeClass(this.placeholder, class_loading_data);
    utils.addClass(this.placeholder, class_error);

    var errorLog = JSON.stringify(error, null, 2);
    if (errorLog == "{}") errorLog = error.stack;

    var translator = this.model._root.locale.getTFunction();
    var mailto = "mailto:angie@gapminder.org?subject=Gapminder Vizabi error report&body=Hi Angie! Please have a look at this! %0D%0A %0D%0A %0D%0A\n      These are the steps to reproduce the error: %0D%0A \n      1. Go to " + window.location.origin + " %0D%0A \n      2. %5Bplease write here what you did%5D %0D%0A %0D%0A %0D%0A" + encodeURIComponent(errorLog);

    this.errorMessageEl.classed("vzb-hidden", false);
    var technical = this.errorMessageEl.select(".vzb-error-message-technical").html(errorLog);
    this.errorMessageEl.select(".vzb-error-message-expand").on("click", function () {
      return technical.classed("vzb-hidden", !technical.classed("vzb-hidden"));
    }).html(translator("crash/expand"));
    this.errorMessageEl.select(".vzb-error-message-close").on("click", function () {
      _this4.errorMessageEl.classed("vzb-hidden", true);
      utils.removeClass(_this4.placeholder, class_error);
    });
    this.errorMessageEl.select(".vzb-error-message-title").select("h1").html(error.icon || "🙄");

    var crashIntro = "crash/intro";
    var crashOutro = "crash/outro";
    var template = {};
    if (translator(error.name) !== error.name) {
      crashIntro = "reader/error/generic";
      crashOutro = error.name;

      if (error.name === "reader/error/wrongTimeUnitsOrColumn") template = { expected: this.model._root.state.time.getFormatter()(new Date()), found: error.details };
      if (error.name === "reader/error/repeatedKeys") template = error.details;
      if (error.name === "reader/error/undefinedDelimiter") template = { file: error.endpoint };
    }
    this.errorMessageEl.select(".vzb-error-message-intro").html(translator(crashIntro, template).replace("mailto", mailto));
    this.errorMessageEl.select(".vzb-error-message-outro").html(translator(crashOutro, template).replace("mailto", mailto));

    utils.error(errorLog);
  },
  setReady: function setReady(value) {
    if (!this._readyOnce) {
      this.trigger("readyOnce");
      this._readyOnce = true;
    }
    this._ready = true;
    this.trigger("ready");
  },


  /**
   * Loads the template
   * @returns defer a promise to be resolved when template is loaded
   */
  loadTemplate: function loadTemplate() {
    var tmpl = this.template;
    var data = this.template_data;
    var _this = this;
    var rendered = "";
    if (!this.placeholder) {
      return;
    }
    //todo: improve t function getter + generalize this
    data = utils.extend(data, {
      t: this.getTranslationFunction(true)
    });
    if (this.template) {
      try {
        rendered = templateFunc(tmpl, data);
      } catch (e) {
        var error = new Error();
        error.name = "template";
        error.message = "Templating error for component. Check if template name is unique and correct";
        error.details = this.name;
        this.renderError(error);
      }
    }
    //add loading class and html
    utils.addClass(this.placeholder, class_loading_data);
    utils.addClass(this.placeholder, class_loading_first);
    this.placeholder.innerHTML = rendered;
    this.element = this.placeholder.children[0];
    this.errorMessageEl = d3.select(this.element).append("div").attr("class", "vzb-error-message vzb-hidden").html("\n        <div class=\"vzb-error-message-background\"></div>\n        <div class=\"vzb-error-message-box\">\n          <div class=\"vzb-error-message-close\">" + _iconset.close + "</div>\n          <div class=\"vzb-error-message-title\"><h1></h1></div>\n          <div class=\"vzb-error-message-body\">\n            <p class=\"vzb-error-message-intro\"></p>\n            <br>\n            <p class=\"vzb-error-message-expand\"></p>\n            <textarea class=\"vzb-error-message-technical vzb-hidden\"></textarea>\n            <br>\n            <p class=\"vzb-error-message-outro\"></p>\n          </div>\n        </div>\n      ");

    //template is ready
    this.trigger("domReady");
  },
  getActiveProfile: function getActiveProfile(profiles, presentationProfileChanges) {
    // get layout values
    var layoutProfile = this.getLayoutProfile();
    var presentationMode = this.getPresentationMode();
    var activeProfile = utils.deepClone(profiles[layoutProfile]); // clone so it can be extended without changing the original profile

    // extend the profile with presentation mode values
    if (presentationMode && (presentationProfileChanges || {})[layoutProfile]) {
      utils.deepExtend(activeProfile, presentationProfileChanges[layoutProfile]);
    }

    return activeProfile;
  },


  /*
   * Loads all subcomponents
   */
  loadSubComponents: function loadSubComponents() {
    var _this = this;
    var config = void 0;
    var comp = void 0;
    //use the same name for collection
    this.components = [];

    // Loops through components, loading them.
    utils.forEach(this._components_config, function (component_config) {

      component_config.model = component_config.model || {};

      if (!component_config.component) {
        utils.error("Error loading component: name not provided");
        return;
      }

      comp = utils.isString(component_config.component) ? Component.get(component_config.component) : component_config.component;

      if (!comp) return;

      config = utils.extend(component_config, {
        name: component_config.component,
        ui: _this._uiMapping(component_config.placeholder, component_config.ui)
      });
      //instantiate new subcomponent
      var subcomp = new comp(config, _this);
      _this.components.push(subcomp);
    });
  },


  /**
   * Returns subcomponent by name
   * @returns {Boolean}
   */
  findChildByName: function findChildByName(name) {
    return utils.find(this.components, function (f) {
      return f.name === name;
    });
  },


  /**
   * Get layout profile of the current resolution
   * @returns {String} profile
   */
  getLayoutProfile: function getLayoutProfile() {
    // get profile from parent if layout is not available
    return this.model.ui ? this.model.ui.currentProfile() : this.parent.getLayoutProfile();
  },


  /**
   * Get if presentation mode is set of the current tool
   * @returns {Bool} presentation mode
   */
  getPresentationMode: function getPresentationMode() {
    // get profile from parent if layout is not available
    return this.model.ui ? this.model.ui.getPresentationMode() : this.parent.getPresentationMode();
  },


  //TODO: make ui mapping more powerful
  /**
   * Maps the current ui to the subcomponents
   * @param {String} id subcomponent id (placeholder)
   * @param {Object} ui Optional ui parameters to overwrite existing
   * @returns {Object} the UI object
   */
  _uiMapping: function _uiMapping(id, ui) {
    //if overwritting UI
    if (ui) {
      return new _model2.default("ui", ui);
    }
    if (id && this.ui) {
      id = id.replace(".", "");
      //remove trailing period
      var sub_ui = this.ui[id];
      if (sub_ui) {
        return sub_ui;
      }
    }
    return this.ui;
  },


  /**
   * Maps the current model to the subcomponents
   * @param {String|Array} model_config Configuration of model
   * @returns {Object} the model
   */
  _modelMapping: function _modelMapping(model_config) {
    var _this = this;
    var values = {};
    //If model_config is an array, we map it
    if (utils.isArray(model_config) && utils.isArray(this.model_expects)) {

      //if there's a different number of models received and expected
      if (this.model_expects.length !== model_config.length) {
        utils.groupCollapsed("DIFFERENCE IN NUMBER OF MODELS EXPECTED AND RECEIVED");
        utils.warn("Please, configure the 'model_expects' attribute accordingly in '" + this.name + "' or check the models passed in '" + _this.parent.name + "'.\n\n" + "Component: '" + _this.parent.name + "'\n" + "Subcomponent: '" + this.name + "'\n" + "Number of Models Expected: " + this.model_expects.length + "\nNumber of Models Received: " + model_config.length);
        utils.groupEnd();
      }
      utils.forEach(model_config, function (m, i) {
        if (!m) return;
        var model_info = _mapOne(m);

        var new_name = void 0;
        if (_this.model_expects[i]) {
          new_name = _this.model_expects[i].name;
          if (_this.model_expects[i].type && model_info.type !== _this.model_expects[i].type && (!utils.isArray(_this.model_expects[i].type) || _this.model_expects[i].type.indexOf(model_info.type) === -1)) {

            utils.groupCollapsed("UNEXPECTED MODEL TYPE: '" + model_info.type + "' instead of '" + _this.model_expects[i].type + "'");
            utils.warn("Please, configure the 'model_expects' attribute accordingly in '" + _this.name + "' or check the models passed in '" + _this.parent.name + "'.\n\n" + "Component: '" + _this.parent.name + "'\n" + "Subcomponent: '" + _this.name + "'\n" + "Expected Model: '" + _this.model_expects[i].type + "'\n" + "Received Model: '" + model_info.type + "'\n" + "Model order: " + i);
            utils.groupEnd();
          }
        } else {

          utils.groupCollapsed("UNEXPECTED MODEL: '" + model_config[i] + "'");
          utils.warn("Please, configure the 'model_expects' attribute accordingly in '" + _this.name + "' or check the models passed in '" + _this.parent.name + "'.\n\n" + "Component: '" + _this.parent.name + "'\n" + "Subcomponent: '" + _this.name + "'\n" + "Number of Models Expected: " + _this.model_expects.length + "\n" + "Number of Models Received: " + model_config.length);
          utils.groupEnd();
          new_name = model_info.name;
        }
        values[new_name] = model_info.model;
      });

      // fill the models that weren't passed with empty objects
      // e.g. if expected = [ui, locale, color] and passed/existing = [ui, locale]
      // it will fill values up to [ui, locale, {}]
      var existing = model_config.length;
      var expected = this.model_expects.length;
      if (expected > existing) {
        //skip existing
        this.model_expects.splice(0, existing);
        //adds new expected models if needed
        utils.forEach(expected, function (m) {
          values[m.name] = {};
        });
      }
    } else {
      return;
    }
    //return a new model with the defined submodels
    return new _model2.default(this.name, values, null, this.model_binds);
    /**
     * Maps one model name to current submodel and returns info
     * @param {String} name Full model path. E.g.: "state.marker.color"
     * @returns {Object} the model info, with name and the actual model
     */
    function _mapOne(name) {
      var parts = name.split(".");
      var current = _this.parent.model;
      var current_name = "";
      while (parts.length) {
        current_name = parts.shift();
        current = current[current_name];
      }
      return {
        name: name,
        model: current,
        type: current ? current.getType() : null
      };
    }
  },


  /**
   * Get translation function for templates
   * @param {Boolean} wrap wrap in spam tags
   * @returns {Function}
   */
  getTranslationFunction: function getTranslationFunction(wrap) {
    var t_func = void 0;
    try {
      t_func = this.model.get("locale").getTFunction();
    } catch (err) {
      if (this.parent && this.parent !== this) {
        t_func = this.parent.getTranslationFunction();
      }
    }
    if (!t_func) {
      t_func = function t_func(s) {
        return s;
      };
    }

    return wrap ? this._translatedStringFunction(t_func) : t_func;
  },


  /**
   * Get function for translated string
   * @param {Function} translation_function The translation function
   * @returns {Function}
   */
  _translatedStringFunction: function _translatedStringFunction(translation_function) {
    return function (string) {
      var translated = translation_function(string);
      return '<span data-vzb-translate="' + string + '">' + translated + "</span>";
    };
  },


  /**
   * Translate all strings in the template
   */
  translateStrings: function translateStrings() {
    var t = this.getTranslationFunction();
    var strings = this.placeholder.querySelectorAll("[data-vzb-translate]");
    if (strings.length === 0) {
      return;
    }
    utils.forEach(strings, function (str) {
      if (!str || !str.getAttribute) {
        return;
      }
      str.innerHTML = t(str.getAttribute("data-vzb-translate"));
    });
  },


  /**
   * Executes after the template is loaded and rendered.
   * Ideally, it contains HTML instantiations related to template
   * At this point, this.element and this.placeholder are available
   * as DOM elements
   */
  readyOnce: function readyOnce() {},


  /**
   * Executes after the template and model (if any) are ready
   */
  ready: function ready() {},


  /**
   * Executes when the resize event is triggered.
   * Ideally, it only contains operations related to size
   */
  resize: function resize() {},


  /**
   * Executed after template is loaded
   * Ideally, it contains instantiations related to template
   */
  domReady: function domReady() {},


  /**
   * Clears a component
   */
  clear: function clear() {
    this.freeze();
    if (this.model) this.model.freeze();
    utils.forEach(this.components, function (c) {
      c.clear();
    });
  }
});

// Based on Simple JavaScript Templating by John Resig
//generic templating function
function templateFunc(str, data) {

  var func = function func(obj) {
    return str.replace(/<%=([^%]*)%>/g, function (match) {
      //match t("...")
      var s = match.match(/t\s*\(([^)]+)\)/g);
      //replace with translation
      if (s.length) {
        s = obj.t(s[0].match(/"([^"]+)"/g)[0].split('"').join(""));
      }
      //use object[name]
      else {
          s = match.match(/([a-z\-A-Z]+([a-z\-A-Z0-9]?[a-zA-Z0-9]?)?)/g)[0];
          s = obj[s] || s;
        }
      return s;
    });
  };
  // Figure out if we're getting a template, or if we need to
  // load the template - and be sure to cache the result.
  var fn = !/<[a-z][\s\S]*>/i.test(str) ? templates[str] = templates[str] || templateFunc(_globals2.default.templates[str]) : func;

  // Provide some basic currying to the user
  return data ? fn(data) : fn;
}

//utility function to check if a component is a component
//TODO: Move to utils?
Component.isComponent = function (c) {
  return c._id && (c._id[0] === "t" || c._id[0] === "c");
};

exports.default = Component;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(58)('wks');
var uid = __webpack_require__(39);
var Symbol = __webpack_require__(3).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(25);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(4)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var IE8_DOM_DEFINE = __webpack_require__(116);
var toPrimitive = __webpack_require__(27);
var dP = Object.defineProperty;

exports.f = __webpack_require__(9) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(28);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _iconset = __webpack_require__(21);

var _requireAll = __webpack_require__(108);

var _requireAll2 = _interopRequireDefault(_requireAll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var dialogTemplates = (0, _requireAll2.default)(__webpack_require__(409));

/*!
 * VIZABI DIALOG
 * Reusable Dialog component
 */

var Dialog = _component2.default.extend({

  isDialog: true,

  /**
   * Initializes the dialog
   * @param {Object} config Initial config, with name and placeholder
   * @param {Object} parent Reference to tool
   */
  init: function init(config, parent) {
    this.name = this.name || "";

    this.model_expects = this.model_expects || [{
      name: "state",
      type: "model"
    }, {
      name: "ui",
      type: "ui"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.template = dialogTemplates[this.name];

    this._super(config, parent);

    this.transitionEvents = ["webkitTransitionEnd", "transitionend", "msTransitionEnd", "oTransitionEnd"];
  },


  /**
   * Executed when the dialog has been rendered
   */
  readyOnce: function readyOnce() {
    this.element = d3.select(this.element);
    this.titleEl = this.element.selectAll(".vzb-top-dialog > .vzb-dialog-modal > .vzb-dialog-title");
    this.buttonsEl = this.element.selectAll(".vzb-top-dialog > .vzb-dialog-modal > .vzb-dialog-buttons");
    this.contentEl = this.element.selectAll(".vzb-top-dialog > .vzb-dialog-modal > .vzb-dialog-content");
  },
  ready: function ready() {
    var _this = this;
    this.placeholderEl = d3.select(this.placeholder);
    this.rootEl = this.root.element instanceof Array ? this.root.element : d3.select(this.root.element);
    this.dragHandler = this.placeholderEl.select("[data-click='dragDialog']");
    this.dragHandler.html(_iconset.drag);
    this.pinIcon = this.placeholderEl.select("[data-click='pinDialog']");
    this.pinIcon.html(_iconset.pin);
    this.topPos = "";
    var profile = this.getLayoutProfile();

    var dg = dialogDrag(this.placeholderEl, this.rootEl, 10);
    var dragBehavior = d3.drag().on("start", function () {
      var topPos = _this.placeholderEl.node().offsetTop;
      _this.placeholderEl.style("top", topPos + "px");
      _this.placeholderEl.style("bottom", "auto");
      _this.trigger("dragstart");
      dg.dragStart(d3.event);
    }).on("drag", function () {
      _this.trigger("drag");
      dg.drag(d3.event);
    }).on("end", function () {
      _this.rightPos = _this.placeholderEl.style("right");
      _this.topPos = _this.placeholderEl.style("top");
      _this.trigger("dragend");
    });
    this.dragHandler.call(dragBehavior);

    this.dragHandler.classed("vzb-hidden", profile === "small");
    this.pinIcon.classed("vzb-hidden", profile === "small");
    this.resize();
  },
  resize: function resize() {
    if (this.placeholderEl && this.rootEl && this.placeholderEl.classed("vzb-top-dialog")) {
      this.placeholderEl.classed("notransition", true);

      var profile = this.getLayoutProfile();

      if (profile !== "small") {
        var chartWidth = parseInt(this.rootEl.style("width"), 10) || 0;
        var chartHeight = parseInt(this.rootEl.style("height"), 10) || 0;
        var dialogWidth = parseInt(this.placeholderEl.style("width"), 10) || 0;
        var dialogHeight = parseInt(this.placeholderEl.style("height"), 10) || 0;

        var dialogRight = parseInt(this.rightPos, 10);
        var dialogTop = parseInt(this.topPos, 10);
        var dialogRightMargin = parseInt(this.placeholderEl.style("margin-right"), 10) || 0;
        if (utils.isNumber(dialogRight) && dialogRight > chartWidth - dialogWidth - dialogRightMargin) {
          if (this.rightPos) {
            this.rightPos = chartWidth - dialogWidth - dialogRightMargin + "px";
            if (this.isOpen) this.placeholderEl.style("right", this.rightPos);
          }
        }
        if (utils.isNumber(dialogTop) && utils.isNumber(dialogHeight) && dialogTop >= 0 && dialogTop > chartHeight - dialogHeight) {
          if (this.topPos) {
            this.topPos = (chartHeight - dialogHeight > 0 ? chartHeight - dialogHeight : 0) + "px";
            if (this.isOpen) this.placeholderEl.style("top", this.topPos);
          }
        }

        if (this.topPos && this.getLayoutProfile() === "large" && this.rootEl.classed("vzb-dialog-expand-true")) {
          this.placeholderEl.style("bottom", "auto");
        }

        if (this.rootEl.classed("vzb-landscape")) {}
        // var contentHeight = parseInt(this.rootEl.style('height'));
        // var placeholderHeight = parseInt(this.placeholderEl.style('height'));
        // if (contentHeight < placeholderHeight) {
        //   this.topPos = (-contentHeight + 50) + 'px';
        //   this.rightPos = '';
        //   this.placeholderEl.style('right', this.rightPos);
        //   this.placeholderEl.style('bottom', 'auto');
        // } else {
        //   //this.topPos = '';
        //   this.placeholderEl.style('bottom', '');
        // }

        //this.placeholderEl.style('top', this.topPos);
        this.element.style("max-height", "");
      } else {
        this.rightPos = "";
        this.topPos = "";
        this.placeholderEl.attr("style", "");
        // var totalHeight = this.root.element.offsetHeight;
        // if(this.rootEl.classed('vzb-portrait')) totalHeight = totalHeight - 50;
        // this.element.style('max-height', (totalHeight - 10) + 'px');
      }

      this.dragHandler.classed("vzb-hidden", profile === "small");
      this.pinIcon.classed("vzb-hidden", profile === "small");

      this._setMaxHeight();
    }
  },
  _setMaxHeight: function _setMaxHeight() {
    var totalHeight = this.root.element.offsetHeight;
    if (this.getLayoutProfile() !== "small") {
      if (!this.topPos && this.getLayoutProfile() === "large" && this.rootEl.classed("vzb-dialog-expand-true")) {
        var dialogBottom = parseInt(this.placeholderEl.style("bottom"), 10);
        totalHeight -= dialogBottom;
      } else {
        var topPos = this.topPos ? parseInt(this.topPos, 10) : this.placeholderEl.node().offsetTop;
        totalHeight -= topPos;
      }
    } else {
      totalHeight = this.rootEl.classed("vzb-portrait") ? totalHeight - 50 : totalHeight - 10;
    }

    this.element.style("max-height", totalHeight + "px");

    //set 'max-height' to content for IE11
    var contentHeight = totalHeight - this.titleEl.node().offsetHeight - this.buttonsEl.node().offsetHeight;
    this.contentEl.style("max-height", contentHeight + "px");
  },
  beforeOpen: function beforeOpen() {
    var _this = this;

    this.transitionEvents.forEach(function (event) {
      _this.placeholderEl.on(event, _this.transitionEnd.bind(_this, event));
    });

    this.placeholderEl.classed("notransition", true);

    this.placeholderEl.style("top", ""); // issues: 369 & 442
    this.placeholderEl.style("bottom", ""); // issues: 369 & 442

    if (this.topPos && this.getLayoutProfile() === "large" && this.rootEl.classed("vzb-dialog-expand-true")) {
      var topPos = this.placeholderEl.node().offsetTop;
      this.placeholderEl.style("top", topPos + "px"); // issues: 369 & 442
      this.placeholderEl.style("bottom", "auto"); // issues: 369 & 442
    } else if (this.getLayoutProfile() !== "small") {
      //if(this.rightPos) this.placeholderEl.style('right', this.rightPos);
    }

    this.placeholderEl.node().offsetTop;
    this.placeholderEl.classed("notransition", false);

    if (this.getLayoutProfile() === "small") {
      this.placeholderEl.style("top", ""); // issues: 369 & 442
    } else if (this.rootEl.classed("vzb-landscape")) {// need to recalculate popup position (Safari 8 bug)
      // var contentHeight = parseInt(this.rootEl.style('height'));
      // var placeholderHeight = parseInt(this.placeholderEl.style('height'));
      // if (contentHeight < placeholderHeight) {
      //   this.topPos = (-contentHeight + 50) + 'px';
      //   this.rightPos = '';
      //   this.placeholderEl.style('right', this.rightPos);
      //   this.placeholderEl.style('bottom', 'auto');
      // } else {
      //   this.topPos = '';
      //   this.placeholderEl.style('bottom', '');
      // }
      //this.placeholderEl.style('top', this.topPos);
    }
  },


  /**
   * User has clicked to open this dialog
   */
  open: function open() {
    this.isOpen = true;
    if (this.getLayoutProfile() !== "small") {
      if (this.topPos) {
        this.placeholderEl.style("top", this.topPos);
        this.placeholderEl.style("right", this.rightPos);
      }
    }
  },
  beforeClose: function beforeClose() {
    //issues: 369 & 442
    if (this.rootEl.classed("vzb-portrait") && this.getLayoutProfile() === "small") {
      this.placeholderEl.style("top", "auto"); // issues: 369 & 442
    }
    if (this.getLayoutProfile() === "large" && this.rootEl.classed("vzb-dialog-expand-true")) {
      this.topPos0 = this.topPos ? this.placeholderEl.node().parentNode.offsetHeight - this.placeholderEl.node().offsetHeight + "px" : "";
    }
    this.placeholderEl.classed("notransition", false);
    this.placeholderEl.node().offsetHeight; // trigger a reflow (flushing the css changes)
  },


  /**
   * User has closed this dialog
   */
  close: function close() {
    //issues: 369 & 442
    if (!(this.rootEl.classed("vzb-portrait") && this.getLayoutProfile() === "small")) {
      this.placeholderEl.style("top", ""); // issues: 369 & 442
      this.placeholderEl.style("right", ""); // issues: 369 & 442
    }

    if (this.getLayoutProfile() === "large" && this.rootEl.classed("vzb-dialog-expand-true")) {
      this.placeholderEl.style("top", this.topPos0);
      this.placeholderEl.style("right", "");
    }
    this.isOpen = false;
    this.trigger("close");
  },
  transitionEnd: function transitionEnd(eventName) {
    var _this = this;

    this.transitionEvents.forEach(function (event) {
      _this.placeholderEl.on(event, null);
    });
    if (this.isOpen) {
      this.placeholderEl.classed("notransition", true);
    }
  }
});

function dialogDrag(element, container, xOffset) {
  var posX = void 0,
      posY = void 0,
      divTop = void 0,
      divRight = void 0,
      marginRight = void 0,
      marginLeft = void 0,
      xOffsetRight = void 0,
      xOffsetLeft = void 0,
      eWi = void 0,
      eHe = void 0,
      cWi = void 0,
      cHe = void 0,
      diffX = void 0,
      diffY = void 0;

  return {
    move: function move(x, y) {
      element.style("right", x + "px");
      element.style("top", y + "px");
    },
    dragStart: function dragStart(evt) {
      if (!utils.isTouchDevice()) {
        posX = evt.sourceEvent.clientX;
        posY = evt.sourceEvent.clientY;
      } else {
        var touchCoord = d3.touches(container.node());
        posX = touchCoord[0][0];
        posY = touchCoord[0][1];
      }
      divTop = parseInt(element.style("top")) || 0;
      divRight = parseInt(element.style("right")) || 0;
      marginLeft = parseInt(element.style("margin-left")) || 0;
      marginRight = parseInt(element.style("margin-right")) || 0;
      xOffsetLeft = Math.min(xOffset, marginLeft);
      xOffsetRight = Math.min(xOffset, marginRight);
      eWi = parseInt(element.style("width"), 10) + marginLeft - xOffsetLeft || 0;
      eHe = parseInt(element.style("height"), 10) || 0;
      cWi = parseInt(container.style("width"), 10) - marginRight || 0;
      cHe = parseInt(container.style("height"), 10) || 0;
      diffX = posX + divRight;
      diffY = posY - divTop;
    },
    drag: function drag(evt) {
      if (!utils.isTouchDevice()) {
        posX = evt.sourceEvent.clientX;
        posY = evt.sourceEvent.clientY;
      } else {
        var touchCoord = d3.touches(container.node());
        posX = touchCoord[0][0];
        posY = touchCoord[0][1];
      }
      var aX = -posX + diffX,
          aY = posY - diffY;
      if (aX < -xOffsetRight) aX = -xOffsetRight;
      if (aY < 0) aY = 0;
      if (aX + eWi > cWi) aX = cWi - eWi;
      if (aY + eHe > cHe) aY = cHe - eHe;

      this.move(aX, aY);
    }
  };
}

exports.default = Dialog;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(10);
var createDesc = __webpack_require__(38);
module.exports = __webpack_require__(9) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var has = __webpack_require__(17);
var SRC = __webpack_require__(39)('src');
var $toString = __webpack_require__(196);
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(22).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var fails = __webpack_require__(4);
var defined = __webpack_require__(28);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(59);
var defined = __webpack_require__(28);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(60);
var createDesc = __webpack_require__(38);
var toIObject = __webpack_require__(18);
var toPrimitive = __webpack_require__(27);
var has = __webpack_require__(17);
var IE8_DOM_DEFINE = __webpack_require__(116);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(9) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(17);
var toObject = __webpack_require__(11);
var IE_PROTO = __webpack_require__(83)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
// source https://github.com/encharm/Font-Awesome-SVG-PNG/tree/master/black/svg

var paintbrush = exports.paintbrush = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1615 0q70 0 122.5 46.5t52.5 116.5q0 63-45 151-332 629-465 752-97 91-218 91-126 0-216.5-92.5t-90.5-219.5q0-128 92-212l638-579q59-54 130-54zm-909 1034q39 76 106.5 130t150.5 76l1 71q4 213-129.5 347t-348.5 134q-123 0-218-46.5t-152.5-127.5-86.5-183-29-220q7 5 41 30t62 44.5 59 36.5 46 17q41 0 55-37 25-66 57.5-112.5t69.5-76 88-47.5 103-25.5 125-10.5z"/></svg>';
var search = exports.search = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1216 832q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 52-38 90t-90 38q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>';
var circle = exports.circle = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1664 896q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"/></svg>';
var expand = exports.expand = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M883 1056q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23zm781-864v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45z"/></svg>';
var asterisk = exports.asterisk = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1546 1050q46 26 59.5 77.5t-12.5 97.5l-64 110q-26 46-77.5 59.5t-97.5-12.5l-266-153v307q0 52-38 90t-90 38h-128q-52 0-90-38t-38-90v-307l-266 153q-46 26-97.5 12.5t-77.5-59.5l-64-110q-26-46-12.5-97.5t59.5-77.5l266-154-266-154q-46-26-59.5-77.5t12.5-97.5l64-110q26-46 77.5-59.5t97.5 12.5l266 153v-307q0-52 38-90t90-38h128q52 0 90 38t38 90v307l266-153q46-26 97.5-12.5t77.5 59.5l64 110q26 46 12.5 97.5t-59.5 77.5l-266 154z"/></svg>';
var trails = exports.trails = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M 1381.375 17.1875 C 1375.7825 17.176804 1370.1216 17.316078 1364.4375 17.5625 C 1273.4913 21.505489 1197.0982 57.199956 1135.2188 124.6875 C 1076.5961 188.62338 1047.6964 263.96059 1048.5312 350.65625 L 835.71875 433 C 797.77288 391.67699 749.96961 361.96416 692.3125 343.84375 C 604.96227 316.39162 520.95691 323.70366 440.25 365.8125 C 359.5432 407.92133 305.45225 472.64985 278 560 C 250.54783 647.35004 257.89117 731.38694 300 812.09375 C 342.10886 892.80075 406.83755 946.89147 494.1875 974.34375 C 576.9404 1000.3512 657.38873 994.58645 735.5625 957.09375 L 959.28125 1171.4375 L 972.375 1184.4062 C 966.2931 1198.3454 961.94845 1209.2226 959.34375 1217.0625 C 956.73915 1224.9024 953.7186 1236.224 950.25 1251.0312 L 711.03125 1285.1875 C 669.59175 1209.0324 607.72526 1157.2863 525.40625 1129.9375 C 438.51381 1101.0693 354.34933 1107.021 272.96875 1147.8125 C 191.58796 1188.6039 136.49335 1252.4513 107.625 1339.3438 C 78.756758 1426.2362 84.708528 1510.3694 125.5 1591.75 C 166.29138 1673.1307 230.1387 1728.2567 317.03125 1757.125 C 403.92369 1785.9933 488.05682 1780.0415 569.4375 1739.25 C 650.81799 1698.4587 705.94425 1634.6111 734.8125 1547.7188 C 737.41718 1539.8788 740.43763 1528.5573 743.90625 1513.75 L 983.125 1479.5938 C 1024.5644 1555.7487 1086.4309 1607.4948 1168.75 1634.8438 C 1255.6425 1663.7119 1339.8069 1657.7603 1421.1875 1616.9688 C 1502.5682 1576.1772 1557.6631 1512.3299 1586.5312 1425.4375 C 1615.3996 1338.5451 1609.4477 1254.4119 1568.6562 1173.0312 C 1527.8647 1091.6506 1464.0174 1036.5244 1377.125 1007.6562 C 1294.9259 980.34721 1214.5066 984.74084 1135.8438 1020.8125 L 1120.2812 1005.9062 L 898.0625 785.96875 C 902.79653 774.40321 906.33847 765.03422 908.5 758.15625 C 920.42249 720.22 925.7916 682.90194 924.59375 646.21875 L 1130.9688 566.34375 C 1141.2015 577.59424 1149.3796 586.0106 1155.4688 591.59375 C 1222.9566 653.47326 1302.1474 682.44278 1393.0938 678.5 C 1484.04 674.55731 1560.4642 638.83151 1622.3438 571.34375 C 1684.2232 503.85591 1713.1929 424.6337 1709.25 333.6875 C 1705.3072 242.74139 1669.5816 166.34819 1602.0938 104.46875 C 1538.8238 46.456824 1465.2625 17.347946 1381.375 17.1875 z "/></svg>';
var lock = exports.lock = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z"/></svg>';
var unlock = exports.unlock = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1376 768q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-320q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45q0-106-75-181t-181-75-181 75-75 181v320h736z"/></svg>';
var unexpand = exports.unexpand = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M896 960v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45zm755-672q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23z"/></svg>';
var axes = exports.axes = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500"><path d="M430.25,379.655l-75.982-43.869v59.771H120.73V151.966h59.774l-43.869-75.983L92.767,0L48.898,75.983L5.029,151.966h59.775 v271.557c0,15.443,12.52,27.965,27.963,27.965h261.5v59.773l75.982-43.869l75.982-43.867L430.25,379.655z"/></svg>';
var gear = exports.gear = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1152 896q0-106-75-181t-181-75-181 75-75 181 75 181 181 75 181-75 75-181zm512-109v222q0 12-8 23t-20 13l-185 28q-19 54-39 91 35 50 107 138 10 12 10 25t-9 23q-27 37-99 108t-94 71q-12 0-26-9l-138-108q-44 23-91 38-16 136-29 186-7 28-36 28h-222q-14 0-24.5-8.5t-11.5-21.5l-28-184q-49-16-90-37l-141 107q-10 9-25 9-14 0-25-11-126-114-165-168-7-10-7-23 0-12 8-23 15-21 51-66.5t54-70.5q-27-50-41-99l-183-27q-13-2-21-12.5t-8-23.5v-222q0-12 8-23t19-13l186-28q14-46 39-92-40-57-107-138-10-12-10-24 0-10 9-23 26-36 98.5-107.5t94.5-71.5q13 0 26 10l138 107q44-23 91-38 16-136 29-186 7-28 36-28h222q14 0 24.5 8.5t11.5 21.5l28 184q49 16 90 37l142-107q9-9 24-9 13 0 25 10 129 119 165 170 7 8 7 22 0 12-8 23-15 21-51 66.5t-54 70.5q26 50 41 98l183 28q13 2 21 12.5t8 23.5z"/></svg>';
var stack = exports.stack = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 54.849 54.849"><g><path d="M54.497,39.614l-10.363-4.49l-14.917,5.968c-0.537,0.214-1.165,0.319-1.793,0.319c-0.627,0-1.254-0.104-1.79-0.318     l-14.921-5.968L0.351,39.614c-0.472,0.203-0.467,0.524,0.01,0.716L26.56,50.81c0.477,0.191,1.251,0.191,1.729,0L54.488,40.33     C54.964,40.139,54.969,39.817,54.497,39.614z"/><path d="M54.497,27.512l-10.364-4.491l-14.916,5.966c-0.536,0.215-1.165,0.321-1.792,0.321c-0.628,0-1.256-0.106-1.793-0.321     l-14.918-5.966L0.351,27.512c-0.472,0.203-0.467,0.523,0.01,0.716L26.56,38.706c0.477,0.19,1.251,0.19,1.729,0l26.199-10.479     C54.964,28.036,54.969,27.716,54.497,27.512z"/><path d="M0.361,16.125l13.662,5.465l12.537,5.015c0.477,0.191,1.251,0.191,1.729,0l12.541-5.016l13.658-5.463     c0.477-0.191,0.48-0.511,0.01-0.716L28.277,4.048c-0.471-0.204-1.236-0.204-1.708,0L0.351,15.41     C-0.121,15.614-0.116,15.935,0.361,16.125z"/></g></svg>';
var drag = exports.drag = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M896 384q-53 0-90.5 37.5t-37.5 90.5v128h-32v-93q0-48-32-81.5t-80-33.5q-46 0-79 33t-33 79v429l-32-30v-172q0-48-32-81.5t-80-33.5q-46 0-79 33t-33 79v224q0 47 35 82l310 296q39 39 39 102 0 26 19 45t45 19h640q26 0 45-19t19-45v-25q0-41 10-77l108-436q10-36 10-77v-246q0-48-32-81.5t-80-33.5q-46 0-79 33t-33 79v32h-32v-125q0-40-25-72.5t-64-40.5q-14-2-23-2-46 0-79 33t-33 79v128h-32v-122q0-51-32.5-89.5t-82.5-43.5q-5-1-13-1zm0-128q84 0 149 50 57-34 123-34 59 0 111 27t86 76q27-7 59-7 100 0 170 71.5t70 171.5v246q0 51-13 108l-109 436q-6 24-6 71 0 80-56 136t-136 56h-640q-84 0-138-58.5t-54-142.5l-308-296q-76-73-76-175v-224q0-99 70.5-169.5t169.5-70.5q11 0 16 1 6-95 75.5-160t164.5-65q52 0 98 21 72-69 174-69z"/></svg>';
var warn = exports.warn = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512.209 512.209"><path d="M507.345,439.683L288.084,37.688c-3.237-5.899-7.71-10.564-13.429-13.988c-5.705-3.427-11.893-5.142-18.554-5.142   s-12.85,1.718-18.558,5.142c-5.708,3.424-10.184,8.089-13.418,13.988L4.859,439.683c-6.663,11.998-6.473,23.989,0.57,35.98   c3.239,5.517,7.664,9.897,13.278,13.128c5.618,3.237,11.66,4.859,18.132,4.859h438.529c6.479,0,12.519-1.622,18.134-4.859   c5.62-3.23,10.038-7.611,13.278-13.128C513.823,463.665,514.015,451.681,507.345,439.683z M292.655,411.132   c0,2.662-0.91,4.897-2.71,6.704c-1.807,1.811-3.949,2.71-6.427,2.71h-54.816c-2.474,0-4.616-0.899-6.423-2.71   c-1.809-1.807-2.713-4.042-2.713-6.704v-54.248c0-2.662,0.905-4.897,2.713-6.704c1.807-1.811,3.946-2.71,6.423-2.71h54.812   c2.479,0,4.62,0.899,6.428,2.71c1.803,1.807,2.71,4.042,2.71,6.704v54.248H292.655z M292.088,304.357   c-0.198,1.902-1.198,3.47-3.001,4.709c-1.811,1.238-4.046,1.854-6.711,1.854h-52.82c-2.663,0-4.947-0.62-6.849-1.854   c-1.908-1.243-2.858-2.807-2.858-4.716l-4.853-130.47c0-2.667,0.953-4.665,2.856-5.996c2.474-2.093,4.758-3.14,6.854-3.14h62.809   c2.098,0,4.38,1.043,6.854,3.14c1.902,1.331,2.851,3.14,2.851,5.424L292.088,304.357z"/></svg>';
var pin = exports.pin = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M800 864v-448q0-14-9-23t-23-9-23 9-9 23v448q0 14 9 23t23 9 23-9 9-23zm672 352q0 26-19 45t-45 19h-429l-51 483q-2 12-10.5 20.5t-20.5 8.5h-1q-27 0-32-27l-76-485h-404q-26 0-45-19t-19-45q0-123 78.5-221.5t177.5-98.5v-512q-52 0-90-38t-38-90 38-90 90-38h640q52 0 90 38t38 90-38 90-90 38v512q99 0 177.5 98.5t78.5 221.5z"/></svg>';
var question = exports.question = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="17 17 483 483"> <circle stroke-width="40" cx="258.57" cy="258.57" r="220"/> <path d="M299.756,413.021v-61.78c0-3.003-0.966-5.472-2.896-7.401s-4.398-2.896-7.401-2.896h-61.78 c-3.003,0-5.47,0.965-7.4,2.896c-1.932,1.931-2.896,4.398-2.896,7.401v61.78c0,3.002,0.965,5.47,2.896,7.399 c1.931,1.931,4.396,2.896,7.4,2.896h61.779c3.003,0,5.472-0.967,7.401-2.896S299.756,416.021,299.756,413.021z"/> <path d="M382.128,196.789c0-18.877-5.952-36.36-17.856-52.449c-11.905-16.088-26.762-28.53-44.566-37.325 c-17.804-8.795-36.037-13.192-54.7-13.192c-52.127,0-91.919,22.845-119.377,68.537c-3.218,5.148-2.359,9.653,2.574,13.514 l42.474,32.177c1.502,1.287,3.54,1.931,6.114,1.931c3.433,0,6.115-1.287,8.044-3.861c11.369-14.587,20.594-24.454,27.672-29.603 c7.294-5.148,16.519-7.723,27.673-7.723c10.297,0,19.468,2.789,27.513,8.366c8.044,5.578,12.065,11.906,12.065,18.985 c0,8.151-2.146,14.694-6.437,19.628c-4.29,4.934-11.583,9.76-21.881,14.479c-13.514,6.006-25.901,15.284-37.164,27.834 c-11.263,12.549-16.894,26.01-16.894,40.382v11.583c0,3.004,0.965,5.472,2.896,7.401c1.931,1.93,4.396,2.896,7.4,2.896h61.779 c3.003,0,5.471-0.965,7.401-2.896c1.93-1.931,2.896-4.397,2.896-7.401c0-4.075,2.306-9.385,6.917-15.928 c4.612-6.542,10.458-11.852,17.537-15.927c6.863-3.861,12.119-6.918,15.768-9.171c3.646-2.252,8.579-6.008,14.802-11.263 c6.22-5.255,10.993-10.402,14.317-15.443c3.325-5.042,6.328-11.53,9.01-19.467C380.788,214.916,382.128,206.228,382.128,196.789z"/> </svg>';
var close = exports.close = '<svg class="vzb-icon vzb-icon-pin" viewBox="-150 -250 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1149 414q0 26 -19 45l-181 181l181 181q19 19 19 45q0 27 -19 46l-90 90q-19 19 -46 19q-26 0 -45 -19l-181 -181l-181 181q-19 19 -45 19q-27 0 -46 -19l-90 -90q-19 -19 -19 -46q0 -26 19 -45l181 -181l-181 -181q-19 -19 -19 -45q0 -27 19 -46l90 -90q19 -19 46 -19 q26 0 45 19l181 181l181 -181q19 -19 45 -19q27 0 46 19l90 90q19 19 19 46z"/></svg>';
var presentation = exports.presentation = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path id="flip-chart-1" d="M334.549,393.834l58.607,68.666h-45.096l-58.709-68.666H334.549z M240.333,462.5h34.333v-68.666h-34.333 V462.5z M360.5,153.5h-34.334v137.334H360.5V153.5z M121.566,462.5h45.113l58.709-68.666h-45.197L121.566,462.5z M206,273.666 h-34.333v17.168H206V273.666z M257.5,239.333h-34.333v51.5H257.5V239.333z M309,205h-34.334v85.834H309V205z M446.334,102h-17.168 v257.5H85.833V102H68.667V50.5h377.667V102z M394.834,102H120.167v223.166h274.667V102z"/></svg>';
var about = exports.about = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><path d="M1088 1256v240q0 16-12 28t-28 12h-240q-16 0-28-12t-12-28v-240q0-16 12-28t28-12h240q16 0 28 12t12 28zm316-600q0 54-15.5 101t-35 76.5-55 59.5-57.5 43.5-61 35.5q-41 23-68.5 65t-27.5 67q0 17-12 32.5t-28 15.5h-240q-15 0-25.5-18.5t-10.5-37.5v-45q0-83 65-156.5t143-108.5q59-27 84-56t25-76q0-42-46.5-74t-107.5-32q-65 0-108 29-35 25-107 115-13 16-31 16-12 0-25-8l-164-125q-13-10-15.5-25t5.5-28q160-266 464-266 80 0 161 31t146 83 106 127.5 41 158.5z"/></svg>';
var cursorArrow = exports.cursorArrow = '<svg class="vzb-icon" viewBox="-200 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1389 1043q31 30 14 69-17 40-59 40h-382l201 476q10 25 0 49t-34 35l-177 75q-25 10-49 0t-35-34l-191-452-312 312q-19 19-45 19-12 0-24-5-40-17-40-59v-1504q0-42 40-59 12-5 24-5 27 0 45 19z"/></svg>';
var cursorPlus = exports.cursorPlus = '<svg class="vzb-icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1088 800v64q0 13-9.5 22.5t-22.5 9.5h-224v224q0 13-9.5 22.5t-22.5 9.5h-64q-13 0-22.5-9.5t-9.5-22.5v-224h-224q-13 0-22.5-9.5t-9.5-22.5v-64q0-13 9.5-22.5t22.5-9.5h224v-224q0-13 9.5-22.5t22.5-9.5h64q13 0 22.5 9.5t9.5 22.5v224h224q13 0 22.5 9.5t9.5 22.5zm128 32q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 53-37.5 90.5t-90.5 37.5q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>';
var cursorMinus = exports.cursorMinus = '<svg class="vzb-icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1088 800v64q0 13-9.5 22.5t-22.5 9.5h-576q-13 0-22.5-9.5t-9.5-22.5v-64q0-13 9.5-22.5t22.5-9.5h576q13 0 22.5 9.5t9.5 22.5zm128 32q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 53-37.5 90.5t-90.5 37.5q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg>';
var hundredPercent = exports.hundredPercent = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg"><g transform="translate(18 11)"><text transform="scale(0.9 1)" x="0" y="0">100</text><text transform="scale(0.6 1)" class="percent" x="0" y="0">%</text></g></svg>';
var percent = exports.percent = '<svg class="vzb-icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1408 1280q0-52-38-90t-90-38-90 38-38 90 38 90 90 38 90-38 38-90zm-768-768q0-52-38-90t-90-38-90 38-38 90 38 90 90 38 90-38 38-90zm1024 768q0 159-112.5 271.5t-271.5 112.5-271.5-112.5-112.5-271.5 112.5-271.5 271.5-112.5 271.5 112.5 112.5 271.5zm-96-1088q0 20-13 38l-1056 1408q-19 26-51 26h-160q-26 0-45-19t-19-45q0-20 13-38l1056-1408q19-26 51-26h160q26 0 45 19t19 45zm-672 320q0 159-112.5 271.5t-271.5 112.5-271.5-112.5-112.5-271.5 112.5-271.5 271.5-112.5 271.5 112.5 112.5 271.5z"/></svg>';
var side = exports.side = '<svg class="vzb-icon" viewBox="-120 -1540 1792 1792" xmlns="http://www.w3.org/2000/svg"><path transform="rotate(-90) scale(1.2)" d="M1024 448q0 -26 -19 -45l-448 -448q-19 -19 -45 -19t-45 19l-448 448q-19 19 -19 45t19 45t45 19h896q26 0 45 -19t19 -45zM1024 832q0 -26 -19 -45t-45 -19h-896q-26 0 -45 19t-19 45t19 45l448 448q19 19 45 19t45 -19l448 -448q19 -19 19 -45z"/></svg>';
var cursorHand = exports.cursorHand = '<svg class="vzb-icon" viewBox="0 -1540 1792 1792" xmlns="http://www.w3.org/2000/svg"><path transform="scale(1,-1)" d="M880 1408q-46 0 -79 -33t-33 -79v-656h-32v528q0 46 -33 79t-79 33t-79 -33t-33 -79v-528v-256l-154 205q-38 51 -102 51q-53 0 -90.5 -37.5t-37.5 -90.5q0 -43 26 -77l384 -512q38 -51 102 -51h688q34 0 61 22t34 56l76 405q5 32 5 59v498q0 46 -33 79t-79 33t-79 -33t-33 -79v-272h-32v528q0 46 -33 79t-79 33t-79 -33t-33 -79v-528h-32v656q0 46 -33 79t-79 33zM880 1536q68 0 125.5 -35.5t88.5 -96.5q19 4 42 4q99 0 169.5 -70.5t70.5 -169.5v-17q105 6 180.5 -64t75.5 -175v-498q0 -40 -8 -83l-76 -404q-14 -79 -76.5 -131t-143.5 -52h-688q-60 0 -114.5 27.5t-90.5 74.5l-384 512q-51 68 -51 154q0 106 75 181t181 75q78 0 128 -34v434q0 99 70.5 169.5t169.5 70.5q23 0 42 -4q31 61 88.5 96.5t125.5 35.5z"/></svg>';
var angleDoubleLeft = exports.angleDoubleLeft = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M223.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L319.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L393.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34zm-192 34l136 136c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9L127.9 256l96.4-96.4c9.4-9.4 9.4-24.6 0-33.9L201.7 103c-9.4-9.4-24.6-9.4-33.9 0l-136 136c-9.5 9.4-9.5 24.6-.1 34z"/></svg>';
var forecast = exports.forecast = '<svg class="vzb-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1792 1792"><g><path d="M560.7,775.2c-8.5,8.4-17.2,17.1-26,25.8C418,917.8,327.5,1039.9,231.9,1209.3c-72.9,129.4-131,262.4-172.5,395.4l171.8,53.7c37.8-120.9,90.8-242.3,157.5-360.7c43.8-77.7,85.9-143.7,128.7-201.7c43.7-59.3,91-114.2,144.6-167.7c11.3-11.3,22.2-22.2,33-32.8L560.7,775.2z"/><path d="M973.7,461.9c-21.4,12.1-43.4,24.8-66.1,38.5c-56.1,33.7-103.4,65.5-145.8,97.2l114.5,139.2c36.3-26.8,76.5-53.6,124-82.1c23.6-14.2,46.3-27.3,68.4-39.7L973.7,461.9z"/><path d="M1448.9,252.3c-37.1,13.4-75.2,27.2-111.3,40.9c-37.6,14.2-76.7,29.6-118,47.2l71.7,165.1c36.5-15.5,72.9-29.8,110.1-44c33.7-12.8,69.4-25.8,104.4-38.4L1448.9,252.3z"/></g></svg>';

/***/ }),
/* 22 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(13);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 25 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(4);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(6);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 28 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(0);
var core = __webpack_require__(22);
var fails = __webpack_require__(4);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(23);
var IObject = __webpack_require__(59);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var asc = __webpack_require__(99);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var initializing = false;
var fnTest = /xyz/.test(function () {
  var xyz = void 0;
}) ? /\b_super\b/ : /.*/;

function extend(name, extensions) {

  //in case there are two args
  extensions = arguments.length === 1 ? name : extensions;
  var _super = this.prototype;
  initializing = true;
  var prototype = new this();
  initializing = false;

  (0, _utils.forEach)(extensions, function (method, name) {
    if (typeof extensions[name] === "function" && typeof _super[name] === "function" && fnTest.test(extensions[name])) {
      prototype[name] = function (name, fn) {
        return function () {
          var tmp = this._super;
          this._super = _super[name];
          var ret = fn.apply(this, arguments);
          this._super = tmp;
          return ret;
        };
      }(name, extensions[name]);
    } else {
      prototype[name] = method;
    }
  });

  function Class() {
    if (this.trackInstances) Class.instances.push(this);
    if (!initializing && this.init) {
      this.init.apply(this, arguments);
    }
  }

  // Populate our constructed prototype object
  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.extend = extend;

  Class._collection = {};
  Class.instances = [];
  Class.register = function (name, code) {
    if (typeof this._collection[name] !== "undefined") {
      (0, _utils.warn)('"' + name + '" is already registered. Overwriting...');
    }
    this._collection[name] = code;
  };

  Class.unregister = function (name) {
    this._collection[name] = void 0;
  };

  Class.getCollection = function () {
    return this._collection;
  };

  //define a method or field in this prototype
  Class.define = function (name, value) {
    this.prototype[name] = value;
  };

  //get an item of the collection from this class
  Class.get = function (name, silent) {
    if (this._collection.hasOwnProperty(name)) {
      return this._collection[name];
    }
    if (!silent) {
      (0, _utils.warn)('"' + name + '" was not found.');
    }
    return false;
  };
  //register extension by name
  if (arguments.length > 1 && this.register) {
    this.register(name, Class);
  }
  return Class;
}

var Class = function Class() {};
Class.extend = extend;

exports.default = Class;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _dataconnected = __webpack_require__(57);

var _dataconnected2 = _interopRequireDefault(_dataconnected);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * HOOK MODEL
 */

var Hook = _dataconnected2.default.extend({

  //some hooks can be important. like axis x and y
  //that means, if X or Y doesn't have data at some point, we can't show markers
  _important: false,

  objectLeafs: ["autoconfig"],
  dataConnectedChildren: ["use", "which"],

  getClassDefaults: function getClassDefaults() {
    var defaults = {
      syncModels: [],
      data: "data",
      which: null
    };
    return utils.deepExtend(this._super(), defaults);
  },
  buildScale: function buildScale() {
    //overloaded by specific hook models, like axis and color
  },


  /**
   * After complete model tree is created, this allows models to listen to eachother.
   */
  setInterModelListeners: function setInterModelListeners() {
    var _this2 = this;

    var spaceRefs = this._parent.getSpace(this);

    //check what we want to hook this model to
    utils.forEach(spaceRefs, function (reference) {
      //hook with the closest prefix to this model
      _this2._space[reference] = _this2.getClosestModel(reference);
      //if hooks change, this should load again
      _this2._space[reference].on("dataConnectedChange", _this2.handleDataConnectedChange.bind(_this2));
      // tell the connected model to set a link with me
      _this2._space[reference].setLinkWith(_this2);
    });
    this.getClosestModel("locale").on("dataConnectedChange", this.handleDataConnectedChange.bind(this));
  },
  onSuccessfullLoad: function onSuccessfullLoad() {
    this.trigger("onSuccessfullLoad");
    this.validate();
    this.buildScale();
    this._super();
  },
  setWhich: function setWhich(newValue) {

    var obj = { which: newValue.concept };

    if (newValue.dataSource) obj.data = newValue.dataSource;
    var newDataSource = this.dataSource = this.getClosestModel(obj.data || this.data);
    var conceptProps = newDataSource.getConceptprops(newValue.concept);

    if (newValue.use) obj.use = newValue.use;
    if (conceptProps && conceptProps.scales) obj.scaleType = conceptProps.scales[0];

    if (this.getType() === "axis" || this.getType() === "size") {
      obj.domainMin = null;
      obj.domainMax = null;
      obj.zoomedMin = null;
      obj.zoomedMax = null;
    }

    //FIXME: this will set spaceRef ofa hook when there are multiple dimensions to chose from
    //this has a limitation because hook can only be 1-dimensional here (but now it can point to any of the dimensions)
    //when we introduce hook spaces this should be replaced by setting space of a hook based on newValue
    if (newValue.use === "property" && newValue.key && newValue.key.length === 1) {
      obj.spaceRef = utils.find(this._space, function (entityMdl) {
        return entityMdl.dim === newValue.key[0].concept;
      })._name;
    }
    if (newValue.use === "constant" || newValue.use === "indicator") {
      obj.spaceRef = null;
    }

    this.set(obj, undefined, undefined, undefined, this.setWhich);

    //support external page indicator frequency tracking
    this._root.trigger("change_hook_which", { "which": obj.which, "hook": this._name });

    this._updateSyncModels();
  },
  setScaleType: function setScaleType(newValue) {
    this.buildScale(newValue);
  },
  preloadData: function preloadData() {
    this.dataSource = this.getClosestModel(this.data);
    return this._super();
  },
  afterPreload: function afterPreload() {
    this.autoconfigureModel();
    if (!this.spaceRef) this.spaceRef = this.updateSpaceReference();
    this._updateSyncModels();
  },


  /**
  * Tell synced models (list of which defined in confg)
  * to update depending on the state of this model.
  * Example: switch colors to a different entity set,
  * stacking by colors in mountain chart should change accordingly
  */
  _updateSyncModels: function _updateSyncModels() {
    var _this3 = this;

    var _this = this;
    this.syncModels.forEach(function (modelName) {
      var model = _this.getClosestModel(modelName);
      model._receiveSyncModelUpdate(_this3);
    });
  },


  /**
  * Quietly sets a bunch of properties of this model to be same as
  * the ones from the model that initiated the sync
  */
  _receiveSyncModelUpdate: function _receiveSyncModelUpdate(sourceMdl) {
    this.set({ which: sourceMdl.which, data: sourceMdl.data, spaceRef: sourceMdl.spaceRef }, false, false);
  },
  autoconfigureModel: function autoconfigureModel(autoconfigResult) {

    if (!this.which && this.autoconfig) {
      if (!autoconfigResult) autoconfigResult = this._parent.getAvailableConcept(this.autoconfig);

      if (autoconfigResult) {
        var concept = autoconfigResult.value;
        var obj = {
          //dataSource: autoconfigResult.dataSource,
          which: concept.concept,
          use: (autoconfigResult.key.size || autoconfigResult.key.length) > 1 || this.autoconfig.type === "time" ? "indicator" : "property",
          scaleType: concept.scales[0] || "linear"
        };
        this.set(obj);
      } else {
        var _obj = {
          which: "_default",
          use: "constant",
          scaleType: "ordinal"
        };
        this.set(_obj);
      }

      utils.printAutoconfigResult(this);
    }
  },
  updateSpaceReference: function updateSpaceReference() {
    if (this.use !== "property") return null;
    var newSpaceRef = "entities" + this._name.replace(this._type, "");

    return this._space[newSpaceRef] ? newSpaceRef : this._parent.getSpace()[0]._name;
  },


  /**
   * Hooks loads data, models ask children to load data
   * Basically, this method:
   * loads is theres something to be loaded:
   * does not load if there's nothing to be loaded
   * @param {Object} options (includes splashScreen)
   * @returns defer
   */
  loadData: function loadData() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};


    // then start loading data
    this.setReady(false);

    if (!this.which || this.use === "constant") return Promise.resolve();

    this.trigger("hook_change");

    var query = this.getQuery(opts.splashScreen);

    if (query === true) return Promise.resolve();

    //useful to check if in the middle of a load call
    this._loadCall = true;

    utils.timeStamp("Vizabi Model: Loading Data: " + this._id);

    var parsers = this._getAllParsers();

    var dataPromise = this.dataSource.load(query, parsers);

    dataPromise.then(this.afterLoad.bind(this), function (err) {
      return utils.warn("Problem with query: ", err, JSON.stringify(query));
    });

    return dataPromise;
  },
  handleDataConnectedChange: function handleDataConnectedChange(evt) {
    var _this4 = this;

    //defer is necessary because other events might be queued.
    //load right after such events
    utils.defer(function () {
      _this4.startLoading().catch(utils.warn);
    });
  },
  _isLoading: function _isLoading() {
    return !this._loadedOnce || this._loadCall;
  },


  /**
   * executes after data has actually been loaded
   */
  afterLoad: function afterLoad(dataId) {
    this._dataId = dataId;

    utils.timeStamp("Vizabi Model: Data loaded: " + this._id);
  },


  /**
   * gets query that this model/hook needs to get data
   * @returns {Array} query
   */
  getQuery: function getQuery(splashScreen) {
    var filters = void 0;

    //error if there's nothing to hook to
    if (Object.keys(this._space).length < 1) {
      utils.error("Error:", this._id, "can't find the space");
      return true;
    }

    var prop = this.use === "property" || this.use === "constant";
    var exceptions = prop ? { exceptType: "time" } : {};

    // select
    // we remove this.which from values if it duplicates a dimension
    var allDimensions = utils.unique(this._getAllDimensions(exceptions));
    var dimensions = this.use === "property" && allDimensions.length > 1 ? [allDimensions.indexOf(this.which) !== -1 ? this.which : this.getEntity().dim] : allDimensions;

    if (!dimensions || !dimensions.length) {
      utils.warn("getQuery() produced no query because no keys are available");
      return true;
    }

    var select = {
      key: dimensions,
      value: dimensions.indexOf(this.which) != -1 || this.use === "constant" ? [] : [this.which]
    };

    // animatable
    var animatable = this._getFirstDimension({ type: "time" });
    // from
    var from = prop ? "entities" : "datapoints";

    // where
    filters = this._getAllFilters(exceptions, { splash: splashScreen, entityTypeRequest: prop });
    if (prop && allDimensions.length > 1) {
      var f = {};
      if (filters[dimensions]) f[dimensions] = filters[dimensions];
      filters = f;
    }

    // make root $and explicit
    var explicitAndFilters = {};
    if (Object.keys(filters).length > 0) {
      explicitAndFilters["$and"] = [];
      for (var filterKey in filters) {
        var filter = {};
        filter[filterKey] = filters[filterKey];
        explicitAndFilters["$and"].push(filter);
      }
    }

    // join
    var join = this._getAllJoins(exceptions, { splash: splashScreen, entityTypeRequest: prop });
    if (prop && allDimensions.length > 1) {
      var j = {};
      if (join["$" + dimensions]) j["$" + dimensions] = join["$" + dimensions];
      join = j;
    }

    // grouping
    var grouping = this._parent._getGrouping();
    if (grouping) {
      grouping = utils.clone(grouping, dimensions);
      if (utils.isEmpty(grouping)) grouping = false;
    }

    //return query
    var query = {
      "language": this.getClosestModel("locale").id,
      "from": from,
      "animatable": animatable,
      "gapfill": !this.disable_gapfill,
      "select": select,
      "where": explicitAndFilters,
      "join": join,
      "order_by": prop ? ["rank"] : [this._space.time.dim]
    };
    if (grouping) query["grouping"] = grouping;
    return query;
  },


  /**
   * gets all hook dimensions
   * @param {Object} opts options with exceptType or onlyType
   * @returns {Array} all unique dimensions
   */
  _getAllDimensions: function _getAllDimensions(opts) {

    // hook dimensions = marker dimensions. Later, hooks might have extra dimensions : )
    return this._parent._getAllDimensions(opts);
  },


  /**
   * gets first dimension that matches type
   * @param {Object} options
   * @returns {Array} all unique dimensions
   */
  _getFirstDimension: function _getFirstDimension(opts) {

    // hook dimensions = marker dimensions. Later, hooks might have extra dimensions : )
    return this._parent._getFirstDimension(opts);
  },


  /**
   * gets all hook filters
   * @param {Boolean} filterOpts get filters for first screen only
   * @returns {Object} filters
   */
  _getAllFilters: function _getAllFilters(opts, filterOpts) {
    opts = opts || {};
    var filters = {};
    var _this = this;
    utils.forEach(this._space, function (h) {
      if (opts.exceptType && h.getType() === opts.exceptType) {
        return true;
      }
      if (opts.onlyType && h.getType() !== opts.onlyType) {
        return true;
      }
      // if query's dimensions are the same as the hook's, no join
      if (utils.arrayEquals(_this._getAllDimensions(opts), [h.getDimension()])) {
        filters = utils.extend(filters, h.getFilter(filterOpts));
      } else {
        var joinFilter = h.getFilter(filterOpts);
        if (joinFilter != null && !utils.isEmpty(joinFilter)) {
          var filter = {};
          filter[h.getDimension()] = "$" + h.getDimension();
          filters = utils.extend(filters, filter);
        }
      }
    });
    return filters;
  },
  _getAllJoins: function _getAllJoins(opts, filterOpts) {
    var joins = {};
    var _this = this;
    utils.forEach(this._space, function (h) {
      if (opts.exceptType && h.getType() === opts.exceptType) {
        return true;
      }
      if (opts.onlyType && h.getType() !== opts.onlyType) {
        return true;
      }
      if (utils.arrayEquals(_this._getAllDimensions(opts), [h.getDimension()])) {
        return true;
      }

      var filter = h.getFilter(filterOpts);
      if (filter != null && !utils.isEmpty(filter)) {
        joins["$" + h.getDimension()] = {
          key: h.getDimension(),
          where: h.getFilter(filterOpts)
        };
      }
    });
    return joins;
  },


  /**
   * gets all hook filters
   * @returns {Object} filters
   */
  _getAllParsers: function _getAllParsers() {
    return Object.values(this._space).concat(this).reduce(function (result, model) {
      var parser = model.getParser();
      var column = model.getDimensionOrWhich();

      parser && column && !(column in result) && (result[column] = parser);

      return result;
    }, {});
  },


  /**
   * Gets tick values for this hook
   * @returns {Function} That returns the value for this tick
   */
  getTickFormatter: function getTickFormatter() {

    var _this = this;
    var SHARE = "share";
    var PERCENT = "percent";

    // percentageMode works like rounded if set to SHARE, but multiplies by 100 and suffixes with "%"
    // percentageMode works like rounded if set to PERCENT, but suffixes with "%"

    return function (x, index, group, removePrefix, percentageMode) {

      percentageMode = _this.getConceptprops().format;
      if (percentageMode === SHARE) x *= 100;

      // Format time values
      // Assumption: a hook has always time in its space
      if (utils.isDate(x)) return _this._space.time.formatDate(x);

      // Dealing with values that are supposed to be time
      if (_this.scaleType === "time" && !utils.isDate(x)) {
        return _this._space.time.formatDate(new Date(x));
      }

      // Strings, null, NaN and undefined are bypassing any formatter
      if (utils.isString(x) || !x && x !== 0) return x;

      if (Math.abs(x) < 0.00000000000001) return "0";

      var format = "r"; //rounded format. use "f" for fixed
      var prec = 3; //round to so many significant digits

      var prefix = "";
      if (removePrefix) return d3.format("." + prec + format)(x);

      //---------------------
      // BEAUTIFIERS GO HOME!
      // don't break formatting please
      //---------------------
      // the tiny constant compensates epsilon-error when doing logsrithms
      /* eslint-disable */
      switch (Math.floor(Math.log(Math.abs(x)) / Math.LN10 + 0.00000000000001)) {
        case -13:
          x *= 1000000000000;prefix = "p";break; //0.1p
        case -10:
          x *= 1000000000;prefix = "n";break; //0.1n
        case -7:
          x *= 1000000;prefix = "µ";break; //0.1µ
        case -6:
          x *= 1000000;prefix = "µ";break; //1µ
        case -5:
          x *= 1000000;prefix = "µ";break; //10µ
        case -4:
          break; //0.0001
        case -3:
          break; //0.001
        case -2:
          break; //0.01
        case -1:
          break; //0.1
        case 0:
          break; //1
        case 1:
          break; //10
        case 2:
          break; //100
        case 3:
          break; //1000
        case 4:
          x /= 1000;prefix = "k";break; //10k
        case 5:
          x /= 1000;prefix = "k";break; //100k
        case 6:
          x /= 1000000;prefix = "M";break; //1M
        case 7:
          x /= 1000000;prefix = "M";break; //10M
        case 8:
          x /= 1000000;prefix = "M";break; //100M
        case 9:
          x /= 1000000000;prefix = "B";break; //1B
        case 10:
          x /= 1000000000;prefix = "B";break; //10B
        case 11:
          x /= 1000000000;prefix = "B";break; //100B
        case 12:
          x /= 1000000000000;prefix = "TR";break; //1TR
        case 13:
          x /= 1000000000000;prefix = "TR";break; //10TR
        case 14:
          x /= 1000000000000;prefix = "TR";break; //100TR
        //use the D3 SI formatting for the extreme cases
        default:
          return d3.format("." + prec + "s")(x).replace("G", "B");
      }
      /* eslint-enable */

      var formatted = d3.format("." + prec + format)(x);
      //remove trailing zeros if dot exists to avoid numbers like 1.0M, 3.0B, 1.500, 0.9700, 0.0
      if (formatted.indexOf(".") > -1) formatted = formatted.replace(/0+$/, "").replace(/\.$/, "");

      // use manual formatting for the cases above
      return formatted + prefix + (percentageMode === PERCENT || percentageMode === SHARE ? "%" : "");
    };
  },


  /**
   * Gets the d3 scale for this hook. if no scale then builds it
   * @returns {Array} domain
   */
  getScale: function getScale() {
    if (this.scale == null) console.warn("scale is null");
    return this.scale;
  },


  /**
   * Gets unique values in a column
   * @param {String|Array} attr parameter
   * @returns {Array} unique values
   */
  getUnique: function getUnique(attr) {
    if (!this.isHook()) return;
    if (!attr) attr = this._getFirstDimension({ type: "time" });
    return this.dataSource.getData(this._dataId, "unique", attr);
  },
  getData: function getData() {
    return this.dataSource.getData(this._dataId);
  },


  /**
   * gets dataset without null or nan values with respect to this hook's which
   * @returns {Object} filtered items object
   */
  getValidItems: function getValidItems() {
    return this.dataSource.getData(this._dataId, "valid", this.which);
  },


  /**
   * gets nested dataset
   * @param {Array} keys define how to nest the set
   * @returns {Object} hash-map of key-value pairs
   */
  getNestedItems: function getNestedItems(keys) {
    if (!keys) return utils.warn("No keys provided to getNestedItems(<keys>)");
    return this.dataSource.getData(this._dataId, "nested", keys);
  },
  getHaveNoDataPointsPerKey: function getHaveNoDataPointsPerKey() {
    return this.dataSource.getData(this._dataId, "haveNoDataPointsPerKey", this.which);
  },


  /**
   * Gets limits
   * @param {String} attr parameter
   * @returns {Object} limits (min and max)
   */
  getLimits: function getLimits(attr) {
    return this.dataSource.getData(this._dataId, "limits", attr);
  },
  getTimespan: function getTimespan() {
    var timeModel = this._parent._parent.time;
    if (this.use !== "indicator" || this.which == timeModel.dim || !this._important || !this._dataId) return;
    return this.dataSource.getData(this._dataId, "timespan", this.which);
  },
  getFrame: function getFrame(steps, forceFrame, selected) {
    return this.dataSource.getFrame(this._dataId, steps, forceFrame, selected);
  },
  getFrames: function getFrames(steps, selected) {
    return this.dataSource.getFrames(this._dataId, steps, selected);
  },


  /**
   * gets hook values according dimension values
   */
  getItems: function getItems(filtered) {
    var _this = this;
    var dim = this.spaceRef && this._space[this.spaceRef] ? this._space[this.spaceRef].dim : _this._getFirstDimension({ exceptType: "time" });
    var items = {};
    var validItems = this.getValidItems();

    var filterItems = filtered ? this.getEntity().getFilteredEntities().map(function (d) {
      return d[dim];
    }) : [];
    var filterLength = filterItems.length;

    if (utils.isArray(validItems)) {
      validItems.forEach(function (d) {
        if (filterLength && !filterItems.includes(d[dim])) return;
        items[d[dim]] = d[_this.which];
      });
    }

    return items;
  },
  getLimitsByDimensions: function getLimitsByDimensions(dims) {
    var filtered = this.dataSource.getData(this._dataId, "nested", dims);
    var values = {};
    var limitsDim = {};
    var attr = this.which;

    var countLimits = function countLimits(items, limitsDim, id) {

      var filtered = items.reduce(function (filtered, d) {

        // check for dates
        var f = utils.isDate(d[attr]) ? d[attr] : parseFloat(d[attr]);

        // if it is a number
        if (!isNaN(f)) {
          filtered.push(f);
        }

        //filter
        return filtered;
      }, []);

      // get min/max for the filtered rows
      var min = void 0;
      var max = void 0;
      var limits = {};
      for (var i = 0; i < filtered.length; i += 1) {
        var c = filtered[i];
        if (typeof min === "undefined" || c < min) {
          min = c;
        }
        if (typeof max === "undefined" || c > max) {
          max = c;
        }
      }
      limits.min = min || 0;
      limits.max = max || 100;
      limitsDim[id] = limits;
    };

    utils.forEach(filtered, function (times, key) {
      var limit = limitsDim[JSON.parse(key).join(",")] = {};
      utils.forEach(times, function (item, time) {
        countLimits(item, limit, time);
      });
    });

    return limitsDim;
  },


  /**
   * Gets the concept properties of the hook's "which"
   * @returns {Object} concept properties
   */
  getConceptprops: function getConceptprops() {
    return this.use !== "constant" && this.dataSource ? this.dataSource.getConceptprops(this.which) : {};
  },


  /**
   * Find if a current model is discrete
   * @returns {boolean} true if it's a discrete model, false if continious
   */
  isDiscrete: function isDiscrete() {
    return this.scaleType === "ordinal";
  },
  validate: function validate() {
    var _this5 = this;

    this._super();

    // validate scale type: only makes sense if which is defined
    if (this.which) {
      var scaleType = this.scaleType;

      var _ref = this.getConceptprops() || {},
          _ref$scales = _ref.scales,
          scales = _ref$scales === undefined ? [] : _ref$scales;

      if (this.allow && this.allow.scales && this.allow.scales.length > 0) {
        scales = scales.filter(function (val) {
          return _this5.allow.scales.indexOf(val) != -1;
        });
      }

      var scaleTypeIsAllowed = scales.includes(scaleType);
      var genericLogIsAllowed = scales.includes("log") && scaleType === "genericLog";
      if (!(scaleTypeIsAllowed || genericLogIsAllowed) && scales.length > 0) {
        var _scales = scales,
            _scales2 = _slicedToArray(_scales, 1),
            firstAllowedScaleType = _scales2[0];

        this.set({ scaleType: firstAllowedScaleType }, null, false);
      }
    }
  },
  getEntity: function getEntity() {
    return this._space[this.spaceRef] || this._parent._space[this.spaceRef] || this._parent.getFirstEntityModel();
  },
  getDataKeys: function getDataKeys() {
    return this.spaceRef ? [this.getEntity().dim] : this._getAllDimensions({ exceptType: "time" });
  }
});

exports.default = Hook;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(9)) {
  var LIBRARY = __webpack_require__(35);
  var global = __webpack_require__(3);
  var fails = __webpack_require__(4);
  var $export = __webpack_require__(0);
  var $typed = __webpack_require__(74);
  var $buffer = __webpack_require__(107);
  var ctx = __webpack_require__(23);
  var anInstance = __webpack_require__(45);
  var propertyDesc = __webpack_require__(38);
  var hide = __webpack_require__(14);
  var redefineAll = __webpack_require__(47);
  var toInteger = __webpack_require__(25);
  var toLength = __webpack_require__(8);
  var toIndex = __webpack_require__(144);
  var toAbsoluteIndex = __webpack_require__(41);
  var toPrimitive = __webpack_require__(27);
  var has = __webpack_require__(17);
  var classof = __webpack_require__(54);
  var isObject = __webpack_require__(6);
  var toObject = __webpack_require__(11);
  var isArrayIter = __webpack_require__(96);
  var create = __webpack_require__(42);
  var getPrototypeOf = __webpack_require__(20);
  var gOPN = __webpack_require__(43).f;
  var getIterFn = __webpack_require__(98);
  var uid = __webpack_require__(39);
  var wks = __webpack_require__(7);
  var createArrayMethod = __webpack_require__(30);
  var createArrayIncludes = __webpack_require__(64);
  var speciesConstructor = __webpack_require__(62);
  var ArrayIterators = __webpack_require__(101);
  var Iterators = __webpack_require__(56);
  var $iterDetect = __webpack_require__(69);
  var setSpecies = __webpack_require__(44);
  var arrayFill = __webpack_require__(100);
  var arrayCopyWithin = __webpack_require__(133);
  var $DP = __webpack_require__(10);
  var $GOPD = __webpack_require__(19);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(139);
var $export = __webpack_require__(0);
var shared = __webpack_require__(58)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(142))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(39)('meta');
var isObject = __webpack_require__(6);
var has = __webpack_require__(17);
var setDesc = __webpack_require__(10).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(4)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(7)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(14)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(118);
var enumBugKeys = __webpack_require__(84);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(25);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(2);
var dPs = __webpack_require__(119);
var enumBugKeys = __webpack_require__(84);
var IE_PROTO = __webpack_require__(83)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(81)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(85).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(118);
var hiddenKeys = __webpack_require__(84).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var dP = __webpack_require__(10);
var DESCRIPTORS = __webpack_require__(9);
var SPECIES = __webpack_require__(7)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(23);
var call = __webpack_require__(131);
var isArrayIter = __webpack_require__(96);
var anObject = __webpack_require__(2);
var toLength = __webpack_require__(8);
var getIterFn = __webpack_require__(98);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(15);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

var _intervals = __webpack_require__(398);

var _intervals2 = _interopRequireDefault(_intervals);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var ModelLeaf = _events2.default.extend({

  _name: "",
  _parent: null,
  _persistent: true,

  init: function init(name, value, parent, binds, persistent) {

    // getter and setter for the value
    Object.defineProperty(this, "value", {
      get: this.get,
      set: this.set
    });
    Object.defineProperty(this, "persistent", {
      get: function get() {
        return this._persistent;
      }
    });

    this._super();

    this._name = name;
    this._parent = parent;
    this._root = parent._root;
    this.set(value, false, persistent);
    this.on(binds); // after super so there is an .events object
  },


  // if they want a persistent value and the current value is not persistent, return the last persistent value
  get: function get(persistent) {
    return persistent && !this._persistent ? this._persistentVal : this._val;
  },
  set: function set(val, force, persistent) {
    if (this.isSetAllowed(val, force)) {
      // persistent defaults to true
      persistent = typeof persistent !== "undefined" ? persistent : true;

      // set leaf properties
      if (persistent) this._persistentVal = val; // set persistent value if change is persistent.
      this._previousVal = utils.deepClone(this._val);
      this._val = val;
      this._persistent = persistent;

      // trigger change event
      this.trigger(new _events.ChangeEvent(this), this._name);

      return true;
    }
    return false;
  },
  isSetAllowed: function isSetAllowed(val, force) {
    return force || this._val !== val && JSON.stringify(this._val) !== JSON.stringify(val);
  },


  // duplicate from Model. Should be in a shared parent class.
  setTreeFreezer: function setTreeFreezer(freezerStatus) {
    if (freezerStatus) {
      this.freeze(["hook_change"]);
    } else {
      this.unfreeze();
    }
  }
});

var Model = _events2.default.extend({

  getClassDefaults: function getClassDefaults() {
    return {};
  },

  /**
   * A leaf model which has an object as value.
   * Needed when parsing plain JS objects. Enables distinction between models and leafs with object values.
   **/
  objectLeafs: [],

  /**
   * Initializes the model.
   * @param {Object} values The initial values of this model
   * @param {Object} parent reference to parent
   * @param {Object} bind Initial events to bind
   * @param {Boolean} freeze block events from being dispatched
   */
  init: function init(name, values, parent, bind) {
    this._type = this._type || "model";
    this._id = this._id || utils.uniqueId("m");
    this._data = {};
    //holds attributes of this model
    this._parent = parent;
    this._root = parent ? parent._root : this;
    this._name = name;
    this._inError = false;
    this._ready = false;
    this._readyOnce = false;
    //has this model ever been ready?
    this._loadedOnce = false;
    //array of processes that are loading
    this._intervals = getIntervals(this);

    //will the model be hooked to data?
    this._space = {};

    this._dataId = false;
    this._limits = {};
    //stores limit values
    this._super();

    // initial values
    // add defaults to initialValues
    var initialValues = utils.deepExtend({}, this.getClassDefaults(), values);
    this.set(initialValues);

    // bind initial events
    // bind after setting, so no events are fired by setting initial values
    if (bind) {
      this.on(bind);
    }
  },


  /* ==========================
   * Getters and Setters
   * ==========================
   */

  /**
   * Gets an attribute from this model or all fields.
   * @param attribute Optional attribute
   * @returns attr value or all values if attr is undefined
   */
  get: function get(attribute) {
    if (attribute) {
      var model = this._data[attribute];

      return Model.isModel(model) ? model : model.value;
    }

    return this._data;
  },


  /**
   * Sets an attribute or multiple for this model (inspired by Backbone)
   * @param attr property name
   * @param val property value (object or value)
   * @param {Boolean} force force setting of property to value and triggers set event
   * @param {Boolean} persistent true if the change is a persistent change
   * @param {Function} caller — the outer function that has called this setter might want to identify itself to avoid recursive call
   * @returns defer defer that will be resolved when set is done
   */
  set: function set(attr, val, force, persistent, caller) {
    var setting = this._setting;
    var attrs = void 0;
    var freezeCall = false; // boolean, indicates if this .set()-call froze the modelTree

    //expect object as default
    if (!utils.isPlainObject(attr)) {
      (attrs = {})[attr] = val;
    } else {
      // move all arguments one place
      attrs = attr;
      persistent = force;
      force = val;
    }

    //do nothing if setting an empty object
    if (Object.keys(attrs).length === 0) return;

    //we are currently setting the model
    this._setting = true;

    // Freeze the whole model tree if not frozen yet, so no events are fired while setting
    if (!this._freeze) {
      freezeCall = true;
      this.setTreeFreezer(true);
    }

    // init/set all given values
    var changes = [];
    for (var attribute in attrs) {
      val = attrs[attribute];

      var bothModel = utils.isPlainObject(val) && this._data[attribute] instanceof Model;
      var bothModelLeaf = (!utils.isPlainObject(val) || this.isObjectLeaf(attribute)) && this._data[attribute] instanceof ModelLeaf;

      if (this._data[attribute] && (bothModel || bothModelLeaf)) {
        // data type does not change (model or leaf and can be set through set-function)
        var prevValue = this._data[attribute].value;
        var setSuccess = this._data[attribute].set(val, force, persistent);
        if (bothModelLeaf && setSuccess) {
          changes.push(attribute);
        }

        //if a hook has "setAttribute" funation, then call it from here, except when the Caller is that particular function
        //avoiding double calling prevents side effects
        //TODO: this was introduced to handle back button, but it looks like a hack really
        var fn = "set" + utils.capitalize(attribute[0]) + attribute.slice(1);
        if (this.isHook() && utils.isFunction(this[fn]) && caller !== this[fn] && val !== prevValue) {
          this[fn](attribute === "which" ? { concept: val } : val);
        }
      } else {
        // data type has changed or is new, so initializing the model/leaf
        this._data[attribute] = initSubmodel(attribute, val, this, persistent);
        bindSetterGetter(this, attribute);
      }
    }

    if (!setting) {
      this.checkDataChanges(changes);
      if (this.validate) {
        this.validate();
      }
    }

    if (!setting || force) {
      this._setting = false;
      if (freezeCall && (!this.isHook() || !this.isLoading())) {
        this.setTreeFreezer(false);
      }
      if (!this.isHook() && !this.isLoading()) {
        this.setReady();
      }
    }

    // if this set()-call was the one freezing the tree, now the tree can be unfrozen (i.e. all setting is done)
  },


  // standard model doesn't do anything with data
  // overloaded by hook/entities
  checkDataChanges: function checkDataChanges() {},
  setTreeFreezer: function setTreeFreezer(freezerStatus) {
    // first traverse down
    // this ensures deepest events are triggered first
    utils.forEach(this._data, function (submodel) {
      submodel.setTreeFreezer(freezerStatus);
    });

    // then freeze/unfreeze
    if (freezerStatus) {
      this.freeze(["hook_change"]);
    } else {
      this.unfreeze();
    }
  },


  /**
   * Gets the type of this model
   * @returns {String} type of the model
   */
  getType: function getType() {
    return this._type;
  },


  /**
   * Gets all submodels of the current model
   * @param {Object} object [object=false] Should it return an object?
   * @param {Function} validationFunction Validation function
   * @returns {Array} submodels
   */
  getSubmodels: function getSubmodels() {
    var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var validationFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
      return true;
    };

    var submodels = object ? {} : [];
    utils.forEach(this._data, function (subModel, name) {
      if (subModel && typeof subModel._id !== "undefined" && Model.isModel(subModel) && validationFunction(subModel)) {
        if (object) {
          submodels[name] = subModel;
        } else {
          submodels.push(subModel);
        }
      }
    });
    return submodels;
  },


  /**
   * Gets the current model and submodel values as a JS object
   * @returns {Object} All model as JS object, leafs will return their values
   */
  getPlainObject: function getPlainObject(persistent) {
    var obj = {};
    var _this = this;
    utils.forEach(this._data, function (dataItem, i) {
      // if it's a submodel
      if (dataItem instanceof Model) {
        obj[i] = dataItem.getPlainObject(persistent);
      }
      // if it's a modelLeaf
      else {
          //if asked for persistent then add value to result only if modelLeaf state is
          //persistent
          if (!persistent || dataItem.persistent) {
            var leafValue = dataItem.get(persistent);
            if (utils.isDate(leafValue)) leafValue = _this.formatDate(leafValue);
            obj[i] = leafValue;
          }
        }
    });
    return obj;
  },
  formatDate: function formatDate(dateObject) {
    return dateObject.toString();
  },


  /**
   * Gets the requested object, including the leaf-object, not the value
   * @returns {Object} Model or ModelLeaf object.
   */
  getModelObject: function getModelObject(name) {
    return name ? this._data[name] : this;
  },


  /**
   * Clears this model, submodels, data and events
   */
  clear: function clear() {
    var submodels = this.getSubmodels();
    for (var i in submodels) {
      submodels[i].clear();
    }
    this.setReady(false);
    this.off();
    this._intervals.clearAllIntervals();
    this._data = {};
  },


  /**
   * Validates data.
   * Interface for the validation function implemented by a model
   * @returns Promise or nothing
   */
  validate: function validate() {},


  /* ==========================
   * Model loading
   * ==========================
   */

  // normal model is never loading
  _isLoading: function _isLoading() {
    return false;
  },


  /**
   * checks whether this model is loading anything
   * @param {String} optional process id (to check only one)
   * @returns {Boolean} is it loading?
   */
  isLoading: function isLoading() {
    if (this._isLoading()) return true;

    //if not loading anything, check submodels
    var submodels = this.getSubmodels();
    var i = void 0;
    for (i = 0; i < submodels.length; i += 1) {
      if (submodels[i].isLoading()) {
        return true;
      }
    }

    return false;
  },


  /**
   * Sets the model as ready or not depending on its loading status
   */
  setReady: function setReady(value) {
    if (value === false) {
      this._ready = false;
      if (this._parent && this._parent.setReady) {
        this._parent.setReady(false);
      }
      return;
    }
    //only ready if nothing is loading at all
    var prev_ready = this._ready;
    this._ready = !this.isLoading() && !this._setting;
    // if now ready and wasn't ready yet
    if (this._ready && prev_ready !== this._ready) {
      if (!this._readyOnce) {
        this._readyOnce = true;
        this.trigger("readyOnce");
      }
      this.trigger("ready");
    }
  },
  setInterModelListeners: function setInterModelListeners() {
    utils.forEach(this.getSubmodels(), function (subModel) {
      return subModel.setInterModelListeners();
    });
  },
  startPreload: function startPreload() {

    var promises = [];
    promises.push(this.preloadData());

    utils.forEach(this.getSubmodels(), function (subModel) {
      return promises.push(subModel.startPreload());
    });

    return Promise.all(promises);
  },
  preloadData: function preloadData() {
    return Promise.resolve();
  },


  /**
   * loads data (if hook)
   * Hooks loads data, models ask children to load data
   * Basically, this method:
   * loads is theres something to be loaded:
   * does not load if there's nothing to be loaded
   * @param {Object} options (includes splashScreen)
   * @returns defer
   */
  startLoading: function startLoading(opts) {
    var _this2 = this;

    this.trigger("startLoading");

    var promises = [];
    promises.push(this.loadData(opts));

    utils.forEach(this.getSubmodels(), function (subModel) {
      return promises.push(subModel.startLoading(opts));
    });

    return Promise.all(promises).then(this.onSuccessfullLoad.bind(this)).catch(function (error) {
      utils.error("error in model " + _this2._name);
      _this2.triggerLoadError(error);
    });
  },
  loadData: function loadData(opts) {
    if (this.isHook()) utils.warn("Hook " + this._name + " is not loading because it's not extending Hook prototype.");
    return Promise.resolve();
  },
  loadSubmodels: function loadSubmodels(options) {
    var promises = [];
    var subModels = this.getSubmodels();
    utils.forEach(subModels, function (subModel) {
      promises.push(subModel.startLoading(options));
    });
    return promises.length > 0 ? Promise.all(promises) : Promise.resolve();
  },
  onSuccessfullLoad: function onSuccessfullLoad() {
    var _this3 = this;

    this.validate();
    utils.timeStamp("Vizabi Model: Model loaded: " + this._name + "(" + this._id + ")");
    //end this load call
    this._loadedOnce = true;

    this._loadCall = false;
    this.setTreeFreezer(false);

    //we need to defer to make sure all other submodels
    //have a chance to call loading for the second time
    utils.defer(function () {
      return _this3.setReady();
    });
  },
  handleLoadError: function handleLoadError() {
    var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getDefaultError();

    this.triggerLoadError(error);
  },
  getDefaultError: function getDefaultError() {
    var error = new Error();
    error.message = this.getClosestModel("locale").getTFunction()("connection/error");
    return error;
  },
  triggerLoadError: function triggerLoadError(error) {
    _events2.default.unfreezeAll();
    if (this._inError) return utils.error("Model " + this._name + " already in error");
    this._inError = true;
    this._root.trigger("load_error", error);
    this._root.trigger("load_error1", error);
  },


  /**
   * executes after preloading processing is done
   */
  afterPreload: function afterPreload() {
    var submodels = this.getSubmodels();
    utils.forEach(submodels, function (s) {
      s.afterPreload();
    });
  },


  /* ===============================
   * Hooking model to external data
   * ===============================
   */

  /**
   * is this model hooked to data?
   */
  isHook: function isHook() {
    return Boolean(this.use);
  },


  /**
   * Gets all submodels of the current model that are hooks
   * @param object [object=false] Should it return an object?
   * @returns {Array|Object} hooks array or object
   */
  getSubhooks: function getSubhooks(object) {
    return this.getSubmodels(object, function (s) {
      return s.isHook();
    });
  },


  /**
   * gets all sub values for a certain hook
   * only hooks have the "hook" attribute.
   * @param {String} type specific type to lookup
   * @returns {Array} all unique values with specific hook use
   */
  getHookWhich: function getHookWhich(type) {
    var values = [];
    if (this.use && this.use === type) {
      values.push(this.which);
    }
    //repeat for each submodel
    utils.forEach(this.getSubmodels(), function (s) {
      values = utils.unique(values.concat(s.getHookWhich(type)));
    });
    //now we have an array with all values in a type of hook for hooks.
    return values;
  },


  /**
   * gets all sub values for indicators in this model
   * @returns {Array} all unique values of indicator hooks
   */
  getIndicators: function getIndicators() {
    return this.getHookWhich("indicator");
  },


  /**
   * gets all sub values for indicators in this model
   * @returns {Array} all unique values of property hooks
   */
  getProperties: function getProperties() {
    return this.getHookWhich("property");
  },


  /**
   * Gets the dimension of this model if it has one
   * @returns {String|Boolean} dimension
   */
  getDimension: function getDimension() {
    return this.dim || false; //defaults to dim if it exists
  },


  /**
   * Gets the dimension (if entity) or which (if hook) of this model
   * @returns {String|Boolean} dimension
   */
  getDimensionOrWhich: function getDimensionOrWhich() {
    return this.dim || (this.use != "constant" ? this.which : false); //defaults to dim or which if it exists
  },


  /**
   * Gets the filter for this model if it has one
   * @returns {Object} filters
   */
  getFilter: function getFilter() {
    return {}; //defaults to no filter
  },


  /**
   * maps the value to this hook's specifications
   * @param value Original value
   * @returns hooked value
   */
  mapValue: function mapValue(value) {
    return value;
  },


  /**
   * Gets formatter for this model
   * @returns {Function} formatter function
   */
  getParser: function getParser() {
    return null;
  },


  /**
   * @return {Object} defaults of this model, and when available overwritten by submodel defaults
   */
  getDefaults: function getDefaults() {
    return utils.deepExtend({}, this.getClassDefaults(), this.getSubmodelDefaults());
  },


  /**
   * @return {Object} All defaults coming from submodels
   */
  getSubmodelDefaults: function getSubmodelDefaults() {
    var d = {};
    utils.forEach(this.getSubmodels(true), function (model, name) {
      d[name] = model.getDefaults();
    });
    return d;
  },


  /**
   * @param  {name} name of the child to check
   * @return {Boolean} if the child is a leaf with a plain object as value
   */
  isObjectLeaf: function isObjectLeaf(name) {
    return this.objectLeafs.indexOf(name) !== -1;
  },


  /**
   * gets closest prefix model moving up the model tree
   * @param {String} prefix
   * @returns {Object} submodel
   */
  getClosestModel: function getClosestModel(name) {
    var model = this.findSubmodel(name);
    if (model) {
      return model;
    } else if (this._parent) {
      return this._parent.getClosestModel(name);
    }
    return null;
  },


  /**
   * find submodel with name that starts with prefix
   * @param {String} prefix
   * @returns {Object} submodel or false if nothing is found
   */
  findSubmodel: function findSubmodel(name) {
    for (var i in this._data) {
      //found submodel
      if (i === name && Model.isModel(this._data[i])) {
        return this._data[i];
      }
    }
    return null;
  },


  /**
   * is this entities type model ?
   */
  isEntities: function isEntities() {
    return false;
  }
});

/* ===============================
 * Private Helper Functions
 * ===============================
 */

/**
 * Checks whether an object is a model or not
 * if includeLeaf is true, a leaf is also seen as a model
 */
Model.isModel = function (model, includeLeaf) {
  return model && (model.hasOwnProperty("_data") || includeLeaf && model.hasOwnProperty("_val"));
};

function bindSetterGetter(model, prop) {
  Object.defineProperty(model, prop, {
    configurable: true,
    //allow reconfiguration
    get: function (p) {
      return function () {
        return model.get(p);
      };
    }(prop),
    set: function (p) {
      return function (value) {
        return model.set(p, value);
      };
    }(prop)
  });
}

/**
 * Loads a submodel, when necessaary
 * @param {String} attr Name of submodel
 * @param {Object} val Initial values
 * @param {Object} ctx context / parent model
 * @param {Boolean} persistent true if the change is a persistent change
 * @returns {Object} model new submodel
 */
function initSubmodel(attr, val, ctx, persistent) {

  var submodel = void 0;

  // if value is a value -> leaf
  if (!utils.isPlainObject(val) || utils.isArray(val) || ctx.isObjectLeaf(attr)) {

    var binds = {
      //the submodel has changed (multiple times)
      "change": onChange
    };
    submodel = new ModelLeaf(attr, val, ctx, binds, persistent);
  }

  // if value is an object -> model
  else {

      var _binds = {
        //the submodel has changed (multiple times)
        "change": onChange,
        //loading has started in this submodel (multiple times)
        "hook_change": onHookChange,
        // error triggered in loading
        "load_error": function load_error() {
          return ctx.trigger.apply(ctx, arguments);
        },
        // interpolation completed
        "dataLoaded": function dataLoaded() {
          return ctx.trigger.apply(ctx, arguments);
        },
        //loading has ended in this submodel (multiple times)
        "ready": onReady
      };

      // if the value is an already instantiated submodel (Model or ModelLeaf)
      // this is the case for example when a new componentmodel is made (in Component._modelMapping)
      // it takes the submodels from the toolmodel and creates a new model for the component which refers
      // to the instantiated submodels (by passing them as model values, and thus they reach here)
      if (Model.isModel(val, true)) {
        submodel = val;
        submodel.on(_binds);
      }
      // if it's just a plain object, create a new model
      else {
          // construct model
          var modelType = attr.split("_")[0];

          var Modl = Model.get(modelType, true);
          if (!Modl) {
            try {
              Modl = __webpack_require__(399)("./" + modelType).default;
            } catch (err) {
              Modl = Model;
            }
          }

          submodel = new Modl(attr, val, ctx, _binds);
          // model is still frozen but will be unfrozen at end of original .set()
        }
    }

  return submodel;

  // Default event handlers for models
  function onChange(evt, path) {
    if (!ctx._ready) return; //block change propagation if model isnt ready
    path = ctx._name + "." + path;
    ctx.trigger(evt, path);
  }
  function onHookChange(evt, vals) {
    ctx.trigger(evt, vals);
  }
  function onReady(evt, vals) {
    //trigger only for submodel
    ctx.setReady(false);
    //wait to make sure it's not set false again in the next execution loop
    utils.defer(function () {
      ctx.setReady();
    });
    //ctx.trigger(evt, vals);
  }
}

/**
 * gets closest interval from this model or parent
 * @returns {Object} Intervals object
 */
function getIntervals(ctx) {
  return ctx._intervals || (ctx._parent ? getIntervals(ctx._parent) : new _intervals2.default());
}

exports.default = Model;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeEvent = exports.DefaultEvent = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var _freezeAllEvents = false;
var _frozenEventInstances = [];
var _freezeAllExceptions = {};

var DefaultEvent = exports.DefaultEvent = _class2.default.extend({

  source: "",
  type: "default",

  init: function init(source, type) {
    this.source = source;
    if (type) this.type = type;
  }
});

var ChangeEvent = exports.ChangeEvent = DefaultEvent.extend("change", {

  type: "change",

  init: function init(source) {
    this._super(source);
  }
});

var EventSource = _class2.default.extend({

  /**
   * Initializes the event class
   */
  init: function init() {
    this._id = this._id || utils.uniqueId("e");
    this._events = {};
    //freezing events
    this._freeze = false;
    this._freezer = [];
    this._freezeExceptions = {};
  },


  /**
   * Binds a callback function to an event: part 1: split grouped parameters in seperate calls
   * @param {String} type type of event
   * @param {String|Array} target path to object the event should be bound to or array of target paths
   * @param {Function|Array} func function to be bound with event or array with functions
   */
  on: function on(type, path, func) {

    // if parameters had to be split up in seperate calls, don't continue with this call
    if (this.splitEventParameters(type, path, func, this.on)) return;

    // get the target model
    var target = this.traversePath(path);
    if (!target) return;

    // register the event to this object
    target._events[type] = target._events[type] || [];
    if (typeof func === "function") {
      target._events[type].push(func);
    } else {
      utils.warn("Can't bind event '" + type + "'. It must be a function.");
    }
  },


  /**
   * Unbinds all events associated with a name or a specific one
   * @param {String|Array} name name of event or array with names
   */
  off: function off(type, path, func) {

    // if no arguments, unbind all
    if (arguments.length == 0) {
      this._events = {};
      return;
    }

    // if parameters had to be split up in seperate calls, don't continue with this call
    if (this.splitEventParameters(type, path, func, this.off)) return;

    // get target model
    var target = this.traversePath(path);
    if (!target) return;

    // unbind events
    if (target._events.hasOwnProperty(type)) {
      // if function not given, remove all events of type
      if (typeof func === "undefined") {
        target._events[type] = [];
        return;
      }
      var index = target._events[type].indexOf(func);
      if (index > -1) {
        target._events[type].splice(index, 1);
      } else {
        utils.warn("Could not unbind function " + func.name + ". Function not in bound function list.");
      }
    }
  },


  /**
   * Split grouped event parameters to seperate calls to given funtion
   * @param {String|Object|Array} type type of event
   * @param {String|Array} target path to object the event should be bound to or array of target paths
   * @param {Function|Array} func function to be bound with event or array with functions
   * @param {Function} eventFunc function to further process the split up parameters
   * @return {Boolean} true if the parameters where split up, false if nothing was split up
   * eventFunc is mostly arguments.callee but this is deprecated in ECMAscript 5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee
   */
  splitEventParameters: function splitEventParameters(type, path, func, eventFunc) {
    var i = void 0;
    var calls = [];

    // multiple at a time, array format: [{type: function}, {'type:path': function}, ... ]
    // seems redundant but used so that binding-sets won't be turned into models (which happens when it's a pure object). Used e.g. in Tool.init();
    if (utils.isArray(type)) {
      for (i = 0; i < type.length; i += 1) {
        eventFunc.call(this, type[i], func);
      }
      return true;
    }

    //multiple at a time, object format: {type: function, 'type:path': function, ... }
    if (utils.isObject(type)) {
      for (i in type) {
        eventFunc.call(this, i, type[i]);
      }
      return true;
    }

    // type and path are both in type: on('type:path', function)
    // or
    // path undefined: on('type', function)
    if (typeof path === "function") {
      func = path; // put callback function in func variable
      // on('type:path', func)
      if (type.indexOf(":") !== -1) {
        var split = type.split(":");
        type = split[0];
        path = split[1];
      }
      // on(type, func)
      else {
          path = undefined;
        }
      eventFunc.call(this, type, path, func);
      return true;
    }

    // bind multiple paths at a time to one function: on(type, [path1, path2], function)
    if (utils.isArray(path)) {
      for (i = 0; i < path.length; i += 1) {
        eventFunc.call(this, type, path[i], func);
      }
      return true;
    }

    //bind multiple functions at the same time to one path: on(type, path, [function1, function2])
    if (func && utils.isArray(func)) {
      for (i = 0; i < func.length; i += 1) {
        eventFunc.call(this, type, path, func[i]);
      }
      return true;
    }
    return false;
  },


  /**
   * // TODO: if events will not be strictly model-bound, this might have to move to model.
   * Traverse path down the model tree
   * @param {String|Array} target path to object that should be returned. Either in string or array form
   */
  traversePath: function traversePath(path) {

    // if there's no path to traverse
    if (typeof path === "undefined" || utils.isArray(path) && path.length == 0) {
      return this;
    }

    // prepare path to array
    if (typeof path === "string") {
      path = path.split(".");
    }

    // check if path is an array
    if (!utils.isArray(path)) {
      utils.error("Path is wrong type. Path should be a string or array but is " + (typeof path === "undefined" ? "undefined" : _typeof(path)) + ".");
      return null;
    }

    // descent to next child to find target object
    var currentTarget = path.shift();
    if (this[currentTarget] === undefined) utils.warn('Can\'t find child "' + currentTarget + '" of the model ' + this._name + ".");else return this.getModelObject(currentTarget).traversePath(path);
  },
  createEventFromType: function createEventFromType(evtType) {
    if (evtType instanceof DefaultEvent) {
      return evtType;
    }

    var eventClass = DefaultEvent.get(evtType, true); // silent
    if (eventClass) {
      return new eventClass(this);
    }

    return new DefaultEvent(this, evtType);
  },


  /**
   * Triggers an event, adding it to the buffer
   * @param {String|Array} name name of event or array with names
   * @param args Optional arguments (values to be passed)
   */
  trigger: function trigger(evtType, args) {
    var _this2 = this;

    var i = void 0;
    var size = void 0;

    // split up eventType-paremeter for multiple event-triggers
    if (utils.isArray(evtType)) {
      for (i = 0, size = evtType.length; i < size; i += 1) {
        this.trigger(evtType[i], args);
      }
      return;
    }

    // create an event-object if necessary
    var evt = this.createEventFromType(evtType);

    // if this eventType has no events registered
    if (!this._events.hasOwnProperty(evt.type)) {
      return;
    }

    // for each function registered to this eventType on this object
    var _this = this;
    utils.forEach(this._events[evt.type], function (func) {

      // prepare execution
      var execute = function execute() {
        var msg = "Vizabi Event: " + evt.type; // + ' - ' + eventPath;
        utils.timeStamp(msg);
        func.apply(_this, [evt, args]);
      };

      //TODO: improve readability of freezer code
      //only execute if not frozen and exception doesnt exist
      if (_this2.allowExecution(evt)) {
        execute();
      } else {
        _this2._freezer.push(execute);
        if (_freezeAllEvents && !_frozenEventInstances[_this2._id]) {
          _this2.freeze();
          _frozenEventInstances[_this2._id] = _this2;
        }
      }
    });
  },
  allowExecution: function allowExecution(evt) {
    return !this._freeze && !_freezeAllEvents || // nothing frozen
    _freezeAllEvents && _freezeAllExceptions.hasOwnProperty(evt.type) || // freeze all but exception
    !_freezeAllEvents && this._freeze && this._freezeExceptions.hasOwnProperty(evt.type); // freeze but exception
  },


  /**
   * Prevents all events from being triggered, buffering them
   */
  freeze: function freeze(exceptions) {
    this._freeze = true;
    if (!exceptions) {
      return;
    }
    if (!utils.isArray(exceptions)) {
      exceptions = [exceptions];
    }
    for (var i = 0; i < exceptions.length; i += 1) {
      this._freezeExceptions[exceptions[i]] = true;
    }
  },


  /**
   * triggers all frozen events
   */
  unfreeze: function unfreeze() {
    this._freeze = false;
    this._freezeExceptions = {};
    //execute old frozen events
    while (this._freezer.length) {
      var execute = this._freezer.shift();
      execute();
    }
  },


  /**
   * clears all frozen events
   */
  clearFrozen: function clearFrozen() {
    this._freeze = false;
    this._freezeExceptions = {};
    this._freezer = [];
  }
});

EventSource.freezeAll = freezeAll;
EventSource.unfreezeAll = unfreezeAll;

//generic event functions
/**
 * freezes all events
 */
function freezeAll(exceptions) {
  _freezeAllEvents = true;
  if (!exceptions) {
    return;
  }
  if (!utils.isArray(exceptions)) {
    exceptions = [exceptions];
  }
  utils.forEach(exceptions, function (e) {
    _freezeAllExceptions[e] = true;
  });
}

/**
 * triggers all frozen events form all instances
 */
function unfreezeAll() {
  _freezeAllEvents = false;
  _freezeAllExceptions = {};
  //unfreeze all instances
  var keys = Object.keys(_frozenEventInstances);
  for (var i = 0; i < keys.length; i++) {
    var instance = _frozenEventInstances[keys[i]];
    if (!instance) {
      continue;
    }
    instance.unfreeze();
  }
  _frozenEventInstances = {};
}

exports.default = EventSource;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _entities = __webpack_require__(112);

var _entities2 = _interopRequireDefault(_entities);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

var _marker = __webpack_require__(78);

var _marker2 = _interopRequireDefault(_marker);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI INDICATOR PICKER
 * Reusable indicator picker component
 */

var IndPicker = _component2.default.extend({

  /**
     * Initializes the Indicator Picker.
     * Executed once before any template is rendered.
     * @param config The options passed to the component
     * @param context The component's parent
     */
  init: function init(config, context) {

    this.name = "gapminder-indicatorpicker";
    this.template = '<span class="vzb-ip-holder"><span class="vzb-ip-select"></span><span class="vzb-ip-info"></span></span>';

    var _this = this;

    this.model_expects = [{
      name: "time",
      type: "time"
    }, {
      name: "targetModel"
    }, {
      name: "locale",
      type: "locale"
    }];

    //this.markerID = config.markerID;
    this.showHoverValues = config.showHoverValues || false;
    //if (!config.markerID) utils.warn("indicatorpicker.js complains on 'markerID' property: " + config.markerID);

    this.model_binds = {
      "translate:locale": function translateLocale(evt) {
        _this.updateView();
      },
      "ready": function ready(evt) {
        _this.updateView();
      }
    };

    this.model_binds["change:targetModel"] = function (evt, path) {
      if (path.indexOf("." + _this.targetProp) == -1) return;
      _this.updateView();
    };

    //contructor is the same as any component
    this._super(config, context);

    if (this.model.targetModel.isHook() && this.showHoverValues) {
      this.model.targetModel._parent.on("change:highlight", function (evt, values) {
        var mdl = _this.model.targetModel;
        if (!mdl.isHook()) return;
        var marker = mdl._parent;
        if (!_this.showHoverValues || mdl.use == "constant") return;
        var _highlightedEntity = marker.getHighlighted();
        if (_highlightedEntity.length > 1) return;

        if (_highlightedEntity.length) {
          marker.getFrame(_this.model.time.value, function (frame) {
            if (_this._highlighted || !frame) return;

            var _highlightedEntity = marker.getHighlighted();
            if (_highlightedEntity.length) {
              var KEYS = mdl.getDataKeys();
              var value = frame[mdl._name][utils.getKey(_highlightedEntity[0], KEYS)];

              // resolve strings via the color legend model
              var conceptType = mdl.getConceptprops().concept_type;
              if (value && mdl._type === "color" && ["entity_set", "entity_domain"].includes(conceptType)) {
                var clModel = mdl.getColorlegendMarker();
                if (clModel.label.getItems()[value]) value = clModel.label.getItems()[value];
              }

              _this._highlightedValue = value;

              _this._highlighted = !_this._highlightedValue && _this._highlightedValue !== 0 || mdl.use !== "constant";
              _this.updateView();
            }
          });
        } else {
          if (values !== null && values !== "highlight") {
            if (values) {
              _this._highlightedValue = values[mdl._name];
              _this._highlighted = !_this._highlightedValue && _this._highlightedValue !== 0 || mdl.use !== "constant";
            }
          } else {
            _this._highlighted = false;
          }
          _this.updateView();
        }
      });
    }

    this.targetProp = config.targetProp || this.model.targetModel instanceof _hook2.default ? "which" : this.model.targetModel instanceof _entities2.default ? "dim" : this.model.targetModel instanceof _marker2.default ? "space" : null;
  },
  ready: function ready() {
    this.updateView();
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.el_select = d3.select(this.element).select(".vzb-ip-select");

    this.el_select.on("click", function () {
      var rect = _this.el_select.node().getBoundingClientRect();
      var rootEl = _this.root.element instanceof Array ? _this.root.element : d3.select(_this.root.element);
      var rootRect = rootEl.node().getBoundingClientRect();
      var treemenuComp = _this.root.findChildByName("gapminder-treemenu");
      var treemenuColWidth = treemenuComp.activeProfile.col_width;
      var treemenuPaddLeft = parseInt(treemenuComp.wrapper.style("padding-left"), 10) || 0;
      var treemenuPaddRight = parseInt(treemenuComp.wrapper.style("padding-right"), 10) || 0;
      var topPos = rect.bottom - rootRect.top;
      var leftPos = rect.left - rootRect.left - (treemenuPaddLeft + treemenuPaddRight + treemenuColWidth - rect.width) * 0.5;

      treemenuComp.targetModel(_this.model.targetModel).alignX("left").alignY("top").top(topPos).left(leftPos).updateView().toggle();
    });

    this.infoEl = d3.select(this.element).select(".vzb-ip-info");
    if (_this.model.targetModel.isHook()) {
      utils.setIcon(this.infoEl, _iconset.question).select("svg").attr("width", "0px").attr("height", "0px");

      this.infoEl.on("click", function () {
        _this.root.findChildByName("gapminder-datanotes").pin();
      });
      this.infoEl.on("mouseover", function () {
        var rect = _this.el_select.node().getBoundingClientRect();
        var rootRect = _this.root.element.getBoundingClientRect();
        var topPos = rect.bottom - rootRect.top;
        var leftPos = rect.left - rootRect.left + rect.width;

        _this.root.findChildByName("gapminder-datanotes").setHook(_this.model.targetModel._name).show().setPos(leftPos, topPos);
      });
      this.infoEl.on("mouseout", function () {
        _this.root.findChildByName("gapminder-datanotes").hide();
      });
    }
  },
  updateView: function updateView() {
    if (!this._readyOnce) return;

    var _this = this;
    var translator = this.model.locale.getTFunction();

    var targetModel = _this.model.targetModel;
    var which = targetModel[_this.targetProp];
    var type = targetModel._type;

    var concept = void 0;
    var selectText = void 0;

    if (targetModel instanceof _hook2.default) {
      concept = targetModel.getConceptprops();

      if (this.showHoverValues && this._highlighted) {
        var formatter = targetModel.getTickFormatter();

        selectText = this._highlightedValue || this._highlightedValue === 0 ? formatter(this._highlightedValue) : translator("hints/nodata");
      } else {
        //Let the indicator "_default" in tree menu be translated differnetly for every hook type
        selectText = which === "_default" ? translator("indicator/_default/" + type) : concept.name_short;
      }
    } else {

      // targetModel is marker
      var dataManager = targetModel._root.dataManager;
      selectText = targetModel.space.map(function (dim) {
        return dataManager.getConceptProperty(targetModel._space[dim].dim, "name");
      }).join(", ");
    }

    this.el_select.text(selectText).attr("title", function (d) {
      return this.offsetWidth < this.scrollWidth ? selectText : null;
    });

    // hide info el if no data is available for it to make sense
    var hideInfoEl = concept && !concept.description && !concept.sourceName && !concept.sourceLink;
    this.infoEl.classed("vzb-invisible", hideInfoEl);
  }
});

exports.default = IndPicker;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _component2.default.extend({
  init: function init(config, context) {
    this.template = '<span class="vzb-sc-holder vzb-dialog-checkbox"><input type="checkbox"><label></label></span>';
    var _this = this;
    this.name = "gapminder-simplecheckbox";

    this.checkbox = config.checkbox;
    this.submodel = config.submodel;

    this.model_expects = [{
      name: "mdl"
      //TODO: learn how to expect model "axis" or "size" or "color"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.model_binds = {
      "change:mdl": function changeMdl(evt) {
        _this.updateView();
      },
      "translate:locale": function translateLocale(evt) {
        _this.updateView();
      }
    };

    var submodel = this.submodel ? this.submodel + ":" : "";
    this.model_binds["change:mdl." + submodel + this.checkbox] = function () {
      _this.updateView();
    };

    //contructor is the same as any component
    this._super(config, context);
  },
  ready: function ready() {
    this.parentModel = this.submodel ? this.model.mdl[this.submodel] : this.model.mdl;
    this.updateView();
  },
  readyOnce: function readyOnce() {
    var _this = this;
    this.element = d3.select(this.element);
    var id = "-check-" + _this._id;
    this.labelEl = this.element.select("label").attr("for", id);
    this.checkEl = this.element.select("input").attr("id", id).on("change", function () {
      _this._setModel(d3.select(this).property("checked"));
    });
  },
  updateView: function updateView() {
    this.translator = this.model.locale.getTFunction();
    var modelExists = this.parentModel && (this.parentModel[this.checkbox] || this.parentModel[this.checkbox] === false);
    this.labelEl.classed("vzb-hidden", !modelExists);
    if (modelExists) {
      this.labelEl.text(this.translator("check/" + this.checkbox));
      this.checkEl.property("checked", !!this.parentModel[this.checkbox]);
    }
  },
  _setModel: function _setModel(value) {
    this.parentModel[this.checkbox] = value;
  }
});

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(10).f;
var has = __webpack_require__(17);
var TAG = __webpack_require__(7)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(24);
var TAG = __webpack_require__(7)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var defined = __webpack_require__(28);
var fails = __webpack_require__(4);
var spaces = __webpack_require__(87);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * DATACONNECTED MODEL
 *
 * Any model which may trigger a reload of data is here. Dimensions, Time, Hooks and Locales are DataConnected
 */

var DataConnected = _model2.default.extend({

  dataConnectedChildren: [],

  checkDataChanges: function checkDataChanges(changedChildren) {
    var _this = this;

    if (!changedChildren || !this.dataConnectedChildren) return;

    if (!utils.isArray(changedChildren) && utils.isObject(changedChildren)) changedChildren = Object.keys(changedChildren);

    if (changedChildren.length == 0 || this.dataConnectedChildren.length == 0) return;

    var dataConnectedChangedChildren = changedChildren.filter(function (child) {
      return _this.dataConnectedChildren.indexOf(child) !== -1;
    });

    if (dataConnectedChangedChildren.length > 0) {
      this.trigger("dataConnectedChange");
      this.startLoading({ dataConnectedChange: true });
    }
  }
});

exports.default = DataConnected;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(22);
var global = __webpack_require__(3);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(35) ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(24);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 60 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(2);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(13);
var SPECIES = __webpack_require__(7)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _brushslider = __webpack_require__(79);

var _brushslider2 = _interopRequireDefault(_brushslider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI BUBBLE SIZE slider
 * Reusable bubble size slider
 */

var OPTIONS = {
  THUMB_HEIGHT: 17,
  THUMB_STROKE_WIDTH: 3
};

var PROFILES = {
  "small": {},
  "medium": {},
  "large": {}
};

var SingleHandleSlider = _brushslider2.default.extend({

  /**
   * Initializes the timeslider.
   * Executed once before any template is rendered.
   * @param config The options passed to the component
   * @param context The component's parent
   */
  init: function init(config, context) {
    var _this = this;

    this.name = "singlehandleslider";

    var options = utils.extend({}, OPTIONS);
    this.options = utils.extend(options, this.options || {});
    var profiles = utils.extend({}, PROFILES);
    this.profiles = utils.extend(profiles, this.profiles || {});

    //this.template = this.template || require("./brushslider.html");

    this.slider_properties = config.properties || {};
    var roundDigits = this.slider_properties.roundDigits;
    if (roundDigits || roundDigits == 0) {
      this.options.ROUND_DIGITS = roundDigits;
    }
    if (this.slider_properties.domain) {
      this.options.EXTENT_MIN = this.slider_properties.domain[0];
      this.options.EXTENT_MAX = this.slider_properties.domain[1];
    }

    this._super(config, context);
  },


  /**
   * Executes after the template is loaded and rendered.
   * Ideally, it contains HTML instantiations related to template
   * At this point, this.element and this.placeholder are available as a d3 object
   */
  readyOnce: function readyOnce() {
    var _this = this;
    this._super();

    var options = this.options;

    var barWidth = options.BAR_WIDTH;
    var thumbHeight = options.THUMB_HEIGHT;

    this.padding.top = (thumbHeight + options.THUMB_STROKE_WIDTH) * 0.5;
    this.padding.bottom = (thumbHeight + options.THUMB_STROKE_WIDTH) * 0.5 - barWidth;

    var componentWidth = this._getComponentWidth();
    if (componentWidth < 0) componentWidth = 0;

    this.rescaler.domain(this.slider_properties.domain || [this.options.EXTENT_MIN, this.options.EXTENT_MAX]);
    this.rescaler.range(d3.range(0, componentWidth, componentWidth / (this.rescaler.domain().length - 1)).concat([componentWidth]));

    this.sliderEl.call(this.brush.handleSize(options.THUMB_HEIGHT + options.THUMB_STROKE_WIDTH));

    this.sliderEl.selectAll(".w").classed("vzb-hidden", true);
    this.sliderEl.select(".selection").classed("vzb-hidden", true);

    this.sliderEl.select(".overlay").lower().style("stroke-opacity", "0").style("stroke-width", thumbHeight * 0.5 + "px").attr("rx", barWidth * 0.5).attr("ry", barWidth * 0.5);

    this.sliderEl.selectAll(".vzb-slider-thumb-badge").style("stroke-width", this.options.THUMB_STROKE_WIDTH + "px");
  },
  _getBrushEventListeners: function _getBrushEventListeners() {
    var _this2 = this;

    var _this = this;
    var _superListeners = this._super();

    return {
      start: _superListeners.start,
      brush: function brush() {
        if (_this.nonBrushChange || !d3.event.sourceEvent) return;
        if (!_this.slider_properties.suppressInput) {
          _superListeners.brush.apply(_superListeners, arguments);
        } else {
          _this._snap(d3.event.selection);
        }
      },
      end: function end() {
        if (_this.nonBrushChange || !d3.event.sourceEvent) return;
        if (_this.slider_properties.snapValue) {
          _this2._snap(d3.event.selection);
        }
        _this._setFromExtent(true, true); // force a persistent change
      }
    };
  },
  _snap: function _snap(selection) {
    var value = this.rescaler.invert(this._extentToValue(selection));
    var domain = this.rescaler.domain();
    var ascendingDomain = domain[domain.length - 1] > domain[0];
    var next = d3.bisector(d3[ascendingDomain ? "ascending" : "descending"]).left(domain, value) || 1;
    value = (ascendingDomain ? 1 : -1) * (value - domain[next - 1] - (domain[next] - value)) > 0 ? domain[next] : domain[next - 1];
    this._moveBrush(this._valueToExtent(value));
  },
  _createThumbs: function _createThumbs(thumbsEl) {
    var barWidth = this.options.BAR_WIDTH;
    var halfThumbHeight = this.options.THUMB_HEIGHT * 0.5;

    var thumbArc = d3.arc().outerRadius(halfThumbHeight).startAngle(0).endAngle(2 * Math.PI);

    thumbsEl.attr("transform", "translate(" + (halfThumbHeight + this.options.THUMB_STROKE_WIDTH * 0.5) + "," + (halfThumbHeight + this.options.THUMB_STROKE_WIDTH * 0.5) + ")").append("path").attr("d", thumbArc);
  },
  _resize: function _resize() {
    this._super();

    var componentWidth = this._getComponentWidth();
    this.rescaler.range(d3.range(0, componentWidth || 1, componentWidth / (this.rescaler.domain().length - 1) || 1).concat([componentWidth]));
  },
  _valueToExtent: function _valueToExtent(value) {
    return [this.rescaler.domain()[0], value];
  },
  _extentToValue: function _extentToValue(extent) {
    return extent[1];
  },
  _setModel: function _setModel(value, force, persistent) {
    if (this.slider_properties.suppressInput) {
      var _value = this._extentToValue(value).toFixed(this.options.ROUND_DIGITS);
      if (_value == this.model.submodel[this.arg]) return;
    }
    this._super(value, force, persistent);
  }
});

exports.default = SingleHandleSlider;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(18);
var toLength = __webpack_require__(8);
var toAbsoluteIndex = __webpack_require__(41);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 65 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(24);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(25);
var defined = __webpack_require__(28);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(6);
var cof = __webpack_require__(24);
var MATCH = __webpack_require__(7)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(7)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(54);
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(135);
var redefine = __webpack_require__(15);
var hide = __webpack_require__(14);
var fails = __webpack_require__(4);
var defined = __webpack_require__(28);
var wks = __webpack_require__(7);
var regexpExec = __webpack_require__(102);

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(15);
var redefineAll = __webpack_require__(47);
var meta = __webpack_require__(36);
var forOf = __webpack_require__(46);
var anInstance = __webpack_require__(45);
var isObject = __webpack_require__(6);
var fails = __webpack_require__(4);
var $iterDetect = __webpack_require__(69);
var setToStringTag = __webpack_require__(53);
var inheritIfRequired = __webpack_require__(88);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var uid = __webpack_require__(39);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(35) || !__webpack_require__(4)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(3)[K];
});


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(13);
var ctx = __webpack_require__(23);
var forOf = __webpack_require__(46);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * HOOK MODEL
 */

var Marker = _model2.default.extend({
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      select: [],
      highlight: [],
      superHighlight: [],
      opacityHighlightDim: 0.1,
      opacitySelectDim: 0.3,
      opacityRegular: 1,
      limit: 1000,
      allowSelectMultiple: true
    };
    return utils.deepExtend(this._super(), defaults);
  },
  init: function init(name, value, parent, binds, persistent) {
    var _this = this;

    this._type = "marker";
    this._visible = [];

    this._super(name, value, parent, binds, persistent);

    this.on("change", "space", this.setInterModelListeners.bind(this));
  },
  setInterModelListeners: function setInterModelListeners() {
    var _this2 = this;

    utils.forEach(this.getSpace(), function (reference) {
      // make reference to dimension
      _this2._space[reference] = _this2.getClosestModel(reference);
    });
    this._super();
  },


  /**
   * Quietly sets this marker's first entity to have a different dimension,
   * equal to "which" of model that initiated the sync.
   * Needed for example for color legend, when by changing
   * color from one entity set to a different entity set,
   * the legend should request new labels and minimap shapes
   * for the new entity set. Possibly from a different datasource too.
   */
  _receiveSyncModelUpdate: function _receiveSyncModelUpdate(sourceMdl) {
    var conceptType = sourceMdl.getConceptprops().concept_type;
    if (["entity_set", "entity_domain"].includes(conceptType)) {

      var newFilter = {
        dim: sourceMdl.which,
        //copy filter for which matching individual entities
        //otherwise reset filter
        filter: sourceMdl.which === sourceMdl._getFirstDimension() ? utils.clone(sourceMdl.getEntity().filter) : {}
      };
      this.setDataSourceForAllSubhooks(sourceMdl.data);
      this.getFirstEntityModel().set(newFilter, false, false);
    }
  },


  /**
   * A shorthand for one-dimensional situations
   * allows to get quickly to the entity model of this marker
   */
  getFirstEntityModel: function getFirstEntityModel() {
    return this._space[this.space[0]];
  },
  setSpace: function setSpace(newSpace) {
    var _this3 = this;

    var subHooks = Object.keys(this.getSubhooks(true));
    var setProps = {};
    var setWhichProps = {};
    var newDimModels = setProps["space"] = this._root.dimensionManager.getDimensionModelsForSpace(this._space, newSpace);
    var addedDimModels = newDimModels.filter(function (f) {
      return !_this3.space.includes(f);
    });
    addedDimModels.forEach(function (dimensionModel) {
      var dimModel = _this3.getClosestModel(dimensionModel);
      var labelModelName = "label" + dimensionModel.replace(dimModel._type, "");
      var props = { which: dimModel.dim, use: "property" };
      //change which to 'name' if 'name' property available for dimension
      var nameData = _this3._root.dataManager.getAvailableDataForKey(dimModel.dim, "name")[0];
      if (nameData) {
        props.which = nameData.value;
        props.data = nameData.data;
      }
      if (subHooks.includes(labelModelName)) {
        props.spaceRef = dimensionModel;
        setProps[labelModelName] = props;
      } else {
        props.key = [{ concept: dimModel.dim }];
        props.dataSource = props.data;
        props.concept = props.which;
        setWhichProps[labelModelName] = props;
        setProps[labelModelName] = {};
      }
    });
    this.set(setProps);

    utils.forEach(setWhichProps, function (props, hookName) {
      _this3[hookName].setInterModelListeners();
      _this3[hookName].setWhich(props);
    });

    this._dataCube = this.getSubhooks(true);
  },
  getAvailableSpaces: function getAvailableSpaces() {
    var spaces = new Map();
    utils.forEach(this._root._data, function (dataSource) {
      if (dataSource._type !== "data") return;

      var indicatorsDB = dataSource.getConceptprops();

      dataSource.keyAvailability.forEach(function (space, str) {
        if (space.length > 1) {
          // supported dimensions might later depend on tool.
          spaces.set(str, space.map(function (dimension) {
            return indicatorsDB[dimension];
          }));
        }
      });
    });
    return spaces;
  },
  getAvailableData: function getAvailableData() {
    var _this4 = this;

    if (d3.keys(this._space).length === 0) return utils.warn("getAvailableData() is trying to access missing _space items of marker '" + this._name + "' which likely haven't been resoled in time");
    var dimensions = utils.unique(this.space.map(function (dim) {
      return _this4._space[dim].dim;
    }));

    var availability = this._root.dataManager.getAvailabilityForMarkerKey(dimensions);

    // just first dataModel, can lead to problems if first data source doesn't contain dim-concept
    var firstDataModel = this._root.dataManager.getDataModels().values().next().value;
    dimensions.filter(function (dim) {
      return dim != null;
    }).forEach(function (dim) {
      return availability.push({
        key: [firstDataModel.getConceptprops(dim)],
        value: firstDataModel.getConceptprops(dim),
        dataSource: firstDataModel
      });
    });
    availability.push({
      key: [firstDataModel.getConceptprops("_default")],
      value: firstDataModel.getConceptprops("_default"),
      dataSource: firstDataModel
    });

    return availability;
  },
  getAvailableConcept: function getAvailableConcept() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$index = _ref.index,
        index = _ref$index === undefined ? 0 : _ref$index,
        _ref$type = _ref.type,
        type = _ref$type === undefined ? null : _ref$type,
        _ref$includeOnlyIDs = _ref.includeOnlyIDs,
        includeOnlyIDs = _ref$includeOnlyIDs === undefined ? [] : _ref$includeOnlyIDs,
        _ref$excludeIDs = _ref.excludeIDs,
        excludeIDs = _ref$excludeIDs === undefined ? [] : _ref$excludeIDs;

    if (!type && includeOnlyIDs.length == 0 && excludeIDs.length == 0) {
      return null;
    }

    var filtered = this.getAvailableData().filter(function (f) {
      return (!type || !f.value.concept_type || f.value.concept_type === type) && (includeOnlyIDs.length == 0 || includeOnlyIDs.indexOf(f.value.concept) !== -1) && (excludeIDs.length == 0 || excludeIDs.indexOf(f.value.concept) == -1);
    });
    return filtered[index] || filtered[filtered.length - 1];
  },
  setDataSourceForAllSubhooks: function setDataSourceForAllSubhooks(data) {
    var obj = {};
    this.getSubhooks().forEach(function (hook) {
      obj[hook._name] = { data: data };
    });
    this.set(obj, null, false);
  },


  /**
   * Validates the model
   */
  validate: function validate() {
    var _this = this;
    var dimension = this.getDimension();
    var visible_array = this._visible.map(function (d) {
      return d[dimension];
    });

    if (visible_array.length) {
      this.select = this.select.filter(function (f) {
        return visible_array.indexOf(f[dimension]) !== -1;
      });
      this.setHighlight(this.highlight.filter(function (f) {
        return visible_array.indexOf(f[dimension]) !== -1;
      }));
    }
  },


  /**
   * Sets the visible entities
   * @param {Array} arr
   */
  setVisible: function setVisible(arr) {
    this._visible = arr;
  },


  /**
   * Gets the visible entities
   * @returns {Array} visible
   */
  getVisible: function getVisible(arr) {
    return this._visible;
  },


  /**
   * Gets the selected items
   * @returns {Array} Array of unique selected values
   */
  getSelected: function getSelected(dim) {
    return dim ? this.select.map(function (d) {
      return d[dim];
    }) : this.select;
  },
  selectMarker: function selectMarker(d) {
    var _this = this;
    var value = this._createValue(d);
    if (this.isSelected(d)) {
      this.select = this.select.filter(function (d) {
        return JSON.stringify(_this._createValue(d)) !== JSON.stringify(value);
      });
    } else {
      this.select = this.allowSelectMultiple ? this.select.concat(value) : [value];
    }
  },


  /**
   * Select all entities
   */
  selectAll: function selectAll(timeDim, timeFormatter) {
    if (!this.allowSelectMultiple) return;

    var added = void 0;
    var dimensions = utils.unique(this._getAllDimensions({ exceptType: "time" }));

    this.select = this._visible.map(function (d) {
      added = {};
      dimensions.forEach(function (dimension) {
        return added[dimension] = d[dimension];
      });
      return added;
    });
  },
  isSelected: function isSelected(d) {
    var _this = this;
    var value = JSON.stringify(this._createValue(d));

    return this.select.map(function (d) {
      return JSON.stringify(_this._createValue(d)) === value;
    }).indexOf(true) !== -1;
  },
  _createValue: function _createValue(d) {
    var dims = this._getAllDimensions({ exceptType: "time" });
    return dims.reduce(function (value, key) {
      value[key] = d[key];
      return value;
    }, {});
  },


  /**
   * Gets the highlighted items
   * @returns {Array} Array of unique highlighted values
   */
  getHighlighted: function getHighlighted(dim) {
    return dim ? this.highlight.map(function (d) {
      return d[dim];
    }) : this.highlight;
  },
  setHighlight: function setHighlight(arg) {
    if (!utils.isArray(arg)) {
      this.setHighlight([].concat(arg));
      return;
    }
    this.getModelObject("highlight").set(arg, false, false); // highlights are always non persistent changes
  },
  setSuperHighlight: function setSuperHighlight(value) {
    this.getModelObject("superHighlight").set(utils.isArray(value) ? value : [value], false, false);
  },
  clearSuperHighlighted: function clearSuperHighlighted() {
    this.setSuperHighlight([]);
  },
  isSuperHighlighted: function isSuperHighlighted(d) {
    var value = JSON.stringify(this._createValue(d));

    return ~this.superHighlight.findIndex(function (d) {
      return JSON.stringify(d) === value;
    });
  },
  setSelect: function setSelect(arg) {
    if (!utils.isArray(arg)) {
      this.setSelect([].concat(arg));
      return;
    }
    this.getModelObject("select").set(arg);
  },


  //TODO: join the following 3 methods with the previous 3

  /**
   * Highlights an entity from the set
   */
  highlightMarker: function highlightMarker(d) {
    var value = this._createValue(d);
    if (!this.isHighlighted(d)) {
      this.setHighlight(this.highlight.concat(value));
    }
  },


  /**
   * Unhighlights an entity from the set
   */
  unhighlightEntity: function unhighlightEntity(d) {
    var value = this._createValue(d);
    if (this.isHighlighted(d)) {
      this.setHighlight(this.highlight.filter(function (d) {
        return d[dimension] !== value;
      }));
    }
  },


  /**
   * Checks whether an entity is highlighted from the set
   * @returns {Boolean} whether the item is highlighted or not
   */
  isHighlighted: function isHighlighted(d) {
    var _this = this;
    var value = JSON.stringify(this._createValue(d));
    return this.highlight.map(function (d) {
      return JSON.stringify(_this._createValue(d)) === value;
    }).indexOf(true) !== -1;
  },


  /**
   * Clears selection of items
   */
  clearHighlighted: function clearHighlighted() {
    this.setHighlight([]);
  },
  clearSelected: function clearSelected() {
    this.select = [];
  },
  setLabelOffset: function setLabelOffset(d, xy) {
    if (xy[0] === 0 && xy[1] === 1) return;

    var KEYS = utils.unique(this._getAllDimensions({ exceptType: "time" }));
    var KEY = KEYS.join(",");

    this.select.find(function (selectedMarker) {
      return utils.getKey(selectedMarker, KEYS) == d[KEY];
    }).labelOffset = [Math.round(xy[0] * 1000) / 1000, Math.round(xy[1] * 1000) / 1000];

    //force the model to trigger events even if value is the same
    this.set("select", this.select, true);
  },
  getImportantHooks: function getImportantHooks() {
    var importantHooks = [];
    utils.forEach(this._dataCube || this.getSubhooks(true), function (hook, name) {
      if (hook._important) {
        importantHooks.push(name);
      }
    });
    return importantHooks;
  },
  getLabelHookNames: function getLabelHookNames() {
    var _this = this;
    var KEYS = utils.unique(this._getAllDimensions({ exceptType: "time" }));

    return KEYS.reduce(function (result, key) {
      var names = {};
      utils.forEach(_this._dataCube || _this.getSubhooks(true), function (hook, name) {
        if (!hook.isDiscrete()) return;
        if (hook._type === "label" && hook.getEntity().dim === key) {
          names.label = name;
        }
        if (hook._type !== "label" && hook.getEntity().dim === key) {
          names.key = name;
        }
        return !names.label || !names.key;
      });
      var name = names.label || names.key;
      if (name) result[key] = name;
      return result;
    }, {});
  },
  getDataKeysPerHook: function getDataKeysPerHook() {
    var result = {};
    utils.forEach(this._dataCube || this.getSubhooks(true), function (hook, name) {
      result[name] = hook.getDataKeys();
    });
    return result;
  },


  /**
   * Computes the intersection of keys in all hooks: a set of keys that have data in each hook
   * @returns array of keys that have data in all hooks of this._datacube
   */
  getKeys: function getKeys(KEYS) {
    var _this = this;
    var resultKeys = void 0;

    KEYS = KEYS || utils.unique(this._getAllDimensions({ exceptType: "time" }));
    KEYS = Array.isArray(KEYS) ? KEYS : [KEYS];
    var TIME = this._getFirstDimension({ type: "time" });

    var subHooks = this._dataCube || this.getSubhooks(true);

    var hooksPerKey = KEYS.map(function (_) {
      return [];
    });
    var dataSourcePerKey = KEYS.map(function (_) {
      return [];
    });
    //try to find hooks with entity queries for each subkey of KEYS
    utils.forEach(subHooks, function (hook, name) {
      if (hook.use === "property") {
        var keyIndex = KEYS.indexOf(hook.getEntity().dim);
        if (keyIndex !== -1 && !dataSourcePerKey[keyIndex].includes(hook.dataSource)) {
          hooksPerKey[keyIndex].push(hook);
          dataSourcePerKey[keyIndex].push(hook.dataSource);
        }
      }
    });

    //try to get keys from indicators if marker does not have hooks with entity queries
    //in each dataSource for some subkey of KEYS
    utils.forEach(subHooks, function (hook, name) {
      if (hook.use === "indicator") {
        hook.getDataKeys().forEach(function (key) {
          var keyIndex = KEYS.indexOf(key);
          if (keyIndex !== -1 && !dataSourcePerKey[keyIndex].includes(hook.dataSource)) {
            hooksPerKey[keyIndex].push(hook);
          }
        });
      }
    });

    hooksPerKey.forEach(function (hooks, keyIndex) {
      var keys = [];
      hooks.forEach(function (hook) {
        var hookKeys = hook.getDataKeys();
        var hookKeyIndex = hookKeys.indexOf(KEYS[keyIndex]);
        keys = keys.concat(Object.keys(hook.getNestedItems(hookKeys.concat(TIME))).map(function (key) {
          return [JSON.parse(key)[hookKeyIndex]];
        }));
      });
      keys = utils.unique(keys);
      resultKeys = resultKeys ? d3.cross(resultKeys, keys, function (a, b) {
        return a.concat(b);
      }) : keys;
    });

    utils.forEach(subHooks, function (hook, name) {
      // If hook use is constant, then we can provide no additional info about keys
      // We can just hope that we have something else than constants =)
      if (!hook._important || hook.use === "constant") return;

      var hookKEYS = hook.getDataKeys();
      var hookKEYSIndexes = hookKEYS.map(function (key) {
        return KEYS.indexOf(key);
      }).reduce(function (indexes, index, i) {
        if (index !== -1) indexes[i] = index;
        return indexes;
      }, []);

      if (!hookKEYSIndexes.length) return;

      // Get keys in data of this hook
      var nested = hook.getNestedItems(hookKEYS.concat(TIME));
      var noDataPoints = hook.getHaveNoDataPointsPerKey();

      var keys = Object.keys(nested);
      var keysNoDP = Object.keys(noDataPoints || []);

      // Remove the keys with no timepoints
      var keysSizeEqual = KEYS.every(function (key, i) {
        return key === hookKEYS[i];
      });
      var filteredKeys = keys.reduce(function (keys, key) {
        if (keysNoDP.indexOf(key) == -1) keys[JSON.stringify(hookKEYSIndexes.map(function (_, i) {
          return JSON.parse(key)[i];
        }))] = true;
        return keys;
      }, {});

      var resultKeysMapped = resultKeys.map(function (key) {
        return JSON.stringify(hookKEYSIndexes.map(function (index) {
          return key[index];
        }));
      });

      resultKeys = resultKeys.filter(function (_, i) {
        return filteredKeys[resultKeysMapped[i]];
      });
    });

    if (resultKeys.length > _this.limit) {
      utils.warn("MARKER getKeys(): only showing the first " + _this.limit + " markerElements of " + _this._name + ". The rest are not displayed because chart may become slow and crash. Set a higher number in marker.limit or apply entity filters");
      resultKeys = resultKeys.slice(0, _this.limit);
    }
    return resultKeys.map(function (key) {
      var r = {};KEYS.map(function (KEY, i) {
        return r[KEY] = key[i];
      });return r;
    });
  },


  /**
   * @param {Array} entities array of entities
   * @return String
   */
  _getCachePath: function _getCachePath(keys) {
    //array of steps -- names of all frames
    var steps = this._parent.time.getAllSteps();
    var cachePath = this.getClosestModel("locale").id + " - " + steps[0] + " - " + steps[steps.length - 1] + " - step:" + this._parent.time.step;
    this._dataCube = this._dataCube || this.getSubhooks(true);
    var dataLoading = false;
    utils.forEach(this._dataCube, function (hook, name) {
      if (hook._loadCall) dataLoading = true;
      cachePath = cachePath + "_" + hook._dataId + hook.which;
    });
    if (dataLoading) {
      return null;
    }
    if (keys) {
      cachePath = cachePath + "_" + keys.join(",");
    }
    return cachePath;
  },
  _getGrouping: function _getGrouping() {
    var subHooks = this._dataCube || this.getSubhooks(true);
    var space = subHooks[Object.keys(subHooks)[0]]._space;
    var result = {};
    utils.forEach(space, function (entities) {
      if (entities.grouping) {
        result[entities.dim] = { grouping: entities.grouping };
      }
    });
    return utils.isEmpty(result) ? false : result;
  },
  _getAllDimensions: function _getAllDimensions(opts) {

    var models = [];
    var _this = this;
    utils.forEach(this.space, function (name) {
      models.push(_this.getClosestModel(name));
    });

    opts = opts || {};
    var dims = [];
    var dim = void 0;

    utils.forEach(models, function (m) {
      if (opts.exceptType && m.getType() === opts.exceptType) {
        return true;
      }
      if (opts.onlyType && m.getType() !== opts.onlyType) {
        return true;
      }
      if (dim = m.getDimension()) {
        dims.push(dim);
      }
    });

    return dims;
  },


  /**
   * gets first dimension that matches type
   * @param {Object} options
   * @returns {Array} all unique dimensions
   */
  _getFirstDimension: function _getFirstDimension(opts) {
    var models = [];
    var _this = this;
    utils.forEach(this.space, function (name) {
      models.push(_this.getClosestModel(name));
    });

    opts = opts || {};

    var dim = false;
    utils.forEach(models, function (m) {
      if (opts.exceptType && m.getType() !== opts.exceptType) {
        dim = m.getDimension();
        return false;
      } else if (opts.type && m.getType() === opts.type) {
        dim = m.getDimension();
        return false;
      } else if (!opts.exceptType && !opts.type) {
        dim = m.getDimension();
        return false;
      }
    });
    return dim;
  },
  framesAreReady: function framesAreReady() {
    var cachePath = this._getCachePath();
    if (!this.cachedFrames) return false;
    return Object.keys(this.cachedFrames[cachePath]).length == this._parent.time.getAllSteps().length;
  },


  /**
   *
   * @param {String|null} time of a particularly requested data frame. Null if all frames are requested
   * @param {function} cb
   * @param {Array} keys array of entities
   * @return null
   */
  getFrame: function getFrame(time, cb, keys) {
    //keys = null;
    var _this = this;
    if (!this.cachedFrames) this.cachedFrames = {};

    var steps = this._parent.time.getAllSteps();
    // try to get frame from cache without keys
    var cachePath = this._getCachePath();
    if (!cachePath) return cb(null, time);
    if (time && _this.cachedFrames[cachePath] && _this.cachedFrames[cachePath][time]) {
      // if it does, then return that frame directly and stop here
      //QUESTION: can we call the callback and return the frame? this will allow callbackless API too
      return cb(_this.cachedFrames[cachePath][time], time);
    }
    cachePath = this._getCachePath(keys);
    if (!cachePath) return cb(null, time);

    // check if the requested time point has a cached animation frame
    if (time && _this.cachedFrames[cachePath] && _this.cachedFrames[cachePath][time]) {
      // if it does, then return that frame directly and stop here
      //QUESTION: can we call the callback and return the frame? this will allow callbackless API too
      return cb(_this.cachedFrames[cachePath][time], time);
    }

    // if it doesn't (the requested time point falls between animation frames or frame is not cached yet)
    // check if interpolation makes sense: we've requested a particular time and we have more than one frame
    if (time && steps.length > 1) {

      //find the next frame after the requested time point
      var nextFrameIndex = d3.bisectLeft(steps, time);

      if (!steps[nextFrameIndex]) {
        utils.warn("The requested frame is out of range: " + time);
        cb(null, time);
        return null;
      }

      //if "time" doesn't hit the frame precisely
      if (steps[nextFrameIndex].toString() != time.toString()) {

        //interpolate between frames and fire the callback
        this._interpolateBetweenFrames(time, nextFrameIndex, steps, function (response) {
          cb(response, time);
        }, keys);
        return null;
      }
    }

    //QUESTION: we don't need any further execution after we called for interpolation, right?
    //request preparing the data, wait until it's done
    _this.getFrames(time, keys).then(function () {
      if (!time && _this.cachedFrames[cachePath]) {
        //time can be null: then return all frames
        return cb(_this.cachedFrames[cachePath], time);
      } else if (_this.cachedFrames[cachePath] && _this.cachedFrames[cachePath][time]) {
        //time can be !null: then a particular frame calculation was forced and now it's done
        return cb(_this.cachedFrames[cachePath][time], time);
      }
      utils.warn("marker.js getFrame: Data is not available for frame: " + time);
      return cb(null, time);
    });
  },
  _interpolateBetweenFrames: function _interpolateBetweenFrames(time, nextFrameIndex, steps, cb, keys) {
    var _this = this;

    if (nextFrameIndex == 0) {
      //getFrame makes sure the frane is ready because a frame with non-existing data might be adressed
      this.getFrame(steps[nextFrameIndex], function (values) {
        return cb(values);
      }, keys);
    } else {
      var prevFrameTime = steps[nextFrameIndex - 1];
      var nextFrameTime = steps[nextFrameIndex];

      //getFrame makes sure the frane is ready because a frame with non-existing data might be adressed
      this.getFrame(prevFrameTime, function (pValues) {
        _this.getFrame(nextFrameTime, function (nValues) {
          var fraction = (time - prevFrameTime) / (nextFrameTime - prevFrameTime);
          var dataBetweenFrames = {};

          //loop across the hooks
          utils.forEach(pValues, function (values, hook) {
            dataBetweenFrames[hook] = {};

            //loop across the entities
            utils.forEach(values, function (val1, key) {
              var val2 = nValues[hook][key];
              if (utils.isDate(val1)) {
                dataBetweenFrames[hook][key] = time;
              } else if (!utils.isNumber(val1)) {
                //we can be interpolating string values
                dataBetweenFrames[hook][key] = val1;
              } else {
                //interpolation between number and null should rerurn null, not a value in between (#1350)
                dataBetweenFrames[hook][key] = val1 == null || val2 == null ? null : val1 + (val2 - val1) * fraction;
              }
            });
          });
          cb(dataBetweenFrames);
        }, keys);
      }, keys);
    }
  },
  getFrames: function getFrames(forceFrame, selected) {
    var _this = this;
    if (!this.cachedFrames) this.cachedFrames = {};

    var KEYS = utils.unique(this._getAllDimensions({ exceptType: "time" }));
    var TIME = this._getFirstDimension({ type: "time" });

    if (!this.frameQueues) this.frameQueues = {}; //static queue of frames
    if (!this.partialResult) this.partialResult = {};

    //array of steps -- names of all frames
    var steps = this._parent.time.getAllSteps();

    var cachePath = this._getCachePath(selected);
    if (!cachePath) return new Promise(function (resolve, reject) {
      resolve();
    });
    //if the collection of frames for this data cube is not scheduled yet (otherwise no need to repeat calculation)
    if (!this.frameQueues[cachePath] || !(this.frameQueues[cachePath] instanceof Promise)) {

      //this is a promise nobody listens to - it prepares all the frames we need without forcing any
      this.frameQueues[cachePath] = new Promise(function (resolve, reject) {

        _this.partialResult[cachePath] = {};
        _this.partialResult[cachePath].timeOrConstantHooks = [];
        steps.forEach(function (t) {
          _this.partialResult[cachePath][t] = {};
        });

        var deferredHooks = [];
        // Assemble data from each hook. Each frame becomes a vector containing the current configuration of hooks.
        // frame -> hooks -> entities: values
        utils.forEach(_this._dataCube, function (hook, name) {
          if (hook.use === "constant" || hook.which === TIME) {
            //data from hooks with use 'constant' or which 'time dimension' will be filled last
            _this.partialResult[cachePath].timeOrConstantHooks.push({ name: name, which: hook.which });
          } else if (KEYS.includes(hook.which)) {
            //special case: fill data with keys to data itself
            var items = hook.getValidItems();
            steps.forEach(function (t) {
              _this.partialResult[cachePath][t][name] = {};
              items.forEach(function (item) {
                _this.partialResult[cachePath][t][name][item[hook.which]] = item[hook.which];
              });
            });
          } else {
            //calculation of async frames is taken outside the loop
            //hooks with real data that needs to be fetched from datamanager
            deferredHooks.push(hook);
          }
        });

        //check if we have any data to get from datamanager
        if (deferredHooks.length > 0) {
          var promises = [];
          utils.forEach(deferredHooks, function (hook) {
            promises.push(new Promise(function (res, rej) {
              // need to save the hook state before calling getFrames.
              // `hook` state might change between calling and resolving the call.
              // The result needs to be saved to the correct cache, so we need to save current hook state
              var currentHookState = {
                name: hook._name,
                which: hook.which
              };
              hook.getFrames(steps, selected).then(function (response) {
                utils.forEach(response, function (frame, t) {
                  _this.partialResult[cachePath][t][currentHookState.name] = frame[currentHookState.which];
                });
                res();
              });
            }));
          });
          Promise.all(promises).then(function () {
            fillFromTimeOrConstantHooks();
            _this.cachedFrames[cachePath] = _this.partialResult[cachePath];
            resolve();
          });
        } else {
          fillFromTimeOrConstantHooks();
          _this.cachedFrames[cachePath] = _this.partialResult[cachePath];
          resolve();
        }
      });
    }
    return new Promise(function (resolve, reject) {
      if (steps.length < 2 || !forceFrame) {
        //wait until the above promise is resolved, then resolve the current promise
        _this.frameQueues[cachePath].then(function () {
          resolve(); //going back to getFrame(), to ".then"
        });
      } else {
        var promises = [];
        utils.forEach(_this._dataCube, function (hook, name) {
          //exception: we know that these are knonwn, no need to calculate these
          if (hook.use !== "constant" && !KEYS.includes(hook.which) && hook.which !== TIME) {
            (function (_hook, _name) {
              promises.push(new Promise(function (res, rej) {
                _hook.getFrame(steps, forceFrame, selected).then(function (response) {
                  _this.partialResult[cachePath][forceFrame][_name] = response[forceFrame][_hook.which];
                  res();
                });
              }));
            })(hook, name); //isolate this () code with its own hook and name
          }
        });
        if (promises.length > 0) {
          Promise.all(promises).then(function () {
            fillFromTimeOrConstantHooks();
            if (!_this.cachedFrames[cachePath]) {
              _this.cachedFrames[cachePath] = {};
            }
            _this.cachedFrames[cachePath][forceFrame] = _this.partialResult[cachePath][forceFrame];
            resolve();
          });
        } else {
          resolve();
        }
      }
    });

    function fillFromTimeOrConstantHooks() {
      if (!_this.partialResult[cachePath].timeOrConstantHooks) return;

      var timeOrConstantHooks = _this.partialResult[cachePath].timeOrConstantHooks;
      // Assemble the list of keys as an intersection of keys in all queries of all hooks

      var keys = _this.getKeys();

      //special case: fill data with time points or fill data with constant values
      timeOrConstantHooks.forEach(function (_ref2) {
        var which = _ref2.which,
            name = _ref2.name;

        var isTimeWhich = which === TIME;
        steps.forEach(function (t) {
          _this.partialResult[cachePath][t][name] = {};
          keys.forEach(function (key) {
            _this.partialResult[cachePath][t][name][utils.getKey(key, KEYS)] = isTimeWhich ? new Date(t) : which;
          });
        });
      });
      delete _this.partialResult[cachePath].timeOrConstantHooks;
    }
  },
  listenFramesQueue: function listenFramesQueue(keys, cb) {
    var _this = this;
    var KEYS = utils.unique(this._getAllDimensions({ exceptType: "time" }));
    var TIME = this._getFirstDimension({ type: "time" });
    var steps = this._parent.time.getAllSteps();
    var preparedFrames = {};
    this.getFrames();
    var dataIds = [];

    var stepsCount = steps.length;
    var isDataLoaded = false;

    utils.forEach(_this._dataCube, function (hook, name) {
      if (!(hook.use === "constant" || KEYS.includes(hook.which) || hook.which === TIME)) {
        if (!dataIds.includes(hook._dataId)) {
          dataIds.push(hook._dataId);

          hook.dataSource.listenFrame(hook._dataId, steps, keys, function (dataId, time) {
            var keyName = time.toString();
            if (typeof preparedFrames[keyName] === "undefined") preparedFrames[keyName] = [];
            if (!preparedFrames[keyName].includes(dataId)) preparedFrames[keyName].push(dataId);
            if (preparedFrames[keyName].length === dataIds.length) {
              if (!isDataLoaded && stepsCount === Object.keys(preparedFrames).length) {
                isDataLoaded = true;
                _this.trigger("dataLoaded");
              }

              cb(time);
            }
          });
        }
      }
    });
  },
  getEntityLimits: function getEntityLimits(entity) {
    var _this = this;
    var timePoints = this._parent.time.getAllSteps();
    var selectedEdgeTimes = [];
    var hooks = [];
    utils.forEach(_this.getSubhooks(), function (hook) {
      if (hook.use == "constant") return;
      if (hook._important) hooks.push(hook._name);
    });

    var findEntityWithCompleteHooks = function findEntityWithCompleteHooks(values) {
      if (!values) return false;
      for (var i = 0, j = hooks.length; i < j; i++) {
        if (!(values[hooks[i]][entity] || values[hooks[i]][entity] === 0)) return false;
      }
      return true;
    };

    var findSelectedTime = function findSelectedTime(iterator, findCB) {
      var point = iterator();
      if (point == null) return findCB(point);
      _this.getFrame(timePoints[point], function (values) {
        if (findEntityWithCompleteHooks(values)) {
          findCB(point);
        } else {
          findSelectedTime(iterator, findCB);
        }
      });
    };
    var promises = [];
    promises.push(new Promise(function (resolve, reject) {

      //find startSelected time
      findSelectedTime(function () {
        var max = timePoints.length;
        var i = 0;
        return function () {
          return i < max ? i++ : null;
        };
      }(), function (point) {
        selectedEdgeTimes[0] = timePoints[point];
        resolve();
      });
    }));

    promises.push(new Promise(function (resolve, reject) {

      //find endSelected time
      findSelectedTime(function () {
        var i = timePoints.length - 1;
        return function () {
          return i >= 0 ? i-- : null;
        };
      }(), function (point) {
        selectedEdgeTimes[1] = timePoints[point];
        resolve();
      });
    }));

    return Promise.all(promises).then(function () {
      return { "min": selectedEdgeTimes[0], "max": selectedEdgeTimes[1] };
    });
  },
  getCompoundLabelText: function getCompoundLabelText(d, values) {
    var DATAMANAGER = this._root.dataManager;
    var KEYS = utils.unique(this._getAllDimensions({ exceptType: "time" }));
    var labelNames = this.getLabelHookNames();

    var text = KEYS.filter(function (key) {
      return d[key] !== DATAMANAGER.getConceptProperty(key, "totals_among_entities");
    }).map(function (key) {
      return values[labelNames[key]] && values[labelNames[key]][d[key]] || d[key];
    }).join(", ");

    if (text === "") text = this._root.locale.getTFunction()("hints/grandtotal");

    return text;
  },


  /**
   * Learn what this model should hook to
   * @returns {Array} space array
   */
  getSpace: function getSpace() {
    if (utils.isArray(this.space)) {
      return this.space;
    }

    utils.error('ERROR: space not found.\n You must specify the objects this hook will use under the "space" attribute in the state.\n Example:\n space: ["entities", "time"]');
  }
});

exports.default = Marker;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI BUBBLE SIZE slider
 * Reusable bubble size slider
 */

var OPTIONS = {
  EXTENT_MIN: 0,
  EXTENT_MAX: 1,
  BAR_WIDTH: 6,
  THUMB_HEIGHT: 20,
  THUMB_STROKE_WIDTH: 4,
  INTRO_DURATION: 250,
  ROUND_DIGITS: 2
};

var PROFILES = {
  "small": {},
  "medium": {},
  "large": {}
};

var BrushSlider = _component2.default.extend({

  /**
   * Initializes the timeslider.
   * Executed once before any template is rendered.
   * @param config The options passed to the component
   * @param context The component's parent
   */
  init: function init(config, context) {
    var _this = this;

    this.name = this.name || "brushslider";

    var options = utils.extend({}, OPTIONS);
    this.options = utils.extend(options, this.options || {});
    var profiles = utils.extend({}, PROFILES);
    this.profiles = utils.extend(profiles, this.profiles || {});

    this.template = this.template || __webpack_require__(406);

    this.arg = config.arg || "extent";

    this.model_expects = this.model_expects || [{
      name: "submodel"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.model_binds = this.model_binds || {};
    if (!this.model_binds["ready"]) {
      this.model_binds["ready"] = this.readyHandler.bind(this);
    }
    if (!this.model_binds["change:submodel." + this.arg]) {
      this.model_binds["change:submodel." + this.arg] = this.changeHandler.bind(this);
    }

    this._setModel = utils.throttle(this._setModel, 50);
    //contructor is the same as any component
    this._super(config, context);
  },
  changeHandler: function changeHandler(evt, path) {
    var extent = this._valueToExtent(this.model.submodel[this.arg]) || [this.options.EXTENT_MIN, this.options.EXTENT_MAX];
    this._moveBrush(extent);
  },
  readyHandler: function readyHandler(evt) {},


  /**
   * Executes after the template is loaded and rendered.
   * Ideally, it contains HTML instantiations related to template
   * At this point, this.element and this.placeholder are available as a d3 object
   */
  readyOnce: function readyOnce() {
    var _this = this;

    this.element = d3.select(this.element);
    this.sliderSvg = this.element.select(".vzb-slider-svg");
    this.sliderWrap = this.sliderSvg.select(".vzb-slider-wrap");
    this.sliderEl = this.sliderWrap.select(".vzb-slider").classed("vzb-slider-" + this.name, true);
    var options = this.options;

    var barWidth = options.BAR_WIDTH;
    var halfThumbHeight = options.THUMB_HEIGHT * 0.5;

    var padding = this.padding = {
      top: barWidth * 0.5,
      left: halfThumbHeight,
      right: halfThumbHeight,
      bottom: halfThumbHeight + options.THUMB_STROKE_WIDTH
    };

    var componentWidth = this._getComponentWidth() || 0;
    if (componentWidth < 0) componentWidth = 0;

    this.rescaler = d3.scaleLinear().domain([options.EXTENT_MIN, options.EXTENT_MAX]).range([0, componentWidth]).clamp(true);

    this.brushEventListeners = this._getBrushEventListeners();

    this.brush = d3.brushX().handleSize(halfThumbHeight * 2 + barWidth * 2).on("start", this.brushEventListeners.start).on("brush", this.brushEventListeners.brush).on("end", this.brushEventListeners.end);

    this.sliderThumbs = this.sliderEl.selectAll(".handle").data([{ type: "w" }, { type: "e" }], function (d) {
      return d.type;
    }).enter().append("svg").attr("class", function (d) {
      return "handle handle--" + d.type + " " + d.type;
    }).classed("vzb-slider-thumb", true);

    this._createThumbs(this.sliderThumbs.append("g").attr("class", "vzb-slider-thumb-badge"));

    this.sliderEl.call(_this.brush);

    this.sliderEl.selectAll(".selection,.overlay").attr("height", barWidth).attr("rx", barWidth * 0.25).attr("ry", barWidth * 0.25).attr("transform", "translate(0," + -barWidth * 0.5 + ")");

    this.on("resize", function () {
      _this._resize();
      _this._updateView();
    });
  },
  ready: function ready() {
    this.isRTL = this.model.locale.isRTL();
    this._resize();
    this._updateView();
  },
  _getBrushEventListeners: function _getBrushEventListeners() {
    var _this = this;

    return {
      start: function start() {
        if (_this.nonBrushChange || !d3.event.sourceEvent) return;
        if (d3.event.selection && d3.event.selection[0] == d3.event.selection[1]) {
          var brushDatum = _this.sliderEl.node().__brush;
          brushDatum.selection[1][0] += 0.01;
        }
        _this._setFromExtent(false, false, false);
      },
      brush: function brush() {
        if (_this.nonBrushChange || !d3.event.sourceEvent) return;
        if (d3.event.selection && d3.event.selection[0] == d3.event.selection[1]) {
          var brushDatum = _this.sliderEl.node().__brush;
          brushDatum.selection[1][0] += 0.01;
        }
        _this._setFromExtent(true, false, false); // non persistent change
      },
      end: function end() {
        if (_this.nonBrushChange || !d3.event.sourceEvent) return;
        _this._setFromExtent(true, true); // force a persistent change
      }
    };
  },
  _createThumbs: function _createThumbs(thumbsEl) {
    var barWidth = this.options.BAR_WIDTH;
    var halfThumbHeight = this.options.THUMB_HEIGHT * 0.5;
    thumbsEl.append("path").attr("d", "M" + (halfThumbHeight + barWidth) + " " + (halfThumbHeight + barWidth * 1.5) + "l" + -halfThumbHeight + " " + halfThumbHeight * 1.5 + "h" + halfThumbHeight * 2 + "Z");
  },
  _updateThumbs: function _updateThumbs(extent) {},
  _updateSize: function _updateSize() {
    var svgWidth = this._getComponentWidth() + this.padding.left + this.padding.right;

    this.sliderSvg.attr("height", this._getComponentHeight() + this.padding.top + this.padding.bottom).attr("width", svgWidth);
    this.sliderWrap.attr("transform", this.isRTL ? "translate(" + (svgWidth - this.padding.right) + "," + this.padding.top + ") scale(-1,1)" : "translate(" + this.padding.left + "," + this.padding.top + ")");
  },

  /*
   * RESIZE:
   * Executed whenever the container is resized
   */
  _resize: function _resize() {
    this._updateSize();

    var componentWidth = this._getComponentWidth();
    this.rescaler.range([0, componentWidth]);
  },
  _getComponentWidth: function _getComponentWidth() {
    var width = this.element.node().offsetWidth - this.padding.left - this.padding.right;
    return width < 0 ? 0 : width;
  },
  _getComponentHeight: function _getComponentHeight() {
    return this.options.BAR_WIDTH;
  },
  _updateView: function _updateView() {
    this.sliderEl.call(this.brush.extent([[0, 0], [this._getComponentWidth(), this._getComponentHeight()]]));
    var extent = this._valueToExtent(this.model.submodel[this.arg]) || [this.options.EXTENT_MIN, this.options.EXTENT_MAX];
    this._moveBrush(extent);
  },
  _moveBrush: function _moveBrush(s) {
    var _s = s.map(this.rescaler);
    this.nonBrushChange = true;
    this.sliderEl.call(this.brush.move, [_s[0], _s[1] + 0.01]);
    this.nonBrushChange = false;
    this._setFromExtent(false, false, false);
  },
  _valueToExtent: function _valueToExtent(value) {
    return value;
  },
  _extentToValue: function _extentToValue(extent) {
    return extent;
  },


  /**
   * Prepares setting of the current model with the values from extent.
   * @param {boolean} set model
   * @param {boolean} force force firing the change event
   * @param {boolean} persistent sets the persistency of the change event
   */
  _setFromExtent: function _setFromExtent(setModel, force, persistent) {
    var s = d3.brushSelection(this.sliderEl.node());
    if (!s) return;
    s = [this.rescaler.invert(s[0]), this.rescaler.invert(+s[1].toFixed(1))];
    this._updateThumbs(s);
    if (setModel) this._setModel(s, force, persistent);
  },


  /**
   * Sets the current value in model. avoid updating more than once in framerate
   * @param {number} value
   * @param {boolean} force force firing the change event
   * @param {boolean} persistent sets the persistency of the change event
   */
  _setModel: function _setModel(value, force, persistent) {
    var roundDigits = this.options.ROUND_DIGITS;
    value = [+value[0].toFixed(roundDigits), +value[1].toFixed(roundDigits)];
    var newValue = {};
    newValue[this.arg] = this._extentToValue(value);
    this.model.submodel.set(newValue, force, persistent);
  }
});

exports.default = BrushSlider;

/***/ }),
/* 80 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
var document = __webpack_require__(3).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var core = __webpack_require__(22);
var LIBRARY = __webpack_require__(35);
var wksExt = __webpack_require__(117);
var defineProperty = __webpack_require__(10).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(58)('keys');
var uid = __webpack_require__(39);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 84 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(3).document;
module.exports = document && document.documentElement;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(6);
var anObject = __webpack_require__(2);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(23)(Function.call, __webpack_require__(19).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
var setPrototypeOf = __webpack_require__(86).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(25);
var defined = __webpack_require__(28);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 90 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 91 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(35);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(15);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(56);
var $iterCreate = __webpack_require__(93);
var setToStringTag = __webpack_require__(53);
var getPrototypeOf = __webpack_require__(20);
var ITERATOR = __webpack_require__(7)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(42);
var descriptor = __webpack_require__(38);
var setToStringTag = __webpack_require__(53);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(14)(IteratorPrototype, __webpack_require__(7)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(68);
var defined = __webpack_require__(28);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(7)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(56);
var ITERATOR = __webpack_require__(7)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(10);
var createDesc = __webpack_require__(38);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(54);
var ITERATOR = __webpack_require__(7)('iterator');
var Iterators = __webpack_require__(56);
module.exports = __webpack_require__(22).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(285);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(41);
var toLength = __webpack_require__(8);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(37);
var step = __webpack_require__(134);
var Iterators = __webpack_require__(56);
var toIObject = __webpack_require__(18);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(92)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(61);

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(67)(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(23);
var invoke = __webpack_require__(124);
var html = __webpack_require__(85);
var cel = __webpack_require__(81);
var global = __webpack_require__(3);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(24)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var macrotask = __webpack_require__(104).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(24)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(13);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var DESCRIPTORS = __webpack_require__(9);
var LIBRARY = __webpack_require__(35);
var $typed = __webpack_require__(74);
var hide = __webpack_require__(14);
var redefineAll = __webpack_require__(47);
var fails = __webpack_require__(4);
var anInstance = __webpack_require__(45);
var toInteger = __webpack_require__(25);
var toLength = __webpack_require__(8);
var toIndex = __webpack_require__(144);
var gOPN = __webpack_require__(43).f;
var dP = __webpack_require__(10).f;
var arrayFill = __webpack_require__(100);
var setToStringTag = __webpack_require__(53);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var getDepth = function getDepth(key) {
  return key.match(/\//g).length;
};

var requireAll = function requireAll(_require, depth) {
  var keys = _require.keys();

  if (depth) {
    keys = keys.filter(typeof depth === "function" ? function (key) {
      return depth(getDepth(key));
    } : function (key) {
      return getDepth(key) === depth + 1;
    });
  }

  return keys.reduce(function (result, key) {
    var name = /([^/]+)\..+$/.exec(key)[1];

    try {
      var required = _require(key);
      result[name] = required.default || required;
    } catch (err) {
      console.warn("Import error", key, err);
    }

    return result;
  }, {});
};

exports.default = requireAll;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI Axis Model (hook)
 */

var AxisModel = _hook2.default.extend({

  //some hooks can be important. like axis x and y
  //that means, if X or Y doesn't have data at some point, we can't show markers
  _important: true,

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null,
      domainMin: null,
      domainMax: null,
      zoomedMin: null,
      zoomedMax: null,
      fixBaseline: null,
      scaleType: "linear",
      allow: {
        scales: ["linear", "log", "genericLog", "time", "pow"]
      }
    };
    return utils.deepExtend(this._super(), defaults);
  },
  autoconfigureModel: function autoconfigureModel(autoconfigResult) {
    if (!this.which && this.autoconfig && this._type === "axis") {
      autoconfigResult = this._parent.getAvailableConcept(this.autoconfig) || this._parent.getAvailableConcept({ type: "time" });
    }
    this._super(autoconfigResult);
  },


  _type: "axis",

  /**
   * Validates a color hook
   */
  validate: function validate() {
    this._super();

    //restore the correct object type for time values
    if (this.scale && this.scaleType == "time") {
      var obj = {};
      if (this.zoomedMin != null && !utils.isDate(this.zoomedMin)) obj.zoomedMin = this._space.time.parse(this.zoomedMin.toString());
      if (this.zoomedMax != null && !utils.isDate(this.zoomedMax)) obj.zoomedMax = this._space.time.parse(this.zoomedMax.toString());
      this.set(obj);
    }
  },


  /**
   * Gets the domain for this hook
   * @returns {Array} domain
   */
  buildScale: function buildScale() {
    var scaleType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scaleType;

    var domain = void 0;

    if (scaleType == "time") {

      var timeMdl = this._space.time;
      var limits = timeMdl.splash ? { min: timeMdl.parse(timeMdl.startOrigin), max: timeMdl.parse(timeMdl.endOrigin) } : { min: timeMdl.start, max: timeMdl.end };

      domain = [limits.min, limits.max];
      this.scale = d3.scaleUtc().domain(domain);
    } else {
      var _limits = void 0;
      if (!this.isDiscrete()) {
        _limits = this.getLimits(this.which);
        //default domain is based on limits
        domain = [_limits.min, _limits.max];
        //fixBaseline can override the domain if defined and if limits.min isn't negative
        domain[0] = (this.fixBaseline || this.fixBaseline === 0) && _limits.min > 0 ? +this.fixBaseline : domain[0];
        //min and max can further override the domain if defined
        domain[0] = this.domainMin != null ? +this.domainMin : domain[0];
        domain[1] = this.domainMax != null ? +this.domainMax : domain[1];
      } else {
        domain = this.use === "constant" ? [this.which] : this.getUnique(this.which);
      }

      scaleType = d3.min(domain) <= 0 && d3.max(domain) >= 0 && scaleType === "log" ? "genericLog" : scaleType;

      var _scaleType = (scaleType === "ordinal" ? "point" : scaleType) || "linear";
      this.scale = d3["scale" + utils.capitalize(_scaleType)]().domain(domain);
      if (this.scale.constant) {
        this.scale.constant(_limits.minAbsNear0);
      }
    }

    this.scaleType = scaleType;
  },


  /**
   * Formats date according to time in this hook's space
   * @param {Date} date object to format
   * @returns {String} formatted date
   */
  formatDate: function formatDate(dateObject) {
    // improvement would be to check concept type of each space-dimension if it's time.
    // Below code works as long we have one time model: time.
    return this._space.time.formatDate(dateObject);
  },
  _getZoomed: function _getZoomed(type) {
    var zoomed = this["zoomed" + type];
    return zoomed !== null ? zoomed : d3[type.toLowerCase()](this.getScale().domain());
  },
  getZoomedMin: function getZoomedMin() {
    return this._getZoomed("Min");
  },
  getZoomedMax: function getZoomedMax() {
    return this._getZoomed("Max");
  }
});

exports.default = AxisModel;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

var _reader = __webpack_require__(111);

var _reader2 = _interopRequireDefault(_reader);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

var _datastorage = __webpack_require__(400);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * VIZABI Data Model (model.data)
 */

var DataModel = _model2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      reader: "inline"
    };
    return utils.deepExtend(this._super(), defaults);
  },


  trackInstances: true,

  /**
   * Initializes the data model.
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {

    this._type = "data";

    this.queryQueue = {};
    this._collection = {};
    this._collectionPromises = {}; // stores promises, making sure we don't do one calulation twice

    //same constructor as parent, with same arguments
    this._super(name, values, parent, bind);

    this.readerObject = this.getReader();
  },


  /**
   * Loads concept properties when all other models are also starting to load data
   * @return {Promise} Promise which resolves when concepts are loaded
   */
  preloadData: function preloadData() {
    return this.loadDataAvailability().then(this.loadConceptProps.bind(this));
  },


  /**
   * Loads resource from reader or cache
   * @param {Array} query Array with queries to be loaded
   * @param {Object} parsers An object with concepts as key and parsers as value
   * @param {*} evts ?
   */
  load: function load(query) {
    var _this = this;

    var parsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var sideLoad = arguments[2];

    // deep clone to prevent one query sent to multiple data objects being manipulated cross-data model.
    // For example one query sent to two different waffle server datasets.
    query = utils.deepClone(query);
    // add waffle server specific query clauses if set
    if (this.dataset) query.dataset = this.dataset;
    if (this.version) query.version = this.version;
    var dataId = _datastorage.DataStorage.getDataId(query, this.readerObject, parsers);
    if (dataId) {
      if (!query.grouping) return Promise.resolve(dataId);
      return _datastorage.DataStorage.aggregateData(dataId, query, this.readerObject, this.getConceptprops());
    }
    utils.timeStamp("Vizabi Data: Loading Data");
    if (!sideLoad) {
      _events2.default.freezeAll(["hook_change", "resize"]);
    }

    return _datastorage.DataStorage.loadFromReader(query, parsers, this.readerObject).then(function (dataId) {
      if (!query.grouping) return dataId;
      return _datastorage.DataStorage.aggregateData(dataId, query, _this.readerObject, _this.getConceptprops());
    }).then(function (dataId) {
      if (!sideLoad) _events2.default.unfreezeAll();
      return dataId;
    }).catch(function (error) {
      if (!sideLoad) _events2.default.unfreezeAll();
      _this.handleLoadError(error);
    });
  },
  getAsset: function getAsset(assetName, callback) {
    var _this2 = this;

    return this.readerObject.getAsset(assetName).then(function (response) {
      return callback(response);
    }).catch(function (error) {
      return _this2.handleLoadError(error);
    });
  },
  getReader: function getReader() {
    // Create a new reader for this query
    var readerClass = _reader2.default.get(this.reader);
    if (!readerClass) {
      throw new Error("Unknown reader: " + this.reader);
    }

    return new readerClass(this.getPlainObject());
  },


  /**
   * get data
   */
  getData: function getData(dataId, what, whatId, args) {
    // if not specified data from what query, return nothing
    if (!dataId) return utils.warn("Data.js 'get' method doesn't like the dataId you gave it: " + dataId);
    return _datastorage.DataStorage.getData(dataId, what, whatId, args);
  },
  loadDataAvailability: function loadDataAvailability() {
    var _this3 = this;

    var conceptsQuery = {
      select: {
        key: ["key", "value"],
        value: []
      },
      from: "concepts.schema"
    };
    var entitiesQuery = utils.extend({}, conceptsQuery, { from: "entities.schema" });
    var datapointsQuery = utils.extend({}, conceptsQuery, { from: "datapoints.schema" });

    return Promise.all([this.load(conceptsQuery), this.load(entitiesQuery), this.load(datapointsQuery)]).then(this.handleDataAvailabilityResponse.bind(this)).catch(function (error) {
      return _this3.handleLoadError(error);
    });
  },
  handleDataAvailabilityResponse: function handleDataAvailabilityResponse(dataIds) {
    var _this4 = this;

    this.keyAvailability = new Map();
    this.dataAvailability = [];
    dataIds.forEach(function (dataId) {
      var collection = _this4.getData(dataId, "query").from.split(".")[0];
      _this4.dataAvailability[collection] = [];
      _this4.getData(dataId).forEach(function (kvPair) {
        var key = (typeof kvPair.key === "string" ? JSON.parse(kvPair.key) : kvPair.key).sort(); // sort to get canonical form (can be removed when reader gives back canonical)

        _this4.dataAvailability[collection].push({
          key: new Set(key),
          value: kvPair.value
        });

        _this4.keyAvailability.set(key.join(","), key);
      });
    });
  },
  loadConceptProps: function loadConceptProps() {
    var _this5 = this;

    // only selecting concept properties which Vizabi needs and are available in dataset
    var vizabiConceptProps = ["concept_type", "domain", "totals_among_entities", "source_url", "source", "color", "scales", "interpolation", "tags", "name", "name_short", "name_catalog", "description", "format"];
    var availableConceptProps = this.dataAvailability.concepts.map(function (m) {
      return m.value;
    });
    var availableVizabiConceptProps = vizabiConceptProps.filter(function (n) {
      return availableConceptProps.includes(n);
    });

    var query = {
      select: {
        key: ["concept"],
        value: availableVizabiConceptProps
      },
      from: "concepts",
      where: {},
      language: this.getClosestModel("locale").id
    };

    return this.load(query).then(this.handleConceptPropsResponse.bind(this)).catch(function (error) {
      return _this5.handleLoadError(error);
    });
  },
  handleConceptPropsResponse: function handleConceptPropsResponse(dataId) {
    var _this6 = this;

    this.conceptDictionary = { _default: { concept: "_default", concept_type: "string", use: "constant", scales: ["ordinal"], tags: "_root" } };
    this.conceptArray = [];

    this.getData(dataId).forEach(function (d) {
      var concept = {};

      concept["concept"] = d.concept;
      concept["concept_type"] = d.concept_type;
      concept["sourceLink"] = d.source_url;
      concept["sourceName"] = d.source;
      try {
        concept["color"] = d.color && d.color !== "" ? typeof d.color === "string" ? JSON.parse(d.color) : d.color : null; //
      } catch (e) {
        concept["color"] = null;
      }
      try {
        concept["scales"] = d.scales && d.color !== "" ? typeof d.scales === "string" ? JSON.parse(d.scales) : d.scales : null;
      } catch (e) {
        concept["scales"] = null;
      }
      if (!concept.scales) {
        switch (d.concept_type) {
          case "measure":
            concept.scales = ["linear", "log"];break;
          case "string":
            concept.scales = ["ordinal"];break;
          case "entity_domain":
            concept.scales = ["ordinal"];break;
          case "entity_set":
            concept.scales = ["ordinal"];break;
          case "boolean":
            concept.scales = ["ordinal"];break;
          case "time":
            concept.scales = ["time"];break;
          default:
            concept.scales = ["linear", "log"];
        }
      }
      if (d.interpolation) {
        concept["interpolation"] = d.interpolation;
      } else if (d.concept_type == "measure") {
        concept["interpolation"] = concept.scales && concept.scales[0] == "log" ? "exp" : "linear";
      } else if (d.concept_type == "time") {
        concept["interpolation"] = "linear";
      } else {
        concept["interpolation"] = "stepMiddle";
      }
      concept["domain"] = d.domain;
      concept["totals_among_entities"] = d.totals_among_entities;
      concept["tags"] = d.tags;
      concept["format"] = d.format;
      concept["name"] = d.name || d.concept || "";
      concept["name_catalog"] = d.name_catalog || "";
      concept["name_short"] = d.name_short || d.name || d.concept || "";
      concept["description"] = d.description;
      _this6.conceptDictionary[d.concept] = concept;
      _this6.conceptArray.push(concept);
    });
  },
  getConceptprops: function getConceptprops(which) {
    if (typeof which !== "undefined") {
      if (!this.conceptDictionary[which]) {
        utils.warn("The concept " + which + " is not found in the dictionary");
        return null;
      }
      return this.conceptDictionary[which];
    }
    return this.conceptDictionary;
  },
  getConcept: function getConcept() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$index = _ref.index,
        index = _ref$index === undefined ? 0 : _ref$index,
        _ref$type = _ref.type,
        type = _ref$type === undefined ? null : _ref$type,
        _ref$includeOnlyIDs = _ref.includeOnlyIDs,
        includeOnlyIDs = _ref$includeOnlyIDs === undefined ? [] : _ref$includeOnlyIDs,
        _ref$excludeIDs = _ref.excludeIDs,
        excludeIDs = _ref$excludeIDs === undefined ? [] : _ref$excludeIDs;

    if (!type && includeOnlyIDs.length == 0 && excludeIDs.length == 0) {
      return null;
    }

    var filtered = this.conceptArray.filter(function (f) {
      return (!type || !f.concept_type || f.concept_type === type) && (includeOnlyIDs.length == 0 || includeOnlyIDs.indexOf(f.concept) !== -1) && (excludeIDs.length == 0 || excludeIDs.indexOf(f.concept) == -1);
    });
    return filtered[index] || filtered[filtered.length - 1];
  },
  getDatasetName: function getDatasetName() {
    if (this.readerObject.getDatasetInfo) {
      var meta = this.readerObject.getDatasetInfo();
      return meta.name + (meta.version ? " " + meta.version : "");
    }
    return this._name.replace("data_", "");
  },
  setGrouping: function setGrouping(dataId, grouping) {
    _datastorage.DataStorage.setGrouping(dataId, grouping);
  },
  getFrames: function getFrames(dataId, framesArray, keys) {
    return _datastorage.DataStorage.getFrames(dataId, framesArray, keys, this.getConceptprops());
  },
  getFrame: function getFrame(dataId, framesArray, neededFrame, keys) {
    //can only be called after getFrames()
    return _datastorage.DataStorage.getFrame(dataId, framesArray, neededFrame, keys);
  },
  listenFrame: function listenFrame(dataId, framesArray, keys, cb) {
    _datastorage.DataStorage.listenFrame(dataId, framesArray, keys, cb);
  },
  handleLoadError: function handleLoadError(error) {
    error.browserDetails = utils.getBrowserDetails();
    error.osName = utils.getOSname();
    error.homepoint = window.location.href;
    error.time = new Date().toString();
    this._super(error);
  }
});

exports.default = DataModel;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Initializes the reader.
 * @param {Object} reader_info Information about the reader
 */
var Reader = _class2.default.extend({

  QUERY_FROM_CONCEPTS: "concepts",
  QUERY_FROM_DATAPOINTS: "datapoints",
  QUERY_FROM_ENTITIES: "entities",
  SCHEMA_QUERY_FROM_CONCEPTS: "concepts.schema",
  SCHEMA_QUERY_FROM_DATAPOINTS: "datapoints.schema",
  SCHEMA_QUERY_FROM_ENTITIES: "entities.schema",

  CONDITION_CALLBACKS: {
    $gt: function $gt(configValue, rowValue) {
      return rowValue > configValue;
    },
    $gte: function $gte(configValue, rowValue) {
      return rowValue >= configValue;
    },
    $lt: function $lt(configValue, rowValue) {
      return rowValue < configValue;
    },
    $lte: function $lte(configValue, rowValue) {
      return rowValue <= configValue;
    },
    $in: function $in(configValue, rowValue) {
      return configValue.includes(rowValue);
    }
  },

  LOGICAL_TEST: {
    $and: "every",
    $or: "some"
  },

  ERRORS: {
    GENERIC_ERROR: "reader/error/generic"
  },

  _name: "reader",

  load: function load() {
    return Promise.resolve({
      rows: [],
      columns: []
    });
  },
  read: function read(query) {
    var _this = this;

    var parsers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var originalQuery = query;
    query = this._normalizeQuery(query, parsers);

    var _query2 = query,
        select = _query2.select,
        from = _query2.from;


    return this.load(parsers).then(function (result) {
      var rows = result.rows,
          columns = result.columns;

      _this._checkTimeParser(columns, parsers);
      _this.ensureDataIsCorrect(result, parsers);

      switch (true) {
        case from === _this.SCHEMA_QUERY_FROM_CONCEPTS:
          return [{ key: ["concept"], value: "concept_type" }];

        case from === _this.SCHEMA_QUERY_FROM_ENTITIES:
          return columns.slice(0, _this.keySize).map(function (key) {
            return { key: [key], value: key };
          });

        case from === _this.SCHEMA_QUERY_FROM_DATAPOINTS:
          {
            var key = columns.slice(0, _this.keySize + 1);
            return columns.slice(_this.keySize + 1).map(function (value) {
              return { key: key, value: value };
            });
          }
        case from === _this.QUERY_FROM_CONCEPTS:
          return _this._getConcepts(columns, _this._mapRows(rows, query, parsers));

        case _this._isDataQuery(from) && select.key.length > 0:
          return _this._getData(rows, query, parsers);

        default:
          return [];
      }
    }).catch(function (error) {
      _this._onLoadError(error);
      if (!utils.find(_this.ERRORS, function (f) {
        return f === error.name;
      })) error = _this.error(_this.ERRORS.GENERIC_ERROR, error);
      if (!error.endpoint) error.endpoint = _this._basepath;
      if (!error.ddfql) error.ddfql = originalQuery;
      if (!error.details) error.details = _this._name;
      throw error;
    });
  },
  ensureDataIsCorrect: function ensureDataIsCorrect() {},
  _checkTimeParser: function _checkTimeParser(columns, parsers) {
    var timeKey = columns[this.keySize];
    if (!parsers[timeKey]) parsers[timeKey] = function (t) {
      return t;
    };
  },
  _normalizeQuery: function _normalizeQuery(_query, parsers) {
    var query = Object.assign({}, _query);
    var _query$where = query.where,
        where = _query$where === undefined ? {} : _query$where,
        _query$join = query.join,
        join = _query$join === undefined ? {} : _query$join;


    if (where.$and) {
      where.$and = where.$and.reduce(function (whereResult, condition) {
        Object.keys(condition).forEach(function (rowKey) {
          var conditionValue = condition[rowKey];

          if (typeof conditionValue === "string" && conditionValue.startsWith("$")) {
            var joinWhere = join[conditionValue].where;

            Object.keys(joinWhere).forEach(function (joinRowKey) {
              var value = joinWhere[joinRowKey];
              var parser = parsers[joinRowKey];

              whereResult.push(_defineProperty({}, joinRowKey, parser ? (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" ? Object.keys(value).reduce(function (callbackConditions, callbackKey) {
                callbackConditions[callbackKey] = parser(value[callbackKey]);
                return callbackConditions;
              }, {}) : parser(value) : value));
            });
          } else {
            var parser = parsers[rowKey];
            whereResult.push(_defineProperty({}, rowKey, parser ? parser(conditionValue) : conditionValue));
          }
        });

        return whereResult;
      }, []);
    }

    return query;
  },
  _getConcepts: function _getConcepts(columns, rows) {
    var _this2 = this;

    return columns.map(function (concept, index) {
      var result = { concept: concept };

      if (index < _this2.keySize) {
        result.concept_type = "entity_domain";
      } else if (index === _this2.keySize) {
        // the column after is expected to have time
        result.concept_type = "time";
      } else {
        result.concept_type = "measure";

        for (var i = rows.length - 1; i > -1; --i) {
          if (utils.isString(rows[i][concept]) && rows[i][concept] !== "") {
            result.concept_type = "string";

            var _columns = _slicedToArray(columns, 1);

            result.domain = _columns[0];

            break;
          }
        }
      }

      return result;
    });
  },
  _getData: function _getData(rows, query, parsers) {
    var _query$order_by = query.order_by,
        order_by = _query$order_by === undefined ? [] : _query$order_by;

    var _order_by = _slicedToArray(order_by, 1),
        orderBy = _order_by[0];

    return this._mapRows(rows, query, parsers).reduce(this._applyQuery(query), []).sort(function (prev, next) {
      return prev[orderBy] - next[orderBy];
    });
  },
  _isDataQuery: function _isDataQuery(from) {
    return [this.QUERY_FROM_DATAPOINTS, this.QUERY_FROM_ENTITIES].includes(from);
  },
  _mapRows: function _mapRows(rows, query, parsers) {
    return rows.map(this._getRowMapper(query, parsers));
  },
  _getRowMapper: function _getRowMapper(query, parsers) {
    var _this3 = this;

    return function (row) {
      var correct = true;

      var result = Object.keys(row).reduce(function (result, key) {
        if (correct) {
          var defaultValue = row[key];
          var defaultValueString = String(defaultValue).trim();

          var parser = parsers[key];
          var resultValue = !utils.isString(defaultValue) ? defaultValue : parser ? parser(defaultValueString) : _this3._parse(defaultValueString);

          if (!resultValue && resultValue !== 0) {
            if (query.select.key.includes(key)) {
              correct = false;
            }
          } else {
            result[key] = resultValue;
          }
        }

        return result;
      }, {});

      return correct && result;
    };
  },
  _parse: function _parse(value) {
    return value;
  },
  _applyQuery: function _applyQuery(query) {
    var _this4 = this;

    var select = query.select,
        from = query.from;

    var _select$key = _slicedToArray(select.key, 1),
        uniqueKey = _select$key[0];

    var uniqueValues = [];

    return function (result, row) {

      if (row) {
        var unique = row[uniqueKey];
        var isUnique = from !== _this4.QUERY_FROM_ENTITIES || !uniqueValues.includes(unique);
        var isSuitable = _this4._isSuitableRow(query, row);

        if (isSuitable && isUnique) {
          if (from === _this4.QUERY_FROM_ENTITIES) {
            uniqueValues.push(unique);
          }

          var rowFilteredByKeys = Object.keys(row).reduce(function (resultRow, rowKey) {
            if (select.key.includes(rowKey) || select.value.includes(rowKey)) {
              resultRow[rowKey] = row[rowKey];
            }

            return resultRow;
          }, {});

          result.push(rowFilteredByKeys);
        }
      }

      return result;
    };
  },
  _isSuitableRow: function _isSuitableRow(query, row) {
    var _this5 = this;

    var where = query.where;

    return !where || Object.keys(where).every(function (conditionKey) {
      return _this5._testCondition(where[conditionKey], conditionKey, row);
    });
  },
  _testCondition: function _testCondition(condition, conditionKey, row) {
    var _this6 = this;

    var logicalTest = this.LOGICAL_TEST[conditionKey];
    var rowValue = logicalTest ? conditionKey : row[conditionKey];

    // if the column is missing, then don't apply filter
    return typeof rowValue === "undefined" || (condition instanceof Date ? !(+condition - +rowValue) : (typeof condition === "undefined" ? "undefined" : _typeof(condition)) !== "object" ? rowValue === condition
    // resolve booleans via strings
    || condition === true && utils.isString(rowValue) && rowValue.toLowerCase().trim() === "true" || condition === false && utils.isString(rowValue) && rowValue.toLowerCase().trim() === "false" : logicalTest ? condition[logicalTest](function (newCondition) {
      return Object.keys(newCondition).every(function (newConditionKey) {
        return _this6._testCondition(newCondition[newConditionKey], newConditionKey, row);
      });
    }) : Object.keys(condition).every(function (callbackKey) {
      return _this6.CONDITION_CALLBACKS[callbackKey](condition[callbackKey], rowValue, row);
    }));
  },
  _onLoadError: function _onLoadError(error) {},
  error: function error(code, message, payload, query, file) {
    var error = new Error();
    error.name = code;
    error.message = message;
    error.details = payload;
    error.ddfql = query;
    error.endpoint = file;
    return error;
  }
});

exports.default = Reader;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _dataconnected = __webpack_require__(57);

var _dataconnected2 = _interopRequireDefault(_dataconnected);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*!
 * VIZABI Entities Model
 */

var EntitiesModel = _dataconnected2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      show: {},
      showFallback: {},
      showItemsMaxCount: null,
      filter: {},
      dim: null,
      skipFilter: false
    };
    return utils.deepExtend(this._super(), defaults);
  },


  objectLeafs: ["show", "showFallback", "filter", "autoconfig"],
  dataConnectedChildren: ["show", "dim", "grouping"],

  /**
   * Initializes the entities model.
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {

    this._type = "entities";

    this._super(name, values, parent, bind);
  },
  preloadData: function preloadData() {
    this.dataSource = this.getClosestModel(this.data || "data");
    return this._super();
  },
  afterPreload: function afterPreload() {
    this.autoconfigureModel();
  },
  setLinkWith: function setLinkWith(model) {},
  autoconfigureModel: function autoconfigureModel() {
    if (!this.dim && this.autoconfig) {
      var concept = this.dataSource.getConcept(this.autoconfig);

      if (concept) this.dim = concept.concept;
      utils.printAutoconfigResult(this);
    }
  },
  setInterModelListeners: function setInterModelListeners() {
    this.getClosestModel("locale").on("dataConnectedChange", this.handleDataConnectedChange.bind(this));
  },
  validate: function validate() {
    var _this2 = this;

    this._super();
    if (!this.showFallback[this.dim] && !this.showItemsMaxCount) return;

    var dimShowFilter = this.show[this.dim] || this.show.$and && this.show.$and.filter(function (f) {
      return f[_this2.dim];
    })[0];
    if (!dimShowFilter) {
      if (this.showFallback[this.dim]) {
        this.show = _defineProperty({}, this.dim, utils.deepClone(this.showFallback[this.dim]));
      }
    } else if (dimShowFilter.$in && this.showItemsMaxCount && dimShowFilter.$in.length > this.showItemsMaxCount) {
      dimShowFilter.$in.splice(0, dimShowFilter.$in.length - this.showItemsMaxCount);
      this.show = utils.deepClone(this.show);
    }
  },
  handleDataConnectedChange: function handleDataConnectedChange(evt) {
    var _this3 = this;

    //defer is necessary because other events might be queued.
    //load right after such events
    utils.defer(function () {
      _this3.startLoading().catch(utils.warn);
    });
  },
  _isLoading: function _isLoading() {
    return !this._loadedOnce || this._loadCall;
  },
  loadData: function loadData() {
    var _this4 = this;

    this.setReady(false);
    this._loadCall = true;

    var _this = this;

    if (!this.dim) {
      this._entitySets = {};
      this._entitySetsData = {};
      this._entitySetsValues = {};
      return Promise.resolve();
    }

    var dim = this.dim;
    this._entitySets = _defineProperty({}, dim, utils.unique(this._root.dataManager.getAvailableDataForKey(dim, null).filter(function (d) {
      return d.value !== dim && ["entity_set", "entity_domain"].includes(_this4._root.dataManager.getConceptProperty(d.value, "concept_type"));
    }).map(function (d) {
      return d.value;
    })));

    if (!this._entitySets[dim].length) {
      this._entitySetsValues = _defineProperty({}, dim, []);
      this._entitySetsData = _defineProperty({}, dim, {});
      return Promise.resolve();
    }

    var queryAddition = { "language": this.getClosestModel("locale").id };
    var loadPromises = [this._root.dataManager.getDimensionValues(dim, this._entitySets[dim], queryAddition)].concat(this._entitySets[dim].map(function (entitySetName) {
      return _this4._root.dataManager.getDimensionValues(entitySetName, ["name"], queryAddition);
    }));

    return Promise.all(loadPromises).then(function (data) {
      if (_this.dim !== dim) return;
      _this._entitySetsValues = _defineProperty({}, dim, data[0].length > 1 ? utils.unique([].concat(data[0]), function (d) {
        return d[dim];
      }) : data[0]);
      _this._entitySetsData = _defineProperty({}, dim, {});
      _this._entitySets[dim].forEach(function (key, index) {
        _this._entitySetsData[dim][key] = data[index + 1].length > 1 ? utils.unique([].concat(data[index + 1]), function (d) {
          return d[key];
        }) : data[index + 1];
      });
    });
  },
  getEntitySets: function getEntitySets() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

    return this["_entitySets" + utils.capitalize(type)][this.dim];
  },

  /**
   * Gets the dimensions in this entities
   * @returns {String} String with dimension
   */
  getDimension: function getDimension() {
    return this.dim;
  },
  setDimension: function setDimension(dim) {
    if (this.dim === dim) return;
    var props = {};
    props.show = {};
    props.dim = dim;
    this.set(props);
  },

  /**
   * Gets the filter in this entities
   * @returns {Array} Array of unique values
   */
  getFilter: function getFilter() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        entityTypeRequest = _ref.entityTypeRequest;

    var filter = utils.deepClone(this.filter[this.dim] || {});
    if (entityTypeRequest || this.skipFilter) return filter;

    var show = utils.deepClone(this.show);
    if (show[this.dim] && utils.isEmpty(show[this.dim])) {
      delete show[this.dim];
    }

    var $and = [];
    if (!utils.isEmpty(filter)) $and.push(filter);
    if (!utils.isEmpty(show)) $and.push(show);
    if ($and.length > 1) {
      return { $and: $and };
    }

    return $and[0] || {};
  },


  /**
   * Shows or unshows an entity from the set
   */
  showEntity: function showEntity(d) {
    var _this5 = this;

    //clear selected countries when showing something new
    var newShow = utils.deepClone(this.show);
    var dimension = this.getDimension();
    var _d = void 0;

    if (!utils.isArray(d)) {
      _d = [d];
    } else {
      _d = d;
    }

    var showFilter = newShow[dimension] || (newShow.$and || []).filter(function (f) {
      return f[dimension];
    })[0] || { $in: [] };

    utils.forEach(_d, function (d) {
      var value = d[dimension];
      if (_this5.isShown(d)) {
        showFilter["$in"] = showFilter["$in"].filter(function (d) {
          return d !== value;
        });
      } else {
        showFilter["$in"] = showFilter["$in"].concat(value);
      }
    });

    if (showFilter["$in"].length === 0) {
      if (newShow.$and) {
        newShow.$and = newShow.$and.filter(function (f) {
          return !f[dimension];
        });
      } else {
        delete newShow[dimension];
      }
    } else {
      if (newShow.$and) {
        newShow.$and.push(_defineProperty({}, dimension, showFilter));
      } else {
        newShow[dimension] = showFilter;
      }
    }

    this.show = newShow;
  },


  /**
   * Selects an entity from the set
   * @returns {Boolean} whether the item is shown or not
   */
  isShown: function isShown(d) {
    var dimension = this.getDimension();

    var _ref2 = this.show[dimension] || (this.show.$and || []).filter(function (f) {
      return f[dimension];
    })[0] || {},
        _ref2$$in = _ref2.$in,
        $in = _ref2$$in === undefined ? [] : _ref2$$in;

    return $in.includes(d[dimension]);
  },
  isInShowFilter: function isInShowFilter(d, category) {
    var dim = this.getDimension();
    var key = d[dim];
    var filter = (this.show.$and || [this.show]).filter(function (f) {
      return f[category];
    })[0] || {};

    return utils.getProp(filter, [category, "$in"], []).includes(d[category]);
  },


  /**
   * Clears showing of items
   */
  clearShow: function clearShow() {
    var dimension = this.getDimension();
    var show = utils.deepClone(this.show);
    delete show[dimension];
    this.show = show;
  },
  getFilteredEntities: function getFilteredEntities() {
    var dimension = this.getDimension();

    var _ref3 = this.show[dimension] || {},
        _ref3$$in = _ref3.$in,
        $in = _ref3$$in === undefined ? [] : _ref3$$in;

    return $in.map(function (m) {
      return _defineProperty({}, dimension, m);
    });
  },
  isEntities: function isEntities() {
    return true;
  }
});

exports.default = EntitiesModel;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  build: 1551875890651,
  version: "0.40.14"
};

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = axisSmart;

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

//d3.axisSmart

function axisSmart(_orient) {

  return function d3_axis_smart(_super) {

    var VERTICAL = "vertical axis";
    var HORIZONTAL = "horizontal axis";
    var X = "labels stack side by side";
    var Y = "labels stack top to bottom";

    var OPTIMISTIC = "optimistic approximation: labels have different lengths";
    var PESSIMISTIC = "pessimistic approximation: all labels have the largest length";
    var DEFAULT_LOGBASE = 10;

    function onlyUnique(value, index, self) {
      return self.indexOf(value) === index;
    }

    function axis(g) {
      var checkDmn = axis.scale().domain();
      var checkRng = axis.scale().range();
      if (!checkDmn[0] && checkDmn[0] !== 0 || !checkDmn[1] && checkDmn[1] !== 0 || !checkRng[0] && checkRng[0] !== 0 || !checkRng[1] && checkRng[1] !== 0) {
        return utils.warn("d3.axisSmart() skips action because of invalid domain " + JSON.stringify(checkDmn) + " or range " + JSON.stringify(checkRng) + " of the attached scale");
      }

      if (highlightValue != null) {
        axis.highlightValueRun(g);
        return;
      }

      // measure the width and height of one digit
      var widthSampleG = g.append("g").attr("class", "tick widthSampling");
      var widthSampleT = widthSampleG.append("text").text("0M");
      if (!options.cssMargin) options.cssMargin = {};
      options.cssMargin.top = widthSampleT.style("margin-top");
      options.cssMargin.bottom = widthSampleT.style("margin-bottom");
      options.cssMargin.left = widthSampleT.style("margin-left");
      options.cssMargin.right = widthSampleT.style("margin-right");
      options.widthOfOneDigit = widthSampleT.node().getBBox().width * 0.5;
      options.heightOfOneDigit = widthSampleT.node().getBBox().height;
      widthSampleG.remove();

      // run label factory - it will store labels in tickValues property of axis
      axis.labelFactory(options);

      // construct the view (d3 constructor is used)
      var transition = null;
      if (options.transitionDuration > 0) {
        _super(transition = g.transition().duration(options.transitionDuration));
      } else {
        _super(g);
      }

      //remove axis d3v4 hardcoded attributes
      g.attr("fill", null);
      g.attr("font-size", null);
      g.attr("font-family", null);
      g.attr("text-anchor", null);

      //identify the orientation of axis and the direction of labels
      var orient = axis.orient() == "top" || axis.orient() == "bottom" ? HORIZONTAL : VERTICAL;
      var dimension = orient == HORIZONTAL && axis.pivot() || orient == VERTICAL && !axis.pivot() ? Y : X;

      //add an invisible element that would represent hovered value
      g.selectAll(".vzb-axis-value").data([null]).enter().call(function (selection) {
        selection.append("g").attr("class", "vzb-axis-value").classed("vzb-hidden", true).append("text").each(function () {
          var textEl = d3.select(this);
          textEl.classed("stroke", true);
          if (!textEl.style("paint-order").length) {
            textEl.clone().classed("stroke", false);
          }
        });
        selection.append("g").attr("class", "vzb-axis-value vzb-axis-value-shadow").style("opacity", 0).append("text");
      });

      // patch the label positioning after the view is generated
      var padding = axis.tickPadding();
      g.selectAll("text").each(function (d, i) {
        if (axis.pivot() == null) return;

        var view = d3.select(this);
        view.attr("transform", "rotate(" + (axis.pivot() ? -90 : 0) + ")");
        view.style("text-anchor", dimension == X ? "middle" : "end");
        view.attr("x", dimension == X ? orient == VERTICAL ? -padding : 0 : -padding);
        view.attr("y", dimension == X ? orient == VERTICAL ? 0 : padding : 0);
        view.attr("dx", dimension == X ? orient == VERTICAL ? padding : 0 : 0);
        view.attr("dy", dimension == X ? orient == VERTICAL ? -padding : ".72em" : ".32em");
      });

      //apply label repositioning: first and last visible values would shift away from the borders
      if (axis.repositionLabels() != null) {
        var patchLabelsPosition = function patchLabelsPosition() {
          g.selectAll(".tick").each(function (d) {
            var view = d3.select(this).select("text");
            var shift = axis.repositionLabels()[d] || { x: 0, y: 0 };
            view.attr("x", +view.attr("x") + shift.x);
            view.attr("y", +view.attr("y") + shift.y);
          });
        };
        transition ? transition.on("end", function () {
          return patchLabelsPosition();
        }) : patchLabelsPosition();
      }

      //hide axis labels that are outside the available viewport
      var scale = axis.scale();
      if (options.viewportLength) {
        g.selectAll(".tick").classed("vzb-hidden", function (d) {
          return scale(d) < 0 || scale(d) > options.viewportLength;
        });
      }

      // add minor ticks. if none exist add an empty array
      if (axis.tickValuesMinor() == null) axis.tickValuesMinor([]);
      var minorTicks = g.selectAll(".tick-minor").data(tickValuesMinor);
      minorTicks.exit().remove();
      minorTicks = minorTicks.enter().append("line").attr("class", "tick-minor").merge(minorTicks);

      var tickLengthOut = axis.tickSizeMinor().outbound;
      var tickLengthIn = axis.tickSizeMinor().inbound;

      //hide minor ticks that are outside the available viewport (when axis is zoomed ticks may stick out)
      if (options.viewportLength) {
        minorTicks.classed("vzb-hidden", function (d) {
          return scale(d) < 0 || scale(d) > options.viewportLength;
        });
      }

      minorTicks.attr("y1", orient == HORIZONTAL ? (axis.orient() == "top" ? 1 : -1) * tickLengthIn : scale).attr("y2", orient == HORIZONTAL ? (axis.orient() == "top" ? -1 : 1) * tickLengthOut : scale).attr("x1", orient == VERTICAL ? (axis.orient() == "right" ? -1 : 1) * tickLengthIn : scale).attr("x2", orient == VERTICAL ? (axis.orient() == "right" ? 1 : -1) * tickLengthOut : scale);

      //adjust axis rake
      g.selectAll("path").remove();
      var rake = g.selectAll(".vzb-axis-line").data([0]);
      rake.exit().remove();
      rake = rake.enter().append("line").attr("class", "vzb-axis-line").merge(rake);

      if (options.viewportLength) {
        rake.attr("x1", orient == VERTICAL ? 0 : -1).attr("x2", orient == VERTICAL ? 0 : options.viewportLength).attr("y1", orient == HORIZONTAL ? 0 : 0).attr("y2", orient == HORIZONTAL ? 0 : options.viewportLength);
      } else {
        //TODO: this will not work for the "ordinal" scaleType
        rake.attr("x1", orient == VERTICAL ? 0 : d3.min(scale.range()) - (options.bump || 0) - 1).attr("x2", orient == VERTICAL ? 0 : d3.max(scale.range()) + (options.bump || 0)).attr("y1", orient == HORIZONTAL ? 0 : d3.min(scale.range()) - (options.bump || 0)).attr("y2", orient == HORIZONTAL ? 0 : d3.max(scale.range()) + (options.bump || 0));
      }
    }

    axis.highlightValueRun = function (g) {

      //if viewport is defined and HL value is outside then behave as reset HL
      if (options.viewportLength && highlightValue != "none" && (axis.scale()(highlightValue) > options.viewportLength || axis.scale()(highlightValue) < 0)) highlightValue = "none";

      //identify the orientation of axis and the direction of labels
      var orient = axis.orient() == "top" || axis.orient() == "bottom" ? HORIZONTAL : VERTICAL;
      var dimension = orient == HORIZONTAL && axis.pivot() || orient == VERTICAL && !axis.pivot() ? "y" : "x";
      var pivot = axis.pivot() ? -1 : 1;

      //set content and visibility of HL value
      g.select(".vzb-axis-value").classed("vzb-hidden", highlightValue == "none");
      g.select(".vzb-axis-value-shadow").select("text").text(highlightValue == "none" ? "" : options.formatter(highlightValue));

      var bbox = void 0;
      var o = {};

      if (highlightValue != "none") {
        // measure its width and height for collision resolving
        bbox = g.select(".vzb-axis-value-shadow").node().getBBox();

        // clone a known options object (because we don't want to overwrite widthOfOneDigit / heightOfOneDigit in the original one
        o.bump = options.bump;
        o.formatter = options.formatter;
        o.viewportLength = options.viewportLength;
        o.toolMargin = options.toolMargin;
        o.cssMargin = options.cssMargin;
        o.widthOfOneDigit = bbox[axis.pivot() ? "height" : "width"] / options.formatter(highlightValue).length;
        o.heightOfOneDigit = bbox[axis.pivot() ? "width" : "height"];
      }

      // this will give additive shifting for the hovered value in case it sticks out a little outside viewport
      var hlValueShift = (highlightValue == "none" ? { x: 0, y: 0 } : repositionLabelsThatStickOut([highlightValue], o, orient, axis.scale(), dimension)[highlightValue])[dimension];

      // this function will help to move the hovered value to the right place
      var getTransform = function getTransform(d) {
        return highlightValue == "none" ? "translate(0,0)" : "translate(" + (orient == HORIZONTAL ? axis.scale()(highlightValue) + hlValueShift * pivot : 0) + "," + (orient == VERTICAL ? axis.scale()(highlightValue) + hlValueShift * pivot : 0) + ")";
      };

      // this function will help to compute opacity for the axis labels that would overlap with the HL label
      var getOpacity = function getOpacity(d, t, view) {
        if (highlightValue == "none") return 1;

        var wh = orient == HORIZONTAL ? "width" : "height";
        var shift = ((axis.repositionLabels() || {})[d] || { x: 0, y: 0 })[dimension];

        // opacity depends on the collision between label's boundary boxes
        return axis.hlOpacityScale()(
        // this computes the distance between the box centers, this is a 1-d problem because all labels are along the axis
        // shifts of labels that stick out from the viewport are also taken into account
        Math.abs(axis.scale()(d) + shift * pivot - axis.scale()(highlightValue) - hlValueShift * pivot)
        // this computes the sides of boundary boxes, each has a half-size to reduce the distance between centers
        - view.getBBox()[wh] / 2 - bbox[wh] / 2);
      };

      // apply translation of the HL value and opacity of tick labels
      if (highlightTransDuration) {
        g.select(".vzb-axis-value").transition().duration(highlightTransDuration).ease(d3.easeLinear).attr("transform", getTransform);

        g.select(".vzb-axis-value").selectAll("text").interrupt("text" + (highlightValue == "none" ? "on" : "off")).transition("text" + (highlightValue == "none" ? "off" : "on")).delay(highlightTransDuration).text(highlightValue == "none" ? "" : options.formatter(highlightValue));

        g.selectAll(".tick:not(.vzb-hidden)").each(function (d, t) {
          d3.select(this).select("text").transition().duration(highlightTransDuration).ease(d3.easeLinear).style("opacity", getOpacity(d, t, this));
        });
      } else {
        g.select(".vzb-axis-value").interrupt().attr("transform", getTransform);

        g.select(".vzb-axis-value").selectAll("text").interrupt("texton").interrupt("textoff").text(highlightValue == "none" ? "" : options.formatter(highlightValue));

        g.selectAll(".tick:not(.vzb-hidden)").each(function (d, t) {
          d3.select(this).select("text").interrupt().style("opacity", getOpacity(d, t, this));
        });
      }

      highlightValue = null;
    };

    var hlOpacityScale = d3.scaleLinear().domain([0, 5]).range([0, 1]).clamp(true);
    axis.hlOpacityScale = function (arg) {
      if (!arguments.length) return hlOpacityScale;
      hlOpacityScale = arg;
      return axis;
    };

    var highlightValue = null;
    axis.highlightValue = function (arg) {
      if (!arguments.length) return highlightValue;
      highlightValue = arg;
      return axis;
    };

    var highlightTransDuration = 0;
    axis.highlightTransDuration = function (arg) {
      if (!arguments.length) return highlightTransDuration;
      highlightTransDuration = arg;
      return axis;
    };

    var repositionLabels = null;
    axis.repositionLabels = function (arg) {
      if (!arguments.length) return repositionLabels;
      repositionLabels = arg;
      return axis;
    };

    var pivot = false;
    axis.pivot = function (arg) {
      if (!arguments.length) return pivot;
      pivot = !!arg;
      return axis;
    };

    var tickValuesMinor = [];
    axis.tickValuesMinor = function (arg) {
      if (!arguments.length) return tickValuesMinor;
      tickValuesMinor = arg;
      return axis;
    };

    var tickSizeMinor = {
      outbound: 0,
      inbound: 0
    };
    axis.tickSizeMinor = function (arg1, arg2) {
      if (!arguments.length) return tickSizeMinor;
      tickSizeMinor = {
        outbound: arg1,
        inbound: arg2 || 0
      };
      meow("setting", tickSizeMinor);
      return axis;
    };

    var options = {};
    axis.labelerOptions = function (arg) {
      if (!arguments.length) return options;
      options = arg;
      return axis;
    };

    axis.METHOD_REPEATING = "repeating specified powers";
    axis.METHOD_DOUBLING = "doubling the value";

    axis.labelFactory = function (options) {
      if (options == null) options = {};
      if (options.scaleType != "linear" && options.scaleType != "time" && options.scaleType != "genericLog" && options.scaleType != "log" && options.scaleType != "ordinal") {
        return axis.ticks(options.limitMaxTickNumber).tickFormat(null).tickValues(null).tickValuesMinor(null).pivot(null).repositionLabels(null);
      }
      if (options.scaleType == "ordinal") return axis;

      if (options.logBase == null) options.logBase = DEFAULT_LOGBASE;
      if (options.stops == null) options.stops = [1, 2, 5, 3, 7, 4, 6, 8, 9];

      if (options.removeAllLabels == null) options.removeAllLabels = false;

      if (options.formatter == null) options.formatter = axis.tickFormat() ? axis.tickFormat() : function (d) {
        return d + "";
      };
      options.cssLabelMarginLimit = 5; //px

      if (options.cssMargin == null) options.cssMargin = {};
      if (options.cssMargin.left == null || parseInt(options.cssMargin.left) < options.cssLabelMarginLimit) options.cssMargin.left = options.cssLabelMarginLimit + "px";
      if (options.cssMargin.right == null || parseInt(options.cssMargin.right) < options.cssLabelMarginLimit) options.cssMargin.right = options.cssLabelMarginLimit + "px";
      if (options.cssMargin.top == null || parseInt(options.cssMargin.top) < options.cssLabelMarginLimit) options.cssMargin.top = options.cssLabelMarginLimit + "px";
      if (options.cssMargin.bottom == null || parseInt(options.cssMargin.bottom) < options.cssLabelMarginLimit) options.cssMargin.bottom = options.cssLabelMarginLimit + "px";
      if (options.toolMargin == null) options.toolMargin = {
        left: 30,
        bottom: 30,
        right: 30,
        top: 30
      };
      if (options.bump == null) options.bump = 0;
      if (options.viewportLength == null) options.viewportLength = 0;

      if (options.pivotingLimit == null) options.pivotingLimit = options.toolMargin[this.orient()];

      if (options.showOuter == null) options.showOuter = false;
      if (options.limitMaxTickNumber == null) options.limitMaxTickNumber = 0; //0 is unlimited

      var orient = this.orient() == "top" || this.orient() == "bottom" ? HORIZONTAL : VERTICAL;

      if (options.isPivotAuto == null) options.isPivotAuto = orient == VERTICAL;

      if (options.cssFontSize == null) options.cssFontSize = "13px";
      if (options.widthToFontsizeRatio == null) options.widthToFontsizeRatio = 0.75;
      if (options.heightToFontsizeRatio == null) options.heightToFontsizeRatio = 1.20;
      if (options.widthOfOneDigit == null) options.widthOfOneDigit = parseInt(options.cssFontSize) * options.widthToFontsizeRatio;
      if (options.heightOfOneDigit == null) options.heightOfOneDigit = parseInt(options.cssFontSize) * options.heightToFontsizeRatio;
      if (options.fitIntoScale == null || options.fitIntoScale == "pessimistic") options.fitIntoScale = PESSIMISTIC;
      if (options.fitIntoScale == "optimistic") options.fitIntoScale = OPTIMISTIC;

      meow("********** " + orient + " **********");

      var domain = axis.scale().domain();
      var range = axis.scale().range();
      var lengthDomain = Math.abs(domain[domain.length - 1] - domain[0]);
      var lengthRange = Math.abs(range[range.length - 1] - range[0]);

      var min = d3.min([domain[0], domain[domain.length - 1]]);
      var max = d3.max([domain[0], domain[domain.length - 1]]);
      var bothSidesUsed = (options.scaleType == "linear" ? min < 0 : min <= 0) && max >= 0 && options.scaleType != "time";

      var tickValues = options.showOuter ? [min, max] : [];
      var tickValuesMinor = []; //[min, max];
      var ticksNumber = 5;

      function getBaseLog(x, base) {
        if (x == 0 || base == 0) {
          return 0;
        }
        if (base == null) base = options.logBase;
        return Math.log(x) / Math.log(base);
      }

      // estimate the longest formatted label in pixels
      var estLongestLabelLength =
      //take 17 sample values and measure the longest formatted label
      d3.max(d3.range(min, max, (max - min) / 17).concat(max).map(function (d) {
        return options.formatter(d).replace(".", "").length;
      })) * options.widthOfOneDigit + parseInt(options.cssMargin.left);

      var pivot = options.isPivotAuto && (estLongestLabelLength > options.pivotingLimit && orient == VERTICAL || !(estLongestLabelLength > options.pivotingLimit) && !(orient == VERTICAL));

      var labelsStackOnTop = orient == HORIZONTAL && pivot || orient == VERTICAL && !pivot;

      // conditions to remove labels altogether
      var labelsJustDontFit = !labelsStackOnTop && options.heightOfOneDigit > options.pivotingLimit;
      if (options.removeAllLabels) return axis.tickValues([]);

      // return a single tick if have only one point in the domain
      if (min == max) return axis.tickValues([min]).ticks(1).tickFormat(options.formatter);

      // LABELS FIT INTO SCALE
      // measure if all labels in array tickValues can fit into the allotted lengthRange
      // approximationStyle can be OPTIMISTIC or PESSIMISTIC
      // in optimistic style the length of every label is added up and then we check if the total pack of symbols fit
      // in pessimistic style we assume all labels have the length of the longest label from tickValues
      // returns TRUE if labels fit and FALSE otherwise
      var labelsFitIntoScale = function labelsFitIntoScale(tickValues, lengthRange, approximationStyle, rescalingLabels) {
        if (tickValues == null || tickValues.length <= 1) return true;
        if (approximationStyle == null) approximationStyle = PESSIMISTIC;
        if (rescalingLabels == null) scaleType = "none";

        if (labelsStackOnTop) {
          //labels stack on top of each other. digit height matters
          return lengthRange > tickValues.length * (options.heightOfOneDigit + parseInt(options.cssMargin.top) + parseInt(options.cssMargin.bottom));
        }

        //labels stack side by side. label width matters
        var marginsLR = parseInt(options.cssMargin.left) + parseInt(options.cssMargin.right);
        var maxLength = d3.max(tickValues.map(function (d) {
          return options.formatter(d).length;
        }));

        // log scales need to rescale labels, so that 9 takes more space than 2
        if (rescalingLabels == "log") {
          // sometimes only a fragment of axis is used. in this case we want to limit the scope to that fragment
          // yes, this is hacky and experimental
          lengthRange = Math.abs(axis.scale()(d3.max(tickValues)) - axis.scale()(d3.min(tickValues)));

          return lengthRange > d3.sum(tickValues.map(function (d) {
            return (options.widthOfOneDigit * (approximationStyle == PESSIMISTIC ? maxLength : options.formatter(d).length) + marginsLR) * (
            // this is a logarithmic rescaling of labels
            1 + Math.log(d.toString().replace(/([0.])/g, "")[0]) / Math.LN10);
          }));
        }

        return lengthRange > tickValues.length * marginsLR + (approximationStyle == PESSIMISTIC ? options.widthOfOneDigit * tickValues.length * maxLength : 0) + (approximationStyle == OPTIMISTIC ? options.widthOfOneDigit * tickValues.map(function (d) {
          return options.formatter(d);
        }).join("").length : 0);
      };

      // COLLISION BETWEEN
      // Check is there is a collision between labels ONE and TWO
      // ONE is a value, TWO can be a value or an array
      // returns TRUE if collision takes place and FALSE otherwise
      var collisionBetween = function collisionBetween(one, two) {
        if (two == null || two.length == 0) return false;
        if (!(two instanceof Array)) two = [two];

        for (var i = 0; i < two.length; i++) {
          if (one != two[i] && one != 0 && Math.abs(axis.scale()(one) - axis.scale()(two[i])) < (labelsStackOnTop ? options.heightOfOneDigit : (options.formatter(one).length + options.formatter(two[i]).length) * options.widthOfOneDigit / 2)) return true;
        }
        return false;
      };

      if (options.scaleType == "genericLog" || options.scaleType == "log") {
        var eps = axis.scale().constant ? axis.scale().constant() : 0;

        var spawnZero = bothSidesUsed ? [0] : [];

        // check if spawn positive is needed. if yes then spawn!
        var spawnPos = max < eps ? [] : d3.range(Math.floor(getBaseLog(Math.max(eps, min))), Math.ceil(getBaseLog(max)), 1).concat(Math.ceil(getBaseLog(max))).map(function (d) {
          return Math.pow(options.logBase, d);
        });

        // check if spawn negative is needed. if yes then spawn!
        var spawnNeg = min > -eps ? [] : d3.range(Math.floor(getBaseLog(Math.max(eps, -max))), Math.ceil(getBaseLog(-min)), 1).concat(Math.ceil(getBaseLog(-min))).map(function (d) {
          return -Math.pow(options.logBase, d);
        });

        // automatic chosing of method if it's not explicitly defined
        if (options.method == null) {
          var coverage = bothSidesUsed ? Math.max(Math.abs(max), Math.abs(min)) / eps : Math.max(Math.abs(max), Math.abs(min)) / Math.min(Math.abs(max), Math.abs(min));
          options.method = 10 <= coverage && coverage <= 1024 ? this.METHOD_DOUBLING : this.METHOD_REPEATING;
        }

        //meow('spawn pos/neg: ', spawnPos, spawnNeg);


        if (options.method == this.METHOD_DOUBLING) {
          (function () {
            var doublingLabels = [];
            if (bothSidesUsed) tickValues.push(0);
            var avoidCollidingWith = [].concat(tickValues);

            // start with the smallest abs number on the scale, rounded to nearest nice power
            //var startPos = max<eps? null : Math.pow(options.logBase, Math.floor(getBaseLog(Math.max(eps,min))));
            //var startNeg = min>-eps? null : -Math.pow(options.logBase, Math.floor(getBaseLog(Math.max(eps,-max))));

            var startPos = max < eps ? null : 4 * spawnPos[Math.floor(spawnPos.length / 2) - 1];
            var startNeg = min > -eps ? null : 4 * spawnNeg[Math.floor(spawnNeg.length / 2) - 1];

            //meow('starter pos/neg: ', startPos, startNeg);

            if (startPos) {
              for (var l = startPos; l <= max; l *= 2) {
                doublingLabels.push(l);
              }
            }
            if (startPos) {
              for (var _l = startPos / 2; _l >= Math.max(min, eps); _l /= 2) {
                doublingLabels.push(_l);
              }
            }
            if (startNeg) {
              for (var _l2 = startNeg; _l2 >= min; _l2 *= 2) {
                doublingLabels.push(_l2);
              }
            }
            if (startNeg) {
              for (var _l3 = startNeg / 2; _l3 <= Math.min(max, -eps); _l3 /= 2) {
                doublingLabels.push(_l3);
              }
            }

            doublingLabels = doublingLabels.sort(d3.ascending).filter(function (d) {
              return min <= d && d <= max;
            });

            tickValuesMinor = tickValuesMinor.concat(doublingLabels);

            doublingLabels = groupByPriorities(doublingLabels, false); // don't skip taken values

            var tickValues_1 = tickValues;
            for (var j = 0; j < doublingLabels.length; j++) {

              // compose an attempt to add more axis labels
              var trytofit = tickValues_1.concat(doublingLabels[j]).filter(function (d) {
                return !collisionBetween(d, avoidCollidingWith);
              }).filter(onlyUnique);

              // stop populating if labels don't fit
              if (!labelsFitIntoScale(trytofit, lengthRange, PESSIMISTIC, "none")) break;

              // apply changes if no blocking instructions
              tickValues = trytofit;
            }
          })();
        }

        if (options.method == this.METHOD_REPEATING) {

          var spawn = spawnZero.concat(spawnPos).concat(spawnNeg).sort(d3.ascending);

          options.stops.forEach(function (stop, i) {
            tickValuesMinor = tickValuesMinor.concat(spawn.map(function (d) {
              return d * stop;
            }));
          });

          spawn = groupByPriorities(spawn);
          var avoidCollidingWith = spawnZero.concat(tickValues);

          var stopTrying = false;

          options.stops.forEach(function (stop, i) {
            if (i == 0) {
              var _ref;

              for (var j = 0; j < spawn.length; j++) {

                // compose an attempt to add more axis labels
                var trytofit = tickValues.concat(spawn[j].map(function (d) {
                  return d * stop;
                }))
                // throw away labels that collide with "special" labels 0, min, max
                .filter(function (d) {
                  return !collisionBetween(d, avoidCollidingWith);
                }).filter(function (d) {
                  return min <= d && d <= max;
                }).filter(onlyUnique);

                // stop populating if labels don't fit
                if (!labelsFitIntoScale(trytofit, lengthRange, PESSIMISTIC, "none")) break;

                // apply changes if no blocking instructions
                tickValues = trytofit;
              }

              // flatten the spawn array
              spawn = (_ref = []).concat.apply(_ref, _toConsumableArray(spawn));
            } else {
              if (stopTrying) return;

              // compose an attempt to add more axis labels
              var _trytofit = tickValues.concat(spawn.map(function (d) {
                return d * stop;
              })).filter(function (d) {
                return min <= d && d <= max;
              }).filter(onlyUnique);

              // stop populating if the new composition doesn't fit
              if (!labelsFitIntoScale(_trytofit, lengthRange, PESSIMISTIC, "log")) {
                stopTrying = true;
                return;
              }
              // stop populating if the number of labels is limited in options
              if (tickValues.length > options.limitMaxTickNumber && options.limitMaxTickNumber != 0) {
                stopTrying = true;
                return;
              }

              // apply changes if no blocking instructions
              tickValues = _trytofit;
            }
          });
        } //method

      } //logarithmic


      if (options.scaleType == "linear" || options.scaleType == "time") {
        (function () {
          if (bothSidesUsed) tickValues.push(0);
          var avoidCollidingWith = [].concat(tickValues);

          if (labelsStackOnTop) {
            ticksNumber = Math.max(Math.floor(lengthRange / (options.heightOfOneDigit + parseInt(options.cssMargin.top))), 2);
          } else {
            ticksNumber = Math.max(Math.floor(lengthRange / estLongestLabelLength), 2);
          }

          // limit maximum ticks number
          if (options.limitMaxTickNumber != 0 && ticksNumber > options.limitMaxTickNumber) ticksNumber = options.limitMaxTickNumber;

          var addLabels = axis.scale().ticks(ticksNumber).sort(d3.ascending).filter(function (d) {
            return min <= d && d <= max;
          });

          tickValuesMinor = tickValuesMinor.concat(addLabels);

          addLabels = groupByPriorities(addLabels, false);

          var tickValues_1 = tickValues;
          for (var j = 0; j < addLabels.length; j++) {

            // compose an attempt to add more axis labels
            var trytofit = tickValues_1.concat(addLabels[j]).filter(function (d) {
              return !collisionBetween(d, avoidCollidingWith);
            }).filter(onlyUnique);

            // stop populating if labels don't fit
            if (!labelsFitIntoScale(trytofit, lengthRange, options.fitIntoScale, "none")) break;

            // apply changes if no blocking instructions
            tickValues = trytofit;
          }

          tickValues = tickValues //.concat(addLabels)
          .filter(function (d) {
            return !collisionBetween(d, avoidCollidingWith);
          }).filter(onlyUnique);
        })();
      }

      if (tickValues != null && tickValues.length <= 2 && !bothSidesUsed) {
        //remove min tick if min, max ticks have collision between them
        tickValues = Math.abs(axis.scale()(min) - axis.scale()(max)) < (labelsStackOnTop ? options.heightOfOneDigit : (options.formatter(min).length + options.formatter(max).length) * options.widthOfOneDigit) ? [max] : [min, max];
        if (tickValues.length == 1 && (options.scaleType == "linear" || options.scaleType == "time")) {
          tickValuesMinor = [];
        }
      }

      if (tickValues != null && tickValues.length <= 3 && bothSidesUsed) {
        if (!collisionBetween(0, [min, max])) {
          tickValues = [min, 0, max];
        } else {
          tickValues = [min, max];
        }
      }

      if (tickValues != null) tickValues.sort(function (a, b) {
        return (orient == HORIZONTAL ? -1 : 1) * (axis.scale()(b) - axis.scale()(a));
      });

      if (labelsJustDontFit) tickValues = [];
      tickValuesMinor = tickValuesMinor.filter(function (d) {
        return tickValues.indexOf(d) == -1 && min <= d && d <= max;
      });

      meow("final result", tickValues);

      return axis.ticks(ticksNumber).tickFormat(options.formatter).tickValues(tickValues).tickValuesMinor(tickValuesMinor).pivot(pivot).repositionLabels(repositionLabelsThatStickOut(tickValues, options, orient, axis.scale(), labelsStackOnTop ? "y" : "x"));
    };

    // GROUP ELEMENTS OF AN ARRAY, SO THAT...
    // less-prio elements are between the high-prio elements
    // Purpose: enable adding axis labels incrementally, like this for 9 labels:
    // PRIO 1: +--------, concat result: +-------- first we show only 1 label
    // PRIO 2: ----+---+, concat result: +---+---+ then we add 2 more, that are maximally spaced
    // PRIO 3: --+---+--, concat result: +-+-+-+-+ then we fill spaces with 2 more labels
    // PRIO 4: -+-+-+-+-, concat result: +++++++++ then we fill the remaing spaces and show all labels
    // exception: zero jumps to the front, if it's on the list
    // example1: [1 2 3 4 5 6 7] --> [[1][4 7][2 3 5 6]]
    // example2: [1 2 3 4 5 6 7 8 9] --> [[1][5 9][3 7][2 4 6 8]]
    // example3: [-4 -3 -2 -1 0 1 2 3 4 5 6 7] --> [[0][-4][2][-1 5][-3 -2 1 3 4 6 7]]
    // inputs:
    // array - the source array to be processed. Only makes sense if sorted
    // removeDuplicates - return incremental groups (true, default), or return concatinated result (false)
    // returns:
    // the nested array
    function groupByPriorities(array, removeDuplicates) {
      if (removeDuplicates == null) removeDuplicates = true;

      var result = [];
      var taken = [];

      //zero is an exception, if it's present we manually take it to the front
      if (array.indexOf(0) != -1) {
        result.push([0]);
        taken.push(array.indexOf(0));
      }

      var _loop = function _loop(k) {
        // push the next group of elements to the result
        result.push(array.filter(function (d, i) {
          if (i % Math.floor(k) == 0 && (taken.indexOf(i) == -1 || !removeDuplicates)) {
            taken.push(i);
            return true;
          }
          return false;
        }));
      };

      for (var k = array.length; k >= 1; k = k < 4 ? k - 1 : k / 2) {
        _loop(k);
      }

      return result;
    }

    // REPOSITION LABELS THAT STICK OUT
    // Purpose: the outer labels can easily be so large, they stick out of the allotted area
    // Example:
    // Label is fine:    Label sticks out:    Label sticks out more:    Solution - label is shifted:
    //      12345 |           1234|                123|5                   12345|
    // _______.   |      _______. |           _______.|                 _______.|
    //
    // this is what the function does on the first step (only outer labels)
    // on the second step it shifts the inner labels that start to overlap with the shifted outer labels
    //
    // requires tickValues array to be sorted from tail-first
    // tail means left or bottom, head means top or right
    //
    // dimension - which dimension requires shifting
    // X if labels stack side by side, Y if labels stack on top of one another
    //
    // returns the array of recommended {x,y} shifts

    function repositionLabelsThatStickOut(tickValues, options, orient, scale, dimension) {
      if (!tickValues) return null;
      var result = {};

      // make an abstraction layer for margin sizes
      // tail means left or bottom, head means top or right
      var margin = orient == VERTICAL ? {
        head: options.toolMargin.top,
        tail: options.toolMargin.bottom
      } : {
        head: options.toolMargin.right,
        tail: options.toolMargin.left
      };

      var range = scale.range();
      var bump = options.bump;

      //when a viewportLength is given: adjust outer VISIBLE tick values
      //this is helpful when the scaled is zoomed, so labels don't get truncated by a viewport svg
      if (options.viewportLength) {
        //remove invisible ticks from the array
        tickValues = tickValues.filter(function (d) {
          return scale(d) >= 0 && scale(d) <= options.viewportLength;
        });
        //overwrite the available range with viewport limits. direction doesn't matter because we take min-max later anyway
        range = [0, options.viewportLength];
        //reset the bump because zoomed axis has no bump
        bump = 0;
      }

      // STEP 1:
      // for outer labels: avoid sticking out from the tool margin
      tickValues.forEach(function (d, i) {
        if (i != 0 && i != tickValues.length - 1) return;

        // compute the influence of the axis head
        var repositionHead = Math.min(margin.head, options.widthOfOneDigit * 0.5) + bump + (orient == HORIZONTAL ? 1 : 0) * d3.max(range) - (orient == HORIZONTAL ? 0 : 1) * d3.min(range) + (orient == HORIZONTAL ? -1 : 1) * scale(d) - (dimension == "x") * options.formatter(d).length * options.widthOfOneDigit / 2 - (dimension == "y") * options.heightOfOneDigit / 2
        // we may consider or not the label margins to give them a bit of spacing from the edges
        - (dimension == "x") * parseInt(options.cssMargin.right) - (dimension == "y") * parseInt(options.cssMargin.top);

        // compute the influence of the axis tail
        var repositionTail = Math.min(margin.tail, options.widthOfOneDigit * 0.5) + bump + (orient == VERTICAL ? 1 : 0) * d3.max(range) - (orient == VERTICAL ? 0 : 1) * d3.min(range) + (orient == VERTICAL ? -1 : 1) * scale(d) - (dimension == "x") * options.formatter(d).length * options.widthOfOneDigit / 2 - (dimension == "y") * options.heightOfOneDigit / 2
        // we may consider or not the label margins to give them a bit of spacing from the edges
        - (dimension == "x") * parseInt(options.cssMargin.left) - (dimension == "y") * parseInt(options.cssMargin.bottom);

        // apply limits in order to cancel repositioning of labels that are good
        if (repositionHead > 0) repositionHead = 0;
        if (repositionTail > 0) repositionTail = 0;

        // add them up with appropriate signs, save to the axis
        result[d] = { x: 0, y: 0 };
        result[d][dimension] = (dimension == "y" && orient == VERTICAL ? -1 : 1) * (repositionHead - repositionTail);
      });

      // STEP 2:
      // for inner labels: avoid collision with outer labels
      tickValues.forEach(function (d, i) {
        if (i == 0 || i == tickValues.length - 1) return;

        // compute the influence of the head-side outer label
        var repositionHead =
        // take the distance between head and the tick at hand
        Math.abs(scale(d) - scale(tickValues[tickValues.length - 1]))

        // substract the shift of the head TODO: THE SIGN CHOICE HERE MIGHT BE WRONG. NEED TO TEST ALL CASES
        - (dimension == "y") * (orient == HORIZONTAL ? -1 : 1) * result[tickValues[tickValues.length - 1]][dimension] - (dimension == "x") * (orient == HORIZONTAL ? 1 : -1) * result[tickValues[tickValues.length - 1]][dimension]

        // substract half-length of the overlapping labels
        - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(d).length - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(tickValues[tickValues.length - 1]).length - (dimension == "y") * options.heightOfOneDigit * 0.7 //TODO remove magic constant - relation of actual font height to BBox-measured height

        // we may consider or not the label margins to give them a bit of spacing from the edges
        - (dimension == "x") * parseInt(options.cssMargin.left) - (dimension == "y") * parseInt(options.cssMargin.bottom);

        // compute the influence of the tail-side outer label
        var repositionTail =
        // take the distance between tail and the tick at hand
        Math.abs(scale(d) - scale(tickValues[0]))

        // substract the shift of the tail TODO: THE SIGN CHOICE HERE MIGHT BE WRONG. NEED TO TEST ALL CASES
        - (dimension == "y") * (orient == VERTICAL ? -1 : 1) * result[tickValues[0]][dimension] - (dimension == "x") * (orient == VERTICAL ? 1 : -1) * result[tickValues[0]][dimension]

        // substract half-length of the overlapping labels
        - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(d).length - (dimension == "x") * options.widthOfOneDigit / 2 * options.formatter(tickValues[0]).length - (dimension == "y") * options.heightOfOneDigit * 0.7 //TODO remove magic constant - relation of actual font height to BBox-measured height

        // we may consider or not the label margins to give them a bit of spacing from the edges
        - (dimension == "x") * parseInt(options.cssMargin.left) - (dimension == "y") * parseInt(options.cssMargin.bottom);

        // apply limits in order to cancel repositioning of labels that are good
        if (repositionHead > 0) repositionHead = 0;
        if (repositionTail > 0) repositionTail = 0;

        // add them up with appropriate signs, save to the axis
        result[d] = { x: 0, y: 0 };
        result[d][dimension] = (dimension == "y" && orient == VERTICAL ? -1 : 1) * (repositionHead - repositionTail);
      });

      return result;
    } // function repositionLabelsThatStickOut()


    axis.copy = function () {
      return d3_axis_smart(d3["axis" + utils.capitalize(_orient)]());
    };

    axis.orient = function () {
      if (!arguments.length) return _orient;
      return axis;
    };

    return d3.rebind(axis, _super, "scale", "ticks", "tickArguments", "tickValues", "tickFormat", "tickSize", "tickSizeInner", "tickSizeOuter", "tickPadding");

    function meow() {
      var _console;

      if (!axis.labelerOptions().isDevMode) return;
      (_console = console).log.apply(_console, arguments);
    }
  }(d3["axis" + utils.capitalize(_orient)]());
}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*!
 * VIZABI SHOW PANEL CONTROL
 * Reusable show panel dialog
 */

var Show = _component2.default.extend({
  init: function init(config, parent) {
    this.name = "show";
    var _this = this;

    this.template = this.template || __webpack_require__(170);

    this.model_expects = this.model_expects || [{
      name: "state"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.tabsConfig = ((config.ui.dialogs.dialog || {}).find || {}).showTabs || {};

    this._super(config, parent);
  },


  /**
   * Grab the list div
   */
  readyOnce: function readyOnce() {
    var _this2 = this;

    this._super();

    this.KEYS = utils.unique(this.model.state.marker._getAllDimensions({ exceptType: "time" }));
    this.resetFilter = {};
    var spaceModels = this.model.state.marker._space;
    this.KEYS.forEach(function (key) {
      _this2.resetFilter[key] = utils.find(spaceModels, function (model) {
        return model.dim === key;
      }).show;
    });

    this.parentElement = d3.select(this.parent.element);
    this.contentEl = this.element = d3.select(this.element.parentNode);

    this.list = this.element.select(".vzb-show-list");
    this.input_search = this.parentElement.select(".vzb-find-search");
    this.deselect_all = this.parentElement.select(".vzb-show-deselect");
    this.apply = this.parentElement.select(".vzb-show-apply");

    var _this = this;

    this.deselect_all.on("click", function () {
      _this.resetShow();
    });

    this.apply.on("click", function () {
      _this.applyShowChanges();
    });

    //make sure it refreshes when all is reloaded
    this.root.on("ready", function () {
      _this.ready();
    });
  },
  ready: function ready() {
    var _this3 = this;

    this._super();
    this.KEYS = utils.unique(this.model.state.marker._getAllDimensions({ exceptType: "time" }));
    this.labelNames = this.model.state.marker.getLabelHookNames();
    var subHooks = this.model.state.marker.getSubhooks(true);
    this.previewShow = {};
    this.checkedDifference = {};
    utils.forEach(this.labelNames, function (labelName) {
      var entities = subHooks[labelName].getEntity();
      var showFilter = _this3.previewShow[entities._name] = {};
      utils.forEach(entities.show.$and || [entities.show], function (show$and) {
        utils.forEach(show$and, function (filter, key) {
          showFilter[key] = (filter.$in || []).slice(0);
        });
      });
    });
    this.redraw();
    this.showHideButtons();

    utils.preventAncestorScrolling(this.element.select(".vzb-dialog-scrollable"));
  },
  redraw: function redraw() {
    var _this4 = this;

    var _this = this;
    this.translator = this.model.locale.getTFunction();

    this.model.state.marker.getFrame(this.model.state.time.value, function (values) {
      if (!values) return;

      var subHooks = _this4.model.state.marker.getSubhooks(true);

      _this.list.html("");

      var categories = [];
      var loadPromises = [];
      utils.forEach(_this4.labelNames, function (labelName, dim) {
        var entitiesModel = subHooks[labelName].getEntity();
        var entities = entitiesModel._name;

        categories.push({ dim: dim, entities: entities, labelName: labelName,
          key: dim,
          category: _this4.root.model.dataManager.getConceptProperty(dim, "name")
        });

        var entitySetData = entitiesModel.getEntitySets().map(function (key) {
          return {
            entities: entities,
            key: key,
            dim: dim,
            isSet: true,
            category: _this4.root.model.dataManager.getConceptProperty(key, "name")
          };
        });

        categories.push.apply(categories, _toConsumableArray(entitySetData));
      });

      utils.forEach(categories, function (_ref) {
        var dim = _ref.dim,
            key = _ref.key,
            category = _ref.category,
            labelName = _ref.labelName,
            entities = _ref.entities,
            isSet = _ref.isSet;


        var data = isSet ? _this4.model.state[entities].getEntitySets("data")[key][0].map(function (d) {
          var result = { entities: entities, category: key };
          result[key] = d[key];
          result["label"] = d.name;
          result["isShown"] = _this.model.state[entities].isInShowFilter(d, key);
          return result;
        }) : utils.keys(values[labelName]).map(function (d) {
          var result = { entities: entities, category: key };
          result[key] = d;
          result["label"] = values[labelName][d];
          result["isShown"] = _this.model.state[entities].isInShowFilter(result, key);
          return result;
        });

        //sort data alphabetically
        data.sort(function (a, b) {
          return a.label < b.label ? -1 : 1;
        });

        var section = _this.list.append("div").attr("class", "vzb-accordion-section").classed("vzb-accordion-active", _this4.tabsConfig[key] === "open").datum({ key: key, isSet: isSet });

        section.append("div").attr("class", "vzb-accordion-section-title").on("click", function (d) {
          var parentEl = d3.select(this.parentNode);
          parentEl.classed("vzb-fullexpand", false).classed("vzb-accordion-active", !parentEl.classed("vzb-accordion-active"));
        }).call(function (elem) {
          return elem.append("span").attr("class", "vzb-show-category").classed("vzb-show-category-set", function (d) {
            return d.isSet;
          }).text(category).attr("title", function (d) {
            return this.offsetWidth < this.scrollWidth ? category : null;
          });
        }).call(function (elem) {
          return elem.append("span").attr("class", "vzb-show-clear-cross").text("✖").on("click", function () {
            d3.event.stopPropagation();
            section.selectAll(".vzb-checked input").property("checked", false).dispatch("change");
          });
        }).call(function (elem) {
          return elem.append("span").attr("class", "vzb-show-more vzb-dialog-button").text(_this.translator("buttons/moreellipsis")).on("click", function () {
            d3.event.stopPropagation();
            section.classed("vzb-fullexpand", true);
          });
        });

        var list = section.append("div").attr("class", "vzb-show-category-list");

        var items = list.selectAll(".vzb-show-item").data(data).enter().append("div").attr("class", "vzb-show-item vzb-dialog-checkbox").classed("vzb-checked", function (d) {
          return d.isShown;
        });

        items.append("input").attr("type", "checkbox").attr("class", "vzb-show-item").attr("id", function (d) {
          return "-show-" + d.category + "-" + d[key] + "-" + _this._id;
        }).property("checked", function (d) {
          return d.isShown;
        }).on("change", function (d, i, group) {
          if (d.isShown !== group[i].checked) {
            _this4.checkedDifference[d.category + d[key]] = true;
          } else {
            delete _this4.checkedDifference[d.category + d[key]];
          }
          _this4.apply.classed("vzb-disabled", !Object.keys(_this4.checkedDifference).length);

          if (!_this4.previewShow[d.entities][d.category]) {
            var show = _this4.model.state[d.entities].show;
            _this4.previewShow[d.entities][d.category] = ((show[d.category] || (show.$and || {})[d.category] || {}).$in || []).slice(0);
          }
          var index = _this4.previewShow[d.entities][d.category].indexOf(d[d.category]);
          index === -1 ? _this4.previewShow[d.entities][d.category].push(d[d.category]) : _this4.previewShow[d.entities][d.category].splice(index, 1);
        });

        items.append("label").attr("for", function (d) {
          return "-show-" + d.category + "-" + d[key] + "-" + _this._id;
        }).text(function (d) {
          return d.label;
        }).attr("title", function (d) {
          return this.offsetWidth < this.scrollWidth ? d.label : null;
        });

        var lastCheckedNode = list.selectAll(".vzb-checked").classed("vzb-separator", false).lower().nodes()[0];

        if (lastCheckedNode && lastCheckedNode.nextSibling) {
          var lastCheckedEl = d3.select(lastCheckedNode).classed("vzb-separator", !!lastCheckedNode.nextSibling);
          var offsetTop = lastCheckedNode.parentNode.offsetTop + lastCheckedNode.offsetTop;
          d3.select(lastCheckedNode.parentNode.parentNode).style("max-height", offsetTop + lastCheckedNode.offsetHeight + 25 + "px").select(".vzb-show-more").style("transform", "translate(0, " + offsetTop + "px)");
        } else {
          section.select(".vzb-show-more").classed("vzb-hidden", true);
        }

        section.classed("vzb-filtered", !!lastCheckedNode);
        section.classed("vzb-fullexpand", !!lastCheckedNode && _this4.tabsConfig[key] === "open");
      });

      _this.contentEl.node().scrollTop = 0;

      _this.input_search.attr("placeholder", _this.translator("placeholder/search") + "...");
    });
  },
  applyShowChanges: function applyShowChanges() {
    var _this5 = this;

    this.model.state.marker.clearSelected();

    var setObj = {};
    utils.forEach(this.previewShow, function (showObj, entities) {
      var $and = [];
      var $andKeys = [];
      utils.forEach(showObj, function (entitiesArray, category) {
        $andKeys.push(category);
        if (entitiesArray.length) {
          $and.push(_defineProperty({}, category, { $in: entitiesArray.slice(0) }));
        }
      });

      utils.forEach(_this5.model.state[entities].show.$and || [_this5.model.state[entities].show], function (show$and) {
        utils.forEach(show$and, function (filter, key) {
          if (!$andKeys.includes(key)) {
            $and.push(utils.deepClone(filter));
          }
        });
      });

      setObj[entities] = { show: $and.length > 1 ? { $and: $and } : $and[0] || {} };
    });
    this.model.state.set(setObj);
  },
  showHideSearch: function showHideSearch() {
    if (this.parent.getPanelMode() !== "show") return;

    var search = this.input_search.node().value || "";
    search = search.toLowerCase();
    this.list.selectAll(".vzb-show-item").classed("vzb-hidden", function (d) {
      var lower = (d.label || "").toString().toLowerCase();
      return lower.indexOf(search) === -1;
    });

    if (search !== "") {
      this.list.selectAll(".vzb-accordion-section").classed("vzb-accordion-active", true);
    }
  },
  showHideButtons: function showHideButtons() {
    if (this.parent.getPanelMode() !== "show") return;

    this.deselect_all.classed("vzb-hidden", this.hideResetButton());
    //
    this.apply.classed("vzb-hidden", false).classed("vzb-disabled", true);
  },
  hideResetButton: function hideResetButton() {
    var _this6 = this;

    var showEquals = true;
    var spaceModels = this.model.state.marker._space;
    utils.forEach(this.KEYS, function (key) {
      showEquals = utils.comparePlainObjects(_this6.resetFilter[key] || {}, utils.find(spaceModels, function (model) {
        return model.dim === key;
      }).show);
      return showEquals;
    });

    return showEquals;
  },
  resetShow: function resetShow() {
    var _this7 = this;

    var setProps = {};
    var spaceModels = this.model.state.marker._space;
    this.KEYS.forEach(function (key) {
      var entities = utils.find(spaceModels, function (model) {
        return model.dim === key;
      })._name;
      setProps[entities] = { show: _this7.resetFilter[key] || {} };
    });
    this.model.state.set(setProps);
  },
  closeClick: function closeClick() {
    this.applyShowChanges();
  }
});

exports.default = Show;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(9) && !__webpack_require__(4)(function () {
  return Object.defineProperty(__webpack_require__(81)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(7);


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(17);
var toIObject = __webpack_require__(18);
var arrayIndexOf = __webpack_require__(64)(false);
var IE_PROTO = __webpack_require__(83)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(10);
var anObject = __webpack_require__(2);
var getKeys = __webpack_require__(40);

module.exports = __webpack_require__(9) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(18);
var gOPN = __webpack_require__(43).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(40);
var gOPS = __webpack_require__(65);
var pIE = __webpack_require__(60);
var toObject = __webpack_require__(11);
var IObject = __webpack_require__(59);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(4)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 122 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(13);
var isObject = __webpack_require__(6);
var invoke = __webpack_require__(124);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 124 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(3).parseInt;
var $trim = __webpack_require__(55).trim;
var ws = __webpack_require__(87);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(3).parseFloat;
var $trim = __webpack_require__(55).trim;

module.exports = 1 / $parseFloat(__webpack_require__(87) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(24);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(6);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 129 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(90);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(2);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(13);
var toObject = __webpack_require__(11);
var IObject = __webpack_require__(59);
var toLength = __webpack_require__(8);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(41);
var toLength = __webpack_require__(8);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(102);
__webpack_require__(0)({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(9) && /./g.flags != 'g') __webpack_require__(10).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(61)
});


/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var newPromiseCapability = __webpack_require__(106);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(140);
var validate = __webpack_require__(48);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(73)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(10).f;
var create = __webpack_require__(42);
var redefineAll = __webpack_require__(47);
var ctx = __webpack_require__(23);
var anInstance = __webpack_require__(45);
var forOf = __webpack_require__(46);
var $iterDefine = __webpack_require__(92);
var step = __webpack_require__(134);
var setSpecies = __webpack_require__(44);
var DESCRIPTORS = __webpack_require__(9);
var fastKey = __webpack_require__(36).fastKey;
var validate = __webpack_require__(48);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(140);
var validate = __webpack_require__(48);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(73)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var each = __webpack_require__(30)(0);
var redefine = __webpack_require__(15);
var meta = __webpack_require__(36);
var assign = __webpack_require__(121);
var weak = __webpack_require__(143);
var isObject = __webpack_require__(6);
var validate = __webpack_require__(48);
var NATIVE_WEAK_MAP = __webpack_require__(48);
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(73)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(47);
var getWeak = __webpack_require__(36).getWeak;
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var anInstance = __webpack_require__(45);
var forOf = __webpack_require__(46);
var createArrayMethod = __webpack_require__(30);
var $has = __webpack_require__(17);
var validate = __webpack_require__(48);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(25);
var toLength = __webpack_require__(8);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(43);
var gOPS = __webpack_require__(65);
var anObject = __webpack_require__(2);
var Reflect = __webpack_require__(3).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(66);
var isObject = __webpack_require__(6);
var toLength = __webpack_require__(8);
var ctx = __webpack_require__(23);
var IS_CONCAT_SPREADABLE = __webpack_require__(7)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(8);
var repeat = __webpack_require__(89);
var defined = __webpack_require__(28);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(40);
var toIObject = __webpack_require__(18);
var isEnum = __webpack_require__(60).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(54);
var from = __webpack_require__(150);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(46);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 151 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

var _dimensionmanager = __webpack_require__(401);

var _dimensionmanager2 = _interopRequireDefault(_dimensionmanager);

var _datamanager = __webpack_require__(402);

var _datamanager2 = _interopRequireDefault(_datamanager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var class_loading_first = "vzb-loading-first";
var class_loading_data = "vzb-loading-data";
var class_placeholder = "vzb-placeholder";
var class_buttons_off = "vzb-buttonlist-off";

var templates = {};

//tool model is quite simple and doesn't need to be registered
var ToolModel = _model2.default.extend({
  /**
   * Initializes the tool model.
   * @param {Tool}   the tool this tool model belongs to
   * @param {Object} values The initial values of this model
   */
  init: function init(tool, external_model) {
    this._id = utils.uniqueId("tm");
    this._type = "tool";
    this._component = tool;
    this.dimensionManager = (0, _dimensionmanager2.default)(this);
    this.dataManager = (0, _datamanager2.default)(this);

    // defaults are defined on the Tool
    // this way, each tool can have it's own default model
    this.getClassDefaults = function () {
      return tool.default_model;
    };

    // combine listeners from tool and external page to one object
    var listeners = utils.extend(tool.getToolListeners(), external_model.bind);
    delete external_model.bind; // bind shouldn't go to model tree

    this._super(tool.name, external_model, null, listeners);
  },


  /**
   * @return {object} Defaults of tool model and children
   * Tool defaults overwrite other models' default
   */
  getDefaults: function getDefaults() {
    return utils.deepExtend({}, this.getSubmodelDefaults(), this.getClassDefaults());
  },
  validate: function validate() {

    var max = 10;
    var c = 0;
    var _this = this;

    function validate_func(c) {
      // ToolModel uses validate function declared on Tool so each Tool can have its own validation.
      var model = JSON.stringify(_this.getPlainObject());
      _this._component.validate(_this);
      var model2 = JSON.stringify(_this.getPlainObject());

      if (c >= max) {
        utils.error("Max validation loop.");
      } else if (model !== model2) {
        validate_func(c++);
      }
    }

    validate_func(c);
  }
});

//tool
var Tool = _component2.default.extend({
  /**
   * Initializes the tool
   * @param {Object} placeholder object
   * @param {Object} external_model External model such as state, data, etc
   */
  init: function init(placeholder, external_model) {
    this._id = utils.uniqueId("t");

    this.template = this.getToolTemplate();

    // super also calls createModel
    this._super({
      placeholder: placeholder,
      model: external_model
    });

    this.prerender();
    this.setCSSClasses();
    this.setResizeHandler();

    this.postrender();
  },
  createModel: function createModel(external_model) {
    external_model = external_model || {}; //external model can be undefined
    external_model.bind = external_model.bind || {}; //bind functions can be undefined
    this.model = new ToolModel(this, external_model);
    this.model.setInterModelListeners();
  },
  getToolTemplate: function getToolTemplate() {
    return this.template || '<div class="vzb-tool vzb-tool-' + this.name + '">' + '<div class="vzb-tool-stage">' + '<div class="vzb-tool-viz">' + "</div>" + '<div class="vzb-tool-time-speed-sliders">' + '<div class="vzb-tool-timeslider">' + "</div>" + '<div class="vzb-tool-stepped-speed-slider">' + "</div>" + "</div>" + "</div>" + '<div class="vzb-tool-sidebar">' + '<div class="vzb-tool-dialogs">' + "</div>" + '<div class="vzb-tool-buttonlist">' + "</div>" + "</div>" + '<div class="vzb-tool-datanotes vzb-hidden">' + "</div>" + '<div class="vzb-tool-treemenu vzb-hidden">' + "</div>" + '<div class="vzb-tool-datawarning vzb-hidden">' + "</div>" + '<div class="vzb-tool-labels vzb-hidden">' + "</div>" + "</div>";
  },
  getToolListeners: function getToolListeners() {
    var _this2 = this;

    var _this = this;
    return utils.extend(this.model_binds, {
      "readyOnce": function readyOnce() {
        return _this2.setResizeHandler();
      },
      "change": function change(evt, path) {
        if (_this._ready) {
          _this.model.validate();

          if (evt.source.persistent) _this.model.trigger(new _events.DefaultEvent(evt.source, "persistentChange"));
        }
      },
      "hook_change": function hook_change() {
        if (!_this.model.state.time.splash) {
          // not block when it initial splash screen
          _this.beforeLoading();
        }
      },
      "resize:ui": function resizeUi() {
        if (_this._ready) {
          _this.triggerResize();
        }
      },
      "translate:locale": function translateLocale() {
        _this.translateStrings();
        _this.model.ui.setRTL(_this.model.locale.isRTL());
      },
      "load_error1": function load_error1(evt, error) {
        _this2.renderError(error);
      }
    });
  },
  setResizeHandler: function setResizeHandler() {
    //only tools have layout (manage sizes)
    this.model.ui.setContainer(this.element);
  },


  /**
   * Returns width and height of the area excluding time slider and toolbar/sidebar
   */
  getVizWidthHeight: function getVizWidthHeight() {
    var width = 0,
        height = 0;
    if (this.element) {
      width = d3.select(this.element).select(".vzb-tool-viz").node().clientWidth;
      height = d3.select(this.element).select(".vzb-tool-viz").node().clientHeight;
    } else {
      utils.warn("Tool getVizWidthHeight(): missing this.element");
    }

    return { width: width, height: height };
  },


  triggerResize: utils.throttle(function () {
    this.trigger("resize");
  }, 100),

  startLoading: function startLoading() {
    var _this3 = this;

    this._super();

    Promise.all([this.model.startPreload(), this.startPreload()]).then(this.afterPreload.bind(this)).then(this.loadSplashScreen.bind(this)).then(function () {
      return utils.delay(300);
    }).then(this.model.startLoading.bind(this.model)).then(this.finishLoading.bind(this)).catch(function (error) {
      utils.error("error in tool promise chain");
      _this3.model.triggerLoadError(error);
    });
  },
  loadSplashScreen: function loadSplashScreen() {
    var _this4 = this;

    //if one of the hooks was configured to show time, then there is no point doing splash screen
    var somethingShowsTime = this.model.state.marker.getSubhooks().some(function (h) {
      return h.which === _this4.model.state.time.dim;
    });
    if (this.model.ui.splash && !somethingShowsTime) {
      //TODO: cleanup hardcoded splash screen
      this.model.state.time.splash = true;
      return this.model.startLoading({
        splashScreen: true
      });
    }
    return Promise.resolve();
  },
  finishLoading: function finishLoading() {
    this.model.state.time.splash = false;
  },
  getPersistentModel: function getPersistentModel() {
    //try to find functions in properties of model.
    function removeFunctions(model) {
      for (var childKey in model) {
        if (typeof model[childKey] === "function") {
          delete model[childKey];
          utils.warn("minModel validation. Function found in enumerable properties of " + childKey + ". This key is deleted from minModel");
        } else if (_typeof(model[childKey]) === "object") removeFunctions(model[childKey]);
      }
    }

    var currentToolModel = this.model.getPlainObject(true); // true = get only persistent model values
    removeFunctions(currentToolModel);
    return currentToolModel;
  },
  getPersistentMinimalModel: function getPersistentMinimalModel(diffModel) {
    var defaultModel = this.model.getDefaults();
    var currentPersistentModel = this.getPersistentModel();
    var redundantModel = utils.deepExtend(defaultModel, diffModel);
    return utils.diffObject(currentPersistentModel, redundantModel);
  },


  /**
   * Clears a tool
   */

  clear: function clear() {
    this.model.ui.clear();
    this.setModel = this.getModel = function () {
      return void 0;
    };
    this._super();
  },


  /**
   * Sets model from external page
   * @param {Object} JSONModel new model in JSON format
   * @param {Boolean} overwrite overwrite everything instead of extending
   */
  setModel: function setModel(newModelJSON, overwrite) {
    if (overwrite) {
      this.model.reset(newModelJSON);
    } else {
      this.model.set(newModelJSON);
    }
    this.setCSSClasses();
  },


  /**
   * get model
   * @return {Object} JSON object of model
   */
  getModel: function getModel() {
    return this.model.getPlainObject() || {};
  },

  /**
   * Displays loading class
   */
  beforeLoading: function beforeLoading() {
    utils.addClass(this.placeholder, class_loading_data);
  },


  /* ==========================
   * Validation and query
   * ==========================
   */
  /**
   * Validating the tool model
   * @param model the current tool model to be validated
   */
  validate: function validate(model) {
    model = this.model || model;

    if (!model || !model.state) return utils.warn("tool validation aborted: model.state looks wrong: " + model);
  },
  setCSSClasses: function setCSSClasses() {
    //add placeholder class
    utils.addClass(this.placeholder, class_placeholder);
    //add-remove buttonlist class
    if (!this.model.ui || !this.model.ui.buttons || !this.model.ui.buttons.length) {
      utils.addClass(this.element, class_buttons_off);
    } else {
      utils.removeClass(this.element, class_buttons_off);
    }
  }
});

exports.default = Tool;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*!
 * VIZABI Color Model (hook)
 */

var defaultPalettes = {
  "_continuous": {
    "_default": "#ffb600",
    "0": "#8c30e8", //"hsl(270, 80%, 55%)",
    "25": "#30a3e8", //"hsl(202.5, 80%, 55%)",
    "50": "#30e85e", //"hsl(135, 80%, 55%)",
    "75": "#e2c75a", //"hsl(48, 70%, 62%)",
    "100": "#e83030" //"hsl(0, 80%, 55%)"
  },
  "_discrete": {
    "_default": "#ffb600",
    "0": "#4cd843",
    "1": "#e83739",
    "2": "#ff7f00",
    "3": "#c027d4",
    "4": "#d66425",
    "5": "#0ab8d8",
    "6": "#bcfa83",
    "7": "#ff8684",
    "8": "#ffb04b",
    "9": "#f599f5",
    "10": "#f4f459",
    "11": "#7fb5ed"
  },
  "_default": {
    "_default": "#ffb600"
  }
};

var comparePossiblyArrays = function comparePossiblyArrays(a, b) {
  if (!Array.isArray(a) && !Array.isArray(b)) {
    return d3.color(a).hex() == d3.color(b).hex();
  } else if (Array.isArray(a) && Array.isArray(b)) {
    return utils.arrayEquals(a, b);
  }
  return false;
};

var ColorModel = _hook2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null,
      scaleType: null,
      palette: {},
      paletteHiddenKeys: [],
      paletteLabels: null,
      allow: {
        scales: ["linear", "log", "genericLog", "time", "pow", "ordinal"]
      }
    };
    return utils.deepExtend(this._super(), defaults);
  },


  /**
   * Initializes the color hook
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {
    var _this = this;
    this._type = "color";

    this._super(name, values, parent, bind);

    this._hasDefaultColor = false;

    this.on("hook_change", function () {
      if (_this._readyOnce || _this._loadCall) return;

      if (_this.palette && Object.keys(_this.palette._data).length !== 0 || _this.paletteHiddenKeys.length) {
        var defaultPalette = _this.getDefaultPalette();
        var currentPalette = _this.getPalette();
        var palette = {};
        var paletteHiddenKeys = _this.paletteHiddenKeys;
        //extend partial current palette with default palette and
        //switch current palette elements which equals
        //default palette elments to nonpersistent state
        Object.keys(defaultPalette).forEach(function (key) {
          if (!paletteHiddenKeys.includes(key) && (!currentPalette[key] || comparePossiblyArrays(defaultPalette[key], currentPalette[key]))) palette[key] = defaultPalette[key];
        });
        _this.set("palette", palette, false, false);
      }
    });
  },


  // args: {colorID, shadeID}
  getColorShade: function getColorShade(args) {
    var palette = this.getPalette();

    if (!args) return utils.warn("getColorShade() is missing arguments");

    // if colorID is not given or not found in the palette, replace it with default color
    //if (!args.colorID || !palette[args.colorID]) args.colorID = "_default";

    // if the resolved colr value is not an array (has only one shade) -- return it
    if (!utils.isArray(palette[args.colorID])) return args.shadeID == "shade" ? d3.rgb(palette[args.colorID] || this.scale(args.colorID)).darker(0.5).toString() : palette[args.colorID];

    var conceptpropsColor = this.getConceptprops().color;
    var shade = args.shadeID && conceptpropsColor && conceptpropsColor.shades && conceptpropsColor.shades[args.shadeID] ? conceptpropsColor.shades[args.shadeID] : 0;

    return palette[args.colorID][shade];
  },


  /**
   * Get the above constants
   */
  isUserSelectable: function isUserSelectable() {
    var conceptpropsColor = this.getConceptprops().color;
    return conceptpropsColor == null || conceptpropsColor.selectable == null || conceptpropsColor.selectable;
  },
  setWhich: function setWhich(newValue) {
    if (this.palette) {
      this.palette._data = {};
      this.set("paletteHiddenKeys", [], false, true);
    }
    this._super(newValue);
  },
  getColorlegendMarker: function getColorlegendMarker() {
    if (!this.colorlegendMarker) this.colorlegendMarker = this.getClosestModel("marker_colorlegend");
    return this.colorlegendMarker;
  },


  /**
   * set color
   */
  setColor: function setColor(value, pointer, oldPointer, persistent) {
    var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    if (value) value = d3.color(value).hex();

    var range = void 0;
    var paletteObj = value && pointer ? _defineProperty({}, pointer, value) : {};

    if (this.isDiscrete()) {
      range = this.scale.range();
      range[this.scale.domain().indexOf(pointer)] = value;
    } else {
      var palette = this.getPalette();
      var paletteKeysOld = Object.keys(palette);
      var defaultPalette = this.getDefaultPalette();
      var paletteHiddenKeys = this.paletteHiddenKeys;

      if (oldPointer !== null) {
        if (defaultPalette[oldPointer] && !paletteHiddenKeys.includes(oldPointer)) {
          paletteHiddenKeys.push(oldPointer);
        }

        if (paletteKeysOld.includes(oldPointer)) {
          delete palette[oldPointer];
          delete this.palette[oldPointer];
          this.palette._data[oldPointer].off();
          delete this.palette._data[oldPointer];
        }

        //use _default for emit palette change
        if (!pointer) {
          persistent = this.palette["_default"] !== defaultPalette["_default"];
          force = true;
          paletteObj["_default"] = this.palette["_default"];
          this.set("paletteHiddenKeys", paletteHiddenKeys, true, true);
        }
      }

      if (pointer && paletteHiddenKeys.includes(pointer)) {
        paletteHiddenKeys.splice(paletteHiddenKeys.indexOf(pointer), 1);
      }

      if (pointer && !this.palette[pointer] && !oldPointer) {
        this.palette.set(pointer, null, false, false);
      }

      if (pointer && value) palette[pointer] = value;

      range = Object.keys(palette).sort(function (a, b) {
        return a - b;
      }).map(function (key) {
        return palette[key];
      });

      if (paletteObj[pointer] && defaultPalette[pointer] && paletteObj[pointer] === defaultPalette[pointer]) {
        persistent = false;
      }

      if (!paletteKeysOld.includes(pointer) || oldPointer !== null) {
        //domain rebuild
        var _buildColorScale = this._buildColorScale(this.scaleType, palette),
            scale = _buildColorScale.scale;

        this.scale.domain(scale.domain());
      }
    }
    this.scale.range(range);
    this.palette.set(paletteObj, force, persistent);
  },


  /**
   * maps the value to this hook's specifications
   * @param value Original value
   * @returns hooked value
   */
  mapValue: function mapValue(value) {
    //if the property value does not exist, supply the _default
    // otherwise the missing value would be added to the domain
    if (this.scale != null && this.isDiscrete() && this._hasDefaultColor && this.scale.domain().indexOf(value) == -1) value = "_default";
    return this._super(value);
  },
  getDefaultPalette: function getDefaultPalette() {
    var conceptpropsColor = this.getConceptprops().color;
    var palette = void 0;

    this.discreteDefaultPalette = false;

    if (conceptpropsColor && conceptpropsColor.palette) {
      //specific color palette from hook concept properties
      palette = utils.clone(conceptpropsColor.palette);
    } else if (defaultPalettes[this.which]) {
      //color palette for this.which exists in palette defaults
      palette = utils.clone(defaultPalettes[this.which]);
    } else if (this.use === "constant") {
      //an explicit hex color constant #abc or #adcdef is provided
      if (/^#([0-9a-f]{3}|[0-9a-f]{6})$/.test(this.which)) {
        palette = { "_default": this.which };
      } else {
        palette = utils.clone(defaultPalettes["_default"]);
      }
    } else {
      palette = utils.clone(defaultPalettes[this.isDiscrete() ? "_discrete" : "_continuous"]);
      this.discreteDefaultPalette = true;
    }

    return palette;
  },
  _getPaletteLabels: function _getPaletteLabels() {
    var conceptpropsColor = this.getConceptprops().color;
    var paletteLabels = null;

    if (conceptpropsColor && conceptpropsColor.paletteLabels) {
      //specific color palette from hook concept properties
      paletteLabels = utils.clone(conceptpropsColor.paletteLabels);
    }
    return paletteLabels;
  },
  getPaletteLabels: function getPaletteLabels() {
    return this.paletteLabels.getPlainObject();
  },
  getPalette: function getPalette() {
    //rebuild palette if it's empty
    if ((!this.palette || Object.keys(this.palette._data).length === 0) && this.paletteHiddenKeys.length === 0) {
      var _palette = this.getDefaultPalette();
      this.set("palette", _palette, false, false);
      this.set("paletteHiddenKeys", [], false, true);
      var paletteLabels = this._getPaletteLabels();
      this.set("paletteLabels", paletteLabels, false, false);
    }
    var palette = this.palette.getPlainObject();

    if (this.scaleType !== "ordinal") {
      delete palette["_default"];
    }
    return palette;
  },


  /**
   * Gets the domain for this hook
   * @returns {Array} domain
   */
  buildScale: function buildScale() {
    var scaleType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scaleType;

    var _this = this;

    var paletteObject = _this.getPalette();

    var _buildColorScale2 = this._buildColorScale(scaleType, paletteObject),
        newScaleType = _buildColorScale2.scaleType,
        scale = _buildColorScale2.scale;

    this.scale = scale;
    this.scaleType = newScaleType;
  },
  _buildColorScale: function _buildColorScale(scaleType, paletteObject) {
    var _this = this;
    var domain = Object.keys(paletteObject);
    var range = utils.values(paletteObject);
    var scale = void 0;

    this._hasDefaultColor = domain.indexOf("_default") > -1;

    if (scaleType == "time") {

      var timeMdl = this._space.time;
      var limits = timeMdl.splash ? { min: timeMdl.parse(timeMdl.startOrigin), max: timeMdl.parse(timeMdl.endOrigin) } : { min: timeMdl.start, max: timeMdl.end };

      if (!limits.min) limits.min = new Date();
      if (!limits.max) limits.max = new Date();

      var singlePoint = limits.max - limits.min == 0;

      domain = domain.sort(function (a, b) {
        return a - b;
      });
      range = domain.map(function (m) {
        return singlePoint ? paletteObject[domain[0]] : paletteObject[m];
      });
      domain = domain.map(function (m) {
        return limits.min.valueOf() + m / 100 * (limits.max.valueOf() - limits.min.valueOf());
      });

      scale = d3.scaleUtc().domain(domain).range(range).interpolate(d3.interpolateRgb.gamma(2.2));
    } else if (!this.isDiscrete()) {

      var limitsObj = this.getLimits(this.which);
      //default domain is based on limits
      var _limits = [limitsObj.min, limitsObj.max];

      var _singlePoint = _limits[1] - _limits[0] == 0;

      domain = domain.sort(function (a, b) {
        return a - b;
      });
      range = domain.map(function (m) {
        return _singlePoint ? paletteObject[domain[0]] : paletteObject[m];
      });
      domain = domain.map(function (m) {
        return _limits[0] + m / 100 * (_limits[1] - _limits[0]);
      });

      if (d3.min(domain) <= 0 && d3.max(domain) >= 0 && scaleType === "log") scaleType = "genericLog";

      if (scaleType === "log" || scaleType === "genericLog") {
        var s = d3.scaleGenericlog().domain(_limits).range(_limits).constant(limitsObj.minAbsNear0);
        domain = domain.map(function (d) {
          return s.invert(d);
        });
      }

      scale = d3["scale" + utils.capitalize(scaleType)]().domain(domain).range(range).interpolate(d3.interpolateRgb.gamma(2.2));

      if (scale.constant) {
        scale.constant(limitsObj.minAbsNear0);
      }
    } else {
      range = range.map(function (m) {
        return utils.isArray(m) ? m[0] : m;
      });

      scaleType = "ordinal";

      if (this.discreteDefaultPalette) {
        var defaultPalette = utils.extend({}, defaultPalettes["_discrete"]);
        delete defaultPalette["_default"];
        var defaultPaletteKeys = Object.keys(defaultPalette);

        domain = [].concat(this.getUnique(this.which));
        range = domain.map(function (d, i) {
          return paletteObject[d] || defaultPalette[defaultPaletteKeys[i % defaultPaletteKeys.length]];
        });
      }

      scale = d3["scale" + utils.capitalize(scaleType)]().domain(domain).range(range).unknown(paletteObject["_default"]);
    }

    return { scale: scale, scaleType: scaleType };
  }
});

exports.default = ColorModel;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * VIZABI Group Model
 */

var GroupModel = _hook2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null,
      merge: false,
      manualSorting: null,
      spaceRef: null,
      scaleType: "ordinal" // the only one possible, right?
    };
    return utils.deepExtend(this._super(), defaults);
  },


  /**
   * Initializes the group hook
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {
    this._type = "model";

    this._super(name, values, parent, bind);
  },


  /**
   * Validates a color hook
   */
  validate: function validate() {
    //there must be no scale
    if (this.scale) this.scale = null;

    //use must be "property"
    if (this.use != "property" && this.use != "constant") {
      utils.warn("group model: use must be 'property' or 'constant'. Resetting to property...");
      this.use = "property";
    }
  },


  // Group model only gets synced with discrete models
  _receiveSyncModelUpdate: function _receiveSyncModelUpdate(sourceMdl) {
    var conceptType = sourceMdl.getConceptprops().concept_type;
    if (["entity_set", "entity_domain"].includes(conceptType) && this.use !== "constant") {
      this._super(sourceMdl);
    }
  }
});

exports.default = GroupModel;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * VIZABI Data Model (options.data)
 */

var LabelModel = _hook2.default.extend({

  /**
   * Default values for this model
   */

  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null
    };
    return utils.deepExtend(this._super(), defaults);
  },


  /**
   * Initializes the size hook
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {

    this._type = "label";

    this._super(name, values, parent, bind);
  },
  autoconfigureModel: function autoconfigureModel(autoconfigResult) {
    if (!this.which && this.autoconfig) {
      autoconfigResult = this._parent.getAvailableConcept(this.autoconfig) || this._parent.getAvailableConcept({ type: "entity_domain" });
    }
    this._super(autoconfigResult);
  }
});

exports.default = LabelModel;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _dataconnected = __webpack_require__(57);

var _dataconnected2 = _interopRequireDefault(_dataconnected);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// this and many other locale information should at some point be stored in an external file with locale information (rtl, date formats etc)
var rtlLocales = ["ar", "ar-SA", "he", "he-IL"];

var LocaleModel = _dataconnected2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      id: "en",
      filePath: "assets/translation/"
    };
    return utils.deepExtend(this._super(), defaults);
  },


  dataConnectedChildren: ["id"],
  strings: {},

  /**
   * Initializes the locale model.
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {
    this._type = "locale";

    //same constructor, with same arguments
    this._super(name, values, parent, bind);
  },
  _isLoading: function _isLoading() {
    return !this._loadedOnce || this._loadCall;
  },
  preloadData: function preloadData() {
    return this.loadData();
  },
  loadData: function loadData(opts) {
    var _this = this;

    this.setReady(false);
    this._loadCall = true;

    // load new concept properties for each data source.
    // this should be done with listeners, but the load promise can't be returned
    // through the listeners

    var promises = [];

    if (opts && opts.dataConnectedChange) {
      utils.forEach(this._root._data, function (mdl) {
        if (mdl._type === "data") promises.push(mdl.loadConceptProps());
      });
    }

    // load UI strings only if we don't have them already
    if (!this.strings[this.id]) {
      promises.push(new Promise(function (resolve, reject) {
        utils.d3json(_this.filePath + _this.id + ".json", function (error, strings) {
          if (error) return reject(error);
          _this._handleNewStrings(strings);
          resolve();
        });
      }));
    }

    return Promise.all(promises).then(function () {
      return _this.trigger("translate");
    }).catch(function (error) {
      return _this.handleLoadError(error);
    });
  },
  _handleNewStrings: function _handleNewStrings(receivedStrings) {
    this.strings[this.id] = this.strings[this.id] ? utils.extend(this.strings[this.id], receivedStrings) : receivedStrings;
  },


  /**
   * Gets a certain UI string
   * @param {String} stringId string identifier
   * @returns {string} translated string
   */
  getUIString: function getUIString(stringId) {
    if (this.strings && this.strings[this.id] && (this.strings[this.id][stringId] || this.strings[this.id][stringId] === "")) {
      return this.strings[this.id][stringId];
    }
    if (!this.strings || !this.strings[this.id]) utils.warn("Strings are not loaded for the " + this.id + " locale. Check if translation JSON is valid");
    return stringId;
  },


  /**
   * Gets the translation function
   * @returns {Function} translation function
   */
  getTFunction: function getTFunction() {
    var _this2 = this;

    return function (stringId) {
      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return Object.keys(payload).reduce(function (result, key) {
        var regexp = new RegExp("{{" + key + "}}", "g");
        return result.replace(regexp, payload[key]);
      }, _this2.getUIString(stringId));
    };
  },
  isRTL: function isRTL() {
    return rtlLocales.indexOf(this.id) !== -1;
  }
});

exports.default = LocaleModel;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * VIZABI Data Model (options.data)
 */

var SideModel = _hook2.default.extend({

  /**
   * Default values for this model
   */

  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null
    };
    return utils.deepExtend(this._super(), defaults);
  },


  /**
   * Initializes the size hook
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {

    this._type = "side";

    bind["readyOnce"] = this.readyOnce;

    this.state = { left: {}, right: {} };
    this._super(name, values, parent, bind);
  },
  readyOnce: function readyOnce() {
    if (!this.spaceRef) return;
    var dataConnChildren = this._space[this.spaceRef].dataConnectedChildren.slice(0);
    dataConnChildren.splice(dataConnChildren.indexOf("show"), 1);
    this._space[this.spaceRef].dataConnectedChildren = dataConnChildren;
  },
  switchSideState: function switchSideState() {
    var left = this.state.left;
    this.state.left = this.state.right;
    this.state.right = left;
  },
  clearSideState: function clearSideState() {
    this.state = { left: {}, right: {} };
  }
});

exports.default = SideModel;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axis = __webpack_require__(109);

var _axis2 = _interopRequireDefault(_axis);

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * VIZABI Size Model
 */

var SizeModel = _axis2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null,
      domainMin: null,
      domainMax: null,
      zoomedMin: null,
      zoomedMax: null,
      fixBaseline: 0,
      extent: [0, 0.85],
      scaleType: null,
      allow: {
        scales: ["ordinal", "linear", "log", "genericLog", "pow"]
      }
    };
    return utils.deepExtend(this._super(), defaults);
  },


  _type: "size",

  buildScale: function buildScale() {
    //do whatever axis.buildScale does
    this._super();
    //but then also clamp a numeric scale
    if (this.scaleType !== "ordinal") this.scale.clamp(true);
  }
});

exports.default = SizeModel;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * VIZABI Stack Model
 */

var palettes = {
  "ALL": "all",
  _default: "none"
};

var StackModel = _hook2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      use: null,
      which: null,
      merge: false,
      spaceRef: null
    };
    return utils.deepExtend(this._super(), defaults);
  },


  /**
   * Initializes the stack hook
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {

    this._type = "model";

    this._super(name, values, parent, bind);
  },


  /**
   * Validates a color hook
   */
  validate: function validate() {
    //there must be no scale
    if (this.scale) this.scale = null;

    //use must not be "indicator"
    if (this.use === "indicator") {
      utils.warn("stack model: use must not be 'indicator'. Resetting use to 'constant' and which to '" + palettes._default);
      this.use = "constant";
      this.which = palettes._default;
    }

    //if use is "constant"
    if (this.use === "constant" && utils.values(palettes).indexOf(this.which) == -1) {
      utils.warn("stack model: the requested value '" + this.which + "' is not allowed. resetting to '" + palettes._default);
      this.which = palettes._default;
      this.spaceRef = null;
    }
  },


  /**
   * Get the above constants
   */
  getPalettes: function getPalettes() {
    return palettes;
  },


  // Stack model only gets synced with discrete models
  _receiveSyncModelUpdate: function _receiveSyncModelUpdate(sourceMdl) {
    var conceptType = sourceMdl.getConceptprops().concept_type;
    if (["entity_set", "entity_domain"].includes(conceptType) && this.use !== "constant") {
      this._super(sourceMdl);
    }
  },


  /**
   * There must be no scale
   */
  buildScale: function buildScale() {}
});

exports.default = StackModel;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _dataconnected = __webpack_require__(57);

var _dataconnected2 = _interopRequireDefault(_dataconnected);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*!
 * VIZABI Time Model
 */

// short-cut for developers to get UTC date strings
// not meant to be used in code!!!
Date.prototype.utc = Date.prototype.toUTCString;

/*
 * Time formats for internal data
 * all in UTC
 */
var formats = {
  "year": { data: d3.time.format.utc("%Y"), ui: d3.time.format.utc("%Y") },
  "month": { data: d3.time.format.utc("%Y-%m"), ui: d3.time.format.utc("%b %Y") }, // month needs separator according to ISO to not confuse YYYYMM with YYMMDD
  "day": { data: d3.time.format.utc("%Y%m%d"), ui: d3.time.format.utc("%c") },
  "hour": { data: d3.time.format.utc("%Y%m%dT%H"), ui: d3.time.format.utc("%b %d %Y, %H") },
  "minute": { data: d3.time.format.utc("%Y%m%dT%H%M"), ui: d3.time.format.utc("%b %d %Y, %H:%M") },
  "second": { data: d3.time.format.utc("%Y%m%dT%H%M%S"), ui: d3.time.format.utc("%b %d %Y, %H:%M:%S") },
  "week": { data: weekFormat(), ui: weekFormat() }, // %Yw%W d3 week format does not comply with ISO
  "quarter": { data: quarterFormat(), ui: quarterFormat() // %Yq%Q d3 does not support quarters
  } };

var TimeModel = _dataconnected2.default.extend({

  /**
   * Default values for this model
   */
  getClassDefaults: function getClassDefaults() {
    var defaults = {
      dim: null,
      value: null,
      start: null,
      end: null,
      startOrigin: null,
      endOrigin: null,
      startSelected: null,
      endSelected: null,
      playable: true,
      playing: false,
      loop: false,
      pauseBeforeForecast: true,
      showForecast: true,
      endBeforeForecast: null,
      round: "round",
      delay: 150, //delay between animation frames
      delayThresholdX2: 90, //delay X2 boundary: if less -- then every other frame will be dropped and animation dely will be double the value
      delayThresholdX4: 45, //delay X4 boundary: if less -- then 3/4 frame will be dropped and animation dely will be 4x the value
      unit: "year",
      format: { data: null, ui: null }, // overwrite of default formats
      step: 1, //step must be integer, and expressed in units
      immediatePlay: true,
      record: false,
      offset: 0
    };
    return utils.deepExtend(this._super(), defaults);
  },


  objectLeafs: ["autoconfig"],
  dataConnectedChildren: ["startOrigin", "endOrigin", "dim"],

  /**
   * Initializes the locale model.
   * @param {String} name
   * @param {Object} values The initial values of this model
   * @param parent A reference to the parent model
   * @param {Object} bind Initial events to bind
   */
  init: function init(name, values, parent, bind) {
    this._type = "time";
    this.hooksToListen = new Set([]);

    //same constructor
    this._super(name, values, parent, bind);
    var _this = this;
    this.initFormatters();
    if (!this.endBeforeForecast) this.set("endBeforeForecast", this.decrementTime(this.parse(this.formatDate(new Date()))), null, false);
    this.dragging = false;
    this.postponePause = false;
    this.allSteps = {};
    this.delayAnimations = this.delay;

    //bing play method to model change
    this.on({

      "change:playing": function changePlaying() {
        if (_this.playing === true) {
          _this._startPlaying();
        } else {
          _this._stopPlaying();
        }
      },

      "change:format": function changeFormat() {
        _this.initFormatters();
      },

      "change:showForecast": function changeShowForecast() {
        _this.setReady(false);
        _this.checkTimeLimits();
      },

      "change:endBeforeForecast": function changeEndBeforeForecast() {
        _this.setReady(false);
        _this.checkTimeLimits();
      }

    });
  },
  initFormatters: function initFormatters() {
    if (formats[this.unit]) {
      this.formatters = formats[this.unit];
    }
    // specifically set formats overwrite unit defaults
    if (typeof this.format === "string") {
      this.formatters.data = this.formatters.ui = d3.time.format.utc(this.format);
    } else {
      if (this.format.data) {
        this.formatters.data = d3.time.format.utc(this.format.data);
      }
      if (this.format.ui) {
        this.formatters.ui = d3.time.format.utc(this.format.ui);
      }
    }
    this.validateFormatting();
  },
  preloadData: function preloadData() {
    this.dataSource = this.getClosestModel(this.data || "data");
    return this._super();
  },
  afterPreload: function afterPreload() {
    this.autoconfigureModel();
  },
  _isLoading: function _isLoading() {
    return ![].concat(_toConsumableArray(this.hooksToListen)).every(function (hook) {
      return hook._ready;
    });
  },
  autoconfigureModel: function autoconfigureModel() {
    if (!this.dim && this.autoconfig) {
      var concept = this.dataSource.getConcept(this.autoconfig);

      if (concept) this.dim = concept.concept;
      utils.printAutoconfigResult(this);
    }
  },
  setLinkWith: function setLinkWith(hook) {
    var _this2 = this;

    this.hooksToListen.add(hook);
    hook.on("startLoading", function () {
      return _this2.setReady(false);
    });
    hook.on("ready", this.checkTimeLimits.bind(this));
  },
  unsetLinkWith: function unsetLinkWith(hook) {
    var _this3 = this;

    this.hooksToListen.delete(hook);
    hook.off("startLoading", function () {
      return _this3.setReady(false);
    });
    hook.off("ready", this.checkTimeLimits.bind(this));
  },
  checkTimeLimits: function checkTimeLimits() {
    var _this4 = this;

    //if all hooks are ready, check time limits and set time model to ready
    if ([].concat(_toConsumableArray(this.hooksToListen)).every(function (hook) {
      return hook._ready;
    })) {
      var minArray = [this.startOrigin],
          maxArray = [this.endOrigin];
      if (!this.showForecast) maxArray.push(this.endBeforeForecast);

      this.hooksToListen.forEach(function (hook) {
        var tLimits = hook.getTimespan();
        if (tLimits && tLimits.min && tLimits.max) {

          if (!utils.isDate(tLimits.min) || !utils.isDate(tLimits.max)) return utils.warn("checkTimeLimits(): min-max for hook " + hook._name + " look wrong: " + tLimits.min + " " + tLimits.max + ". Expecting Date objects. Ensure that time is properly parsed in the data from reader");

          minArray.push(tLimits.min);
          maxArray.push(tLimits.max);
        }
      });

      var min = d3.max(minArray);
      var max = d3.min(maxArray);

      if (min > max) {
        utils.warn("checkTimeLimits(): Availability of the indicator's data has no intersection. I give up and just return some valid time range where you'll find no data points. Enjoy!");
        min = d3.min(minArray);
        max = d3.max(maxArray);
      }

      // change start and end (but keep startOrigin and endOrigin for furhter requests)
      var newTime = {};
      if (this.start - min != 0 || !this.start && !this.startOrigin) newTime["start"] = min;
      if (this.end - max != 0 || !this.end && !this.endOrigin) newTime["end"] = max;

      if (this.startSelected == null) newTime["startSelected"] = min;
      if (this.endSelected == null) newTime["endSelected"] = max;

      // default to current date. Other option: newTime['start'] || newTime['end'] || time.start || time.end;
      if (this.value == null) newTime["value"] = this.parse(this.formatDate(new Date()));

      this.setTreeFreezer(true);
      this.set(newTime, false, false);

      if (newTime.start || newTime.end) {
        this.hooksToListen.forEach(function (hook) {
          if (hook.which == _this4.dim) hook.buildScale();
        });
      }
      this.setTreeFreezer(false);
      this.setReady();
    }
  },


  /**
   * Formats value, start and end dates to actual Date objects
   */
  _formatToDates: function _formatToDates() {
    var persistentValues = ["value"];
    var date_attr = ["value", "start", "end", "startSelected", "endSelected", "endBeforeForecast"];
    for (var i = 0; i < date_attr.length; i++) {
      var attr = date_attr[i];
      if (!utils.isDate(this[attr])) {
        var date = this.parse(this[attr]);
        this.set(attr, date, null, persistentValues.indexOf(attr) !== -1);
      }
    }
  },


  /*
   * Formatting and parsing functions
   * @param {Date} dateObject
   * @param {String} type Either data or ui.
   * @returns {String}
   */
  formatDate: function formatDate(dateObject) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "data";

    if (["data", "ui"].indexOf(type) === -1) {
      utils.warn("Time.formatDate type parameter (" + type + ') invalid. Using "data".');
      type = "data";
    }
    if (dateObject == null) return null;
    return this.formatters[type](dateObject);
  },

  /* parse to predefined unit */
  parse: function parse(timeString) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "data";

    if (timeString == null) return null;
    return this.formatters[type].parse(timeString.toString());
  },


  /* auto-determines unit from timestring */
  findFormat: function findFormat(timeString) {
    var keys = Object.keys(formats);
    for (var i = 0; i < keys.length; i++) {
      var dateObject = formats[keys[i]].data.parse(timeString);
      if (dateObject) return { unit: keys[i], time: dateObject, type: "data" };
      dateObject = formats[keys[i]].ui.parse(timeString);
      if (dateObject) return { unit: keys[i], time: dateObject, type: "ui" };
    }
    return null;
  },


  /**
   * Validates the model
   */
  validate: function validate() {

    //check if time start and end are not defined but start and end origins are defined
    if (this.start == null && this.startOrigin) this.set("start", this.startOrigin, null, false);
    if (this.end == null && this.endOrigin) this.set("end", this.endOrigin, null, false);

    if (this.formatters) {
      this.validateFormatting();
    }

    //unit has to be one of the available_time_units
    if (!formats[this.unit]) {
      utils.warn(this.unit + ' is not a valid time unit, using "year" instead.');
      this.unit = "year";
    }

    if (this.step < 1) {
      this.step = 1;
    }

    //end has to be >= than start
    if (this.end < this.start && this.start != null) {
      this.set("end", new Date(this.start), null, false);
    }

    if (this.value < this.startSelected && this.value != null && this.startSelected != null) {
      this.set("value", new Date(this.startSelected), null, false);
    }

    if (this.value > this.endSelected && this.value != null && this.endSelected != null) {
      this.set("value", new Date(this.endSelected), null, false);
    }
    if (this.splash === false) {
      if ((!this.startSelected || this.startSelected < this.start) && this.start != null) {
        this.set({ startSelected: new Date(this.start) }, null, false /*make change non-persistent for URL and history*/);
      }

      if ((!this.endSelected || this.endSelected > this.end) && this.end != null) {
        this.set({ endSelected: new Date(this.end) }, null, false /*make change non-persistent for URL and history*/);
      }
    }

    //value has to be between start and end
    if (this.value < this.start && this.value != null && this.start != null) {
      this.set("value", new Date(this.start), null, false);
    } else if (this.value > this.end && this.value != null && this.end != null) {
      this.set("value", new Date(this.end), null, false);
    }

    if (this.playable === false && this.playing === true) {
      this.set("playing", false, null, false);
    }
  },
  validateFormatting: function validateFormatting() {
    //make sure dates are transformed into dates at all times
    if (!utils.isDate(this.start) || !utils.isDate(this.end) || !utils.isDate(this.value) || !utils.isDate(this.startSelected) || !utils.isDate(this.endSelected) || !utils.isDate(this.endBeforeForecast)) {
      this._formatToDates();
    }
  },


  /**
   * Plays time
   */
  play: function play() {
    this._startPlaying();
  },


  /**
   * Pauses time
   */
  pause: function pause(soft) {
    if (soft) {
      this.postponePause = true;
    } else {
      if (this.playing) {
        this.set("playing", false, null, false);
        this.set("value", this.value, true, true);
      }
    }
  },


  /**
   * Indicates dragging of time
   */
  dragStart: function dragStart() {
    this.dragging = true;
  },
  dragStop: function dragStop() {
    this.dragging = false;
  },


  /**
   * gets time range
   * @returns range between start and end
   */
  getRange: function getRange() {
    var is = this.getIntervalAndStep();
    return d3["utc" + is.interval].range(this.start, this.end, is.step);
  },


  /**
   * gets the d3 interval and stepsize for d3 time interval methods
   * D3's week-interval starts on sunday and d3 does not support a quarter interval
   **/
  getIntervalAndStep: function getIntervalAndStep() {
    var d3Interval = void 0,
        step = void 0;
    switch (this.unit) {
      case "week":
        d3Interval = "monday";step = this.step;break;
      case "quarter":
        d3Interval = "month";step = this.step * 3;break;
      default:
        d3Interval = this.unit;step = this.step;break;
    }
    return { interval: utils.capitalize(d3Interval), step: step };
  },


  /**
   * Gets filter for time
   * @param {Boolean} splash: get filter for current year only
   * @returns {Object} time filter
   */
  getFilter: function getFilter(_ref) {
    var splash = _ref.splash;

    var defaultStart = this.parse(this.startOrigin);
    var defaultEnd = this.parse(this.endOrigin);

    var dim = this.getDimension();
    var filter = null;

    if (splash) {
      if (this.value != null) {
        filter = {};
        filter[dim] = this.formatters.data(this.value);
      }
    } else {
      var gte = void 0,
          lte = void 0;
      if (defaultStart != null) {
        gte = this.formatters.data(defaultStart);
      }
      if (defaultEnd != null) {
        lte = this.formatters.data(defaultEnd);
      }
      if (gte || lte) {
        filter = {};
        filter[dim] = {};
        if (gte) filter[dim]["$gte"] = gte;
        if (lte) filter[dim]["$lte"] = lte;
      }
    }
    return filter;
  },


  /**
   * Gets parser for this model
   * @returns {Function} parser function
   */
  getParser: function getParser() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";

    return this.formatters[type].parse;
  },


  /**
  * Gets formatter for this model
  * @returns {Function} formatter function
  */
  getFormatter: function getFormatter() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "data";

    return this.formatters[type];
  },


  /**
   * Gets an array with all time steps for this model
   * @returns {Array} time array
   */
  getAllSteps: function getAllSteps() {
    if (!this.start || !this.end) {
      utils.warn("getAllSteps(): invalid start/end time is detected: " + this.start + ", " + this.end);
      return [];
    }
    var hash = "" + this.offset + this.start + this.end + this.step;

    //return if cached
    if (this.allSteps[hash]) return this.allSteps[hash];

    this.allSteps[hash] = [];
    var is = this.getIntervalAndStep();
    var curr = d3["utc" + is.interval].count(this.start, this.end) < this.offset ? new Date(this.start) : d3["utc" + is.interval].offset(this.start, this.offset);
    while (+curr <= +this.end) {
      var _is = this.getIntervalAndStep();
      this.allSteps[hash].push(curr);
      curr = d3["utc" + _is.interval].offset(curr, _is.step);
    }
    return this.allSteps[hash];
  },


  /**
   * Snaps the time to integer
   * possible inputs are "start", "end", "value". "value" is default
   */
  snap: function snap(what) {
    if (!this.round) return;
    if (what == null) what = "value";
    var op = "round";
    if (this.round === "ceil") op = "ceil";
    if (this.round === "floor") op = "floor";
    var is = this.getIntervalAndStep();
    var time = d3["utc" + is.interval][op](this[what]);
    if (this.value - time != 0 || this.value - this.start == 0 || this.value - this.end == 0) {
      this.set(what, time, true); //3rd argumennt forces update
    }
  },


  /**
   * Starts playing the time, initializing the interval
   */
  _startPlaying: function _startPlaying() {
    //don't play if it's not playable
    if (!this.playable) return;

    var _this = this;

    //go to start if we start from end point
    if (this.value >= this.endSelected) {
      _this.getModelObject("value").set(_this.startSelected, null, false /*make change non-persistent for URL and history*/);
    } else {
      //the assumption is that the time is already snapped when we start playing
      //because only dragging the timeslider can un-snap the time, and it snaps on drag.end
      //so we don't need this line. let's see if we survive without.
      //as a consequence, the first time update in playing sequence will have this.playing flag up
      //so the bubble chart will zoom in smoothly. Closes #1213
      //this.snap();
    }
    this.set("playing", true, null, false);
    this.playInterval(this.immediatePlay);

    this.trigger("play");
  },
  playInterval: function playInterval(immediatePlay) {
    if (!this.playing) return;
    var _this = this;
    this.delayAnimations = this.delay;
    if (this.delay < this.delayThresholdX2) this.delayAnimations *= 2;
    if (this.delay < this.delayThresholdX4) this.delayAnimations *= 2;

    var delayAnimations = immediatePlay ? 1 : this.delayAnimations;

    this._intervals.setInterval("playInterval_" + this._id, function () {
      // when time is playing and it reached the end
      if (_this.value >= _this.endSelected) {
        // if looping
        if (_this.loop) {
          // reset time to start, silently
          _this.getModelObject("value").set(_this.startSelected, null, false /*make change non-persistent for URL and history*/);
        } else {
          _this.set("playing", false, null, false);
        }
      } else {

        _this._intervals.clearInterval("playInterval_" + _this._id);

        if (_this.postponePause || !_this.playing) {
          _this.set("playing", false, null, false);
          _this.postponePause = false;
          _this.getModelObject("value").set(_this.value, true, true /*force the change and make it persistent for URL and history*/);
        } else {
          var is = _this.getIntervalAndStep();
          if (_this.delay < _this.delayThresholdX2) is.step *= 2;
          if (_this.delay < _this.delayThresholdX4) is.step *= 2;
          var time = d3["utc" + is.interval].offset(_this.value, is.step);
          if (time >= _this.endSelected) {
            // if no playing needed anymore then make the last update persistent and not overshooting
            _this.getModelObject("value").set(_this.endSelected, null, true /*force the change and make it persistent for URL and history*/);
          } else if (_this.pauseBeforeForecast && _this.value < _this.endBeforeForecast && time >= _this.endBeforeForecast) {
            _this.set("playing", false, null, false);
            _this.getModelObject("value").set(_this.endBeforeForecast, null, true /*force the change and make it persistent for URL and history*/);
          } else {
            _this.getModelObject("value").set(time, null, false /*make change non-persistent for URL and history*/);
          }
          _this.playInterval();
        }
      }
    }, delayAnimations);
  },
  incrementTime: function incrementTime(time) {
    var is = this.getIntervalAndStep();
    return d3["utc" + is.interval].offset(time, is.step);
  },
  decrementTime: function decrementTime(time) {
    var is = this.getIntervalAndStep();
    return d3["utc" + is.interval].offset(time, -is.step);
  },
  ceilTime: function ceilTime(time) {
    var is = this.getIntervalAndStep();
    return d3["utc" + is.interval].ceil(time);
  },


  /**
   * Stops playing the time, clearing the interval
   */
  _stopPlaying: function _stopPlaying() {
    this._intervals.clearInterval("playInterval_" + this._id);
    //this.snap();
    this.trigger("pause");
  }
});

/*
 * Week Format to format and parse dates
 * Conforms with ISO8601
 * Follows format: YYYYwWW: 2015w04, 3845w34, 0020w53
 */
function weekFormat() {

  var format = function format(d) {
    return formatWeekYear(d) + "w" + formatWeek(d);
  };

  format.parse = function parse(dateString) {
    var matchedDate = dateString.match(/^(\d{4})w(\d{2})$/);
    return matchedDate ? getDateFromWeek(matchedDate[1], matchedDate[2]) : null;
  };

  var formatWeekYear = function formatWeekYear(d) {
    if (!(d instanceof Date)) d = new Date(+d);
    return new Date(+d + (4 - (d.getUTCDay() || 7)) * 86400000).getUTCFullYear();
  };

  var formatWeek = function formatWeek(d) {
    if (!(d instanceof Date)) d = new Date(+d);
    var quote = new Date(+d + (4 - (d.getUTCDay() || 7)) * 86400000);
    var week = Math.ceil(((quote.getTime() - quote.setUTCMonth(0, 1)) / 86400000 + 1) / 7);
    return week < 10 ? "0" + week : week;
  };

  var getDateFromWeek = function getDateFromWeek(p1, p2) {
    var week = parseInt(p2);
    var year = p1;
    var startDateOfYear = new Date(); // always 4th of January (according to standard ISO 8601)
    startDateOfYear.setUTCFullYear(year);
    startDateOfYear.setUTCMonth(0);
    startDateOfYear.setUTCDate(4);
    var startDayOfWeek = startDateOfYear.getUTCDay() || 7;
    var dayOfWeek = 1; // Monday === 1
    var dayOfYear = week * 7 + dayOfWeek - (startDayOfWeek + 4);

    var date = formats["year"].data.parse(year);
    date = new Date(date.getTime() + dayOfYear * 24 * 60 * 60 * 1000);

    return date;
  };

  return format;
}

/*
 * Quarter Format to format and parse quarter dates
 * A quarter is the month%3
 * Follows format: YYYYqQ: 2015q4, 5847q1, 0040q2
 */
function quarterFormat() {

  var format = function format(d) {
    return formats.year.data(d) + "q" + formatQuarter(d);
  };

  format.parse = function (dateString) {
    var matchedDate = dateString.match(/^(\d{4})q(\d)$/);
    return matchedDate ? getDateFromQuarter(matchedDate[1], matchedDate[2]) : null;
  };

  var formatQuarter = function formatQuarter(d) {
    if (!(d instanceof Date)) d = new Date(+d);
    return (d.getUTCMonth() / 3 | 0) + 1;
  };

  var getDateFromQuarter = function getDateFromQuarter(p1, p2) {
    var quarter = parseInt(p2);
    var month = 3 * quarter - 2; // first month in quarter
    var year = p1;
    return formats.month.data.parse([year, (month < 9 ? "0" : "") + month].join("-"));
  };

  return format;
}

exports.default = TimeModel;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

//classes are vzb-portrait, vzb-landscape...
var class_prefix = "vzb-";
var class_presentation = "presentation";
var class_rtl = "rtl";
var class_portrait = "vzb-portrait";
var class_landscape = "vzb-landscape";

var UI = _model2.default.extend({

  screen_profiles: {
    small: {
      min_width: 0,
      min_height: 0
    },
    medium: {
      min_width: 600,
      min_height: 400
    },
    large: {
      min_width: 900,
      min_height: 520
    }
  },

  getClassDefaults: function getClassDefaults() {
    var defaults = {
      presentation: false,
      sidebarCollapse: false,
      buttons: [],
      chart: {
        showForecastOverlay: false
      },
      dialogs: {
        dialog: { find: { enableSelectShowSwitch: false } },
        popup: [],
        sidebar: [],
        moreoptions: []
      },
      splash: false
    };
    return utils.deepExtend(this._super(), defaults);
  },


  /**
   * Initializes the layout manager
   */
  init: function init(name, values, parent, bind) {

    this._type = "ui";
    this._container = null;
    //dom element
    this._curr_profile = "small";
    this._prev_size = {};

    //resize when window resizes
    this.resizeHandler = this.resizeHandler.bind(this);
    window.addEventListener("resize", this.resizeHandler);
    bind["change:presentation"] = this.updatePresentation.bind(this);

    this._super(name, values, parent, bind);

    //TODO: remove later if IOS >10.3.2
    //https://openradar.appspot.com/31725316
    var detectIOS_10_3 = function detectIOS_10_3() {
      var version = /(?:iPad|iPhone|iPod).+OS\s+(\d+)_(\d+)/.exec(navigator.userAgent);
      return version && +version[1] >= 10 && +version[2] > 2 && !window.MSStream;
    };
    if (detectIOS_10_3()) {
      this.setSize = utils.debounce(this.setSize, 500);
    }
  },
  resizeHandler: function resizeHandler() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if (this._container) {
      this.setSize(args.force || false);
    }
  },


  /**
   * Calculates the size of the newly resized container
   */
  setSize: function setSize(force) {
    var _this = this;
    var width = this._container.clientWidth;
    var height = this._container.clientHeight;

    /**
     * issue #1118
     * check if device is iPhone then add top margin for searchbar if it visible
     */
    if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) // browser is safari
    && navigator.userAgent.match(/iPhone/i) // checking device
    ) {
        this._container.style.top = 0;
        if (this._container.clientWidth > this._container.clientHeight // landscape mode
        && this._container.clientWidth < 700) {
          // small device
          var bodyHeight = this._container.clientHeight;
          var windowHeight = window.innerHeight;
          if (2 < bodyHeight - windowHeight && bodyHeight - windowHeight <= 45) {
            // check searchbar is visible
            this._container.style.top = 44 + "px";
            document.body.scrollTop = 44; // scrolling empty space
          }
        }
      }

    if (!force && this._prev_size && this._prev_size.width === width && this._prev_size.height === height || !width || !height) {
      return;
    }

    // choose profile depending on size
    utils.forEach(this.screen_profiles, function (range, size) {
      //remove class
      utils.removeClass(_this._container, class_prefix + size);
      //find best fit
      if (width >= range.min_width && height >= range.min_height) {
        _this._curr_profile = size;
      }
    });

    //update size class
    utils.addClass(this._container, class_prefix + this._curr_profile);

    //toggle, untoggle classes based on orientation
    utils.classed(this._container, class_portrait, width < height);
    utils.classed(this._container, class_landscape, !(width < height));

    this._prev_size.width = width;
    this._prev_size.height = height;
    this.trigger("resize");
  },


  /**
   * Sets the container for this layout
   * @param container DOM element
   */
  setContainer: function setContainer(container) {
    if (!container.clientWidth || !container.clientHeight) utils.warn("Vizabi is being initialised with a container of incorrect width or height. While this may be handled without a crash, it's not considered a healthy behavior. You should call Vizabi(placeholder,...) function when placeholder is not display:none and has some >0 !=auto width and height");

    this._container = container;
    this.setSize();
    this.updatePresentation();
  },


  /**
   * Sets the presentation mode for this layout
   * @param {Bool} presentation mode on or off
   */
  updatePresentation: function updatePresentation() {
    utils.classed(this._container, class_prefix + class_presentation, this.presentation);
    this.trigger("resize");
  },
  getPresentationMode: function getPresentationMode() {
    return this.presentation;
  },
  setRTL: function setRTL(flag) {
    utils.classed(this._container, class_prefix + class_rtl, flag);
  },


  /**
   * Gets the current selected profile
   * @returns {String} name of current profile
   */
  currentProfile: function currentProfile() {
    return this._curr_profile;
  },
  clear: function clear() {
    window.removeEventListener("resize", this.resizeHandler);
  }
});

exports.default = UI;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = genericLog;
//  d3.scaleGenericlog
function genericLog() {
  return d3.scaleSymlog().constant(0.1);
}

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
function detectTouchEvent(element, onTap, onLongTap) {
  var start;
  var coordX;
  var coordY;
  var namespace = onTap ? '.onTap' : '.onLongTap';
  d3.select(element).on('touchstart' + namespace, function (d, i) {
    start = d3.event.timeStamp;
    coordX = d3.event.changedTouches[0].screenX;
    coordY = d3.event.changedTouches[0].screenY;
  }).on('touchend' + namespace, function (d, i) {
    coordX = Math.abs(coordX - d3.event.changedTouches[0].screenX);
    coordY = Math.abs(coordY - d3.event.changedTouches[0].screenY);
    if (coordX < 5 && coordY < 5) {
      if (d3.event.timeStamp - start < 500) return onTap ? onTap(d, i) : undefined;
      return onLongTap ? onLongTap(d, i) : undefined;
    } else return undefined;
  });
}

//d3.selection.prototype.onTap
var onTap = function onTap(callback) {
  return this.each(function () {
    detectTouchEvent(this, callback);
  });
};

//d3.selection.prototype.onLongTap
var onLongTap = function onLongTap(callback) {
  return this.each(function () {
    detectTouchEvent(this, null, callback);
  });
};

exports.default = {
  onTap: onTap,
  onLongTap: onLongTap
};
exports.onTap = onTap;
exports.onLongTap = onLongTap;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _brushslider = __webpack_require__(79);

var _brushslider2 = _interopRequireDefault(_brushslider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI BUBBLE SIZE slider
 * Reusable bubble size slider
 */

var OPTIONS = {
  TEXT_PARAMS: { TOP: 11, LEFT: 10, MAX_WIDTH: 42, MAX_HEIGHT: 16 },
  THUMB_STROKE_WIDTH: 4
};

var PROFILES = {
  "small": {
    minRadiusPx: 0.5,
    maxRadiusEm: 0.05
  },
  "medium": {
    minRadiusPx: 1,
    maxRadiusEm: 0.05
  },
  "large": {
    minRadiusPx: 1,
    maxRadiusEm: 0.05
  }
};

var BubbleSize = _brushslider2.default.extend({

  /**
   * Initializes the timeslider.
   * Executed once before any template is rendered.
   * @param config The options passed to the component
   * @param context The component's parent
   */
  init: function init(config, context) {

    this.name = "bubblesize";

    var options = utils.extend({}, OPTIONS);
    this.options = utils.extend(options, this.options || {});
    var profiles = utils.extend({}, PROFILES);
    this.profiles = utils.extend(profiles, this.profiles || {});

    this.model_expects = [{
      name: "submodel",
      type: "size"
    }, {
      name: "locale",
      type: "locale"
    }];

    var _this = this;

    this.changeHandler = this.changeHandler.bind(this);
    this.readyHandler = this.readyHandler.bind(this);

    this.model_binds = {
      "change:submodel.domainMin": this.changeHandler,
      "change:submodel.domainMax": this.changeHandler
    };

    this._setModel = utils.throttle(this._setModel, 50);
    //contructor is the same as any component
    this._super(config, context);
  },
  changeHandler: function changeHandler(evt, path) {
    var extent = this.model.submodel.extent || [this.options.EXTENT_MIN, this.options.EXTENT_MAX];
    this._updateLabels(extent);
    this._super(evt, path);
  },
  readyHandler: function readyHandler(evt) {
    this._super(evt);
    this._setLabelsText();
  },


  /**
   * Executes after the template is loaded and rendered.
   * Ideally, it contains HTML instantiations related to template
   * At this point, this.element and this.placeholder are available as a d3 object
   */
  readyOnce: function readyOnce() {
    var _this = this;
    this._super();

    this.showArcs = _this.model.submodel.showArcs !== false;

    this.padding.bottom = this.options.BAR_WIDTH + this.options.TEXT_PARAMS.MAX_HEIGHT;

    if (_this.showArcs) {
      this.sliderEl.selectAll(".vzb-bs-slider-thumb-arc").data([0, 0]).enter().append("path").attr("class", "vzb-bs-slider-thumb-arc");
    }

    this.sliderArcsEl = this.sliderEl.selectAll(".vzb-bs-slider-thumb-arc");

    this.sliderLabelsWrapperEl = this.sliderEl.append("g");
    this.sliderLabelsWrapperEl.selectAll("text").data([0, 0]).enter().append("text").attr("class", "vzb-bs-slider-thumb-label").attr("text-anchor", function (d, i) {
      return i ? "start" : "end";
    }).attr("dy", function (d, i) {
      return i ? "-0.7em" : "1.4em";
    });

    this.sliderLabelsEl = this.sliderEl.selectAll("text.vzb-bs-slider-thumb-label");

    this._setLabelsText();
  },
  ready: function ready() {
    this._super();
    this._updateLabels();
  },
  getMinMaxBubbleRadius: function getMinMaxBubbleRadius() {
    var containerWH = this.root.getVizWidthHeight();
    var minWH = utils.hypotenuse(containerWH.width, containerWH.height);

    var min = this.profiles[this.getLayoutProfile()].minRadiusPx;
    var max = this.profiles[this.getLayoutProfile()].maxRadiusEm * minWH;
    if (min > max) max = min;

    return { min: min, max: max };
  },


  /*
   * RESIZE:
   * Executed whenever the container is resized
   */
  _updateSize: function _updateSize() {
    var _this2 = this;

    this._super();
    this.sliderLabelsWrapperEl.attr("transform", this.isRTL ? "scale(-1,1)" : null);
    this.sliderLabelsEl.attr("text-anchor", function (d, i) {
      return (_this2.isRTL ? !i : i) ? "start" : "end";
    });
  },
  _resize: function _resize() {
    var minMaxBubbleRadius = this.getMinMaxBubbleRadius();
    var padding = this.element.node().offsetWidth - minMaxBubbleRadius.max * 2;
    this.padding.top = minMaxBubbleRadius.max + this.options.BAR_WIDTH, this.padding.left = padding * 0.5;
    this.padding.right = padding * 0.5;
    this.rescaler.range([minMaxBubbleRadius.min * 2, minMaxBubbleRadius.max * 2]);

    this._super();
  },
  _getComponentWidth: function _getComponentWidth() {
    return this.getMinMaxBubbleRadius().max * 2;
  },
  _updateThumbs: function _updateThumbs(extent) {
    this._updateArcs(extent);
    this._updateLabels(extent);
  },
  _updateArcs: function _updateArcs(s) {
    if (!this.showArcs) return;
    var _this = this;
    var valueArc = d3.arc().outerRadius(function (d) {
      return _this.rescaler(d) * 0.5;
    }).innerRadius(function (d) {
      return _this.rescaler(d) * 0.5;
    }).startAngle(-Math.PI * 0.5).endAngle(Math.PI * 0.5);
    this.sliderArcsEl.data(s).attr("d", valueArc).attr("transform", function (d) {
      return "translate(" + _this.rescaler(d) * 0.5 + ",0)";
    });
  },
  _updateLabels: function _updateLabels(s) {
    var _this3 = this;

    var _this = this;
    if (s) {
      this.sliderLabelsEl.data(s);
    }
    this.sliderLabelsEl.attr("transform", function (d, i) {
      var textMargin = { v: _this3.options.TEXT_PARAMS.TOP, h: _this3.options.TEXT_PARAMS.LEFT };
      var dX = textMargin.h * (i ? 0.5 : -1.0) + _this.rescaler(d);
      var dY = 0;
      return "translate(" + (_this.isRTL ? -1 : 1) * dX + "," + dY + ")";
    });
  },
  _setLabelsText: function _setLabelsText() {
    var texts = [];

    if (this.model.submodel.use === "constant") {
      texts = ["", ""];
    } else {
      var formatter = this.model.submodel.getTickFormatter();
      var sizeScaleMinMax = this.model.submodel.getScale().domain();
      texts = [formatter(sizeScaleMinMax[0]), formatter(sizeScaleMinMax[1])];
    }

    this.sliderLabelsEl.text(function (d, i) {
      return texts[i];
    });
  }
});

exports.default = BubbleSize;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _brushslider = __webpack_require__(79);

var _brushslider2 = _interopRequireDefault(_brushslider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI BUBBLE SIZE slider
 * Reusable bubble size slider
 */

var OPTIONS = {};

var PROFILES = {
  "small": {
    minLabelTextSize: 7,
    maxLabelTextSize: 21,
    defaultLabelTextSize: 12
  },
  "medium": {
    minLabelTextSize: 7,
    maxLabelTextSize: 30,
    defaultLabelTextSize: 15
  },
  "large": {
    minLabelTextSize: 6,
    maxLabelTextSize: 48,
    defaultLabelTextSize: 20
  }
};

var SizeSlider = _brushslider2.default.extend({

  /**
   * Initializes the timeslider.
   * Executed once before any template is rendered.
   * @param config The options passed to the component
   * @param context The component's parent
   */
  init: function init(config, context) {

    this.name = "sizeslider";

    var options = utils.extend({}, OPTIONS);
    this.options = utils.extend(options, this.options || {});
    var profiles = utils.extend({}, PROFILES);
    this.profiles = utils.extend(profiles, this.profiles || {});

    //this.template = this.template || require("./sizeslider.html");

    this.propertyName = config.propertyname;

    this.model_expects = [{
      name: "submodel",
      type: "size"
    }, {
      name: "locale",
      type: "locale"
    }];

    var _this = this;

    this.changeHandler = this.changeHandler.bind(this);
    this.readyHandler = this.readyHandler.bind(this);

    this.model_binds = {
      "change:submodel.domainMin": this.changeHandler,
      "change:submodel.domainMax": this.changeHandler
    };

    this._setModel = utils.throttle(this._setModel, 50);
    //contructor is the same as any component
    this._super(config, context);
  },
  changeHandler: function changeHandler(evt, path) {
    var extent = this.model.submodel.extent || [this.options.EXTENT_MIN, this.options.EXTENT_MAX];
    this._updateLabels(extent);
    this._super(evt, path);
  },
  readyHandler: function readyHandler(evt) {
    this.modelUse = this.model.submodel.use;
    var extent = this.model.submodel.extent || [this.options.EXTENT_MIN, this.options.EXTENT_MAX];
    if (this.modelUse != "constant") {
      this.sizeScaleMinMax = this.model.submodel.getScale().domain();
      this.sliderEl.selectAll(".w").classed("vzb-hidden", false);
      this.sliderEl.select(".selection").classed("vzb-hidden", false);
      this.sliderEl.select(".overlay").classed("vzb-pointerevents-none", false);
      this._setLabelsText();
    } else {
      this.sliderEl.selectAll(".w").classed("vzb-hidden", true);
      this.sliderEl.select(".selection").classed("vzb-hidden", true);
      this.sliderEl.select(".overlay").classed("vzb-pointerevents-none", true);
      if (!this.model.submodel.which) {
        var p = this.propertyActiveProfile;
        extent[1] = (p.default - p.min) / (p.max - p.min);
        this.model.submodel.which = "_default";
      }
    }
    this._moveBrush(extent);
  },


  /**
   * Executes after the template is loaded and rendered.
   * Ideally, it contains HTML instantiations related to template
   * At this point, this.element and this.placeholder are available as a d3 object
   */
  readyOnce: function readyOnce() {
    var _this = this;
    this._super();

    var options = this.options;

    var barWidth = options.BAR_WIDTH;

    this.propertyActiveProfile = this.getPropertyActiveProfile();

    this.propertyScale = d3.scaleLinear().domain([options.EXTENT_MIN, options.EXTENT_MAX]).range([this.propertyActiveProfile.min, this.propertyActiveProfile.max]).clamp(true);

    this.padding.top = this.propertyActiveProfile.max + barWidth * 1.25;

    this.translator = this.model.locale.getTFunction();

    this.sliderLabelsWrapperEl = this.sliderEl.append("g");
    this.sliderLabelsWrapperEl.selectAll("text").data([0, 0]).enter().append("text").attr("class", function (d, i) {
      return "vzb-szs-slider-thumb-label " + (i ? "e" : "w");
    }).attr("dy", -barWidth * 1.25 + "px");

    this.sliderLabelsEl = this.sliderEl.selectAll("text.vzb-szs-slider-thumb-label");

    this.sizeScaleMinMax = this.model.submodel.getScale().domain();

    if (this.sizeScaleMinMax) {
      this._setLabelsText();
    }

    if (this.model._ready) this.readyHandler();
  },
  ready: function ready() {
    this._super();
    this._updateLabels();
  },
  getPropertyActiveProfile: function getPropertyActiveProfile() {
    var profile = this.profiles[this.getLayoutProfile()];
    return { min: profile["min" + this.propertyName], max: profile["max" + this.propertyName], default: profile["default" + this.propertyName] };
  },


  /*
   * RESIZE:
   * Executed whenever the container is resized
   */
  _updateSize: function _updateSize() {
    var _this2 = this;

    this._super();
    this.sliderLabelsWrapperEl.attr("transform", this.isRTL ? "scale(-1,1)" : null);
    this.sliderLabelsEl.attr("text-anchor", function (d, i) {
      return (_this2.isRTL ? i : !i) ? "start" : "end";
    });
  },
  _resize: function _resize() {
    this.propertyActiveProfile = this.getPropertyActiveProfile();
    this.propertyScale.range([this.propertyActiveProfile.min, this.propertyActiveProfile.max]);
    this.padding.top = this.propertyActiveProfile.max + this.options.BAR_WIDTH * 1.25;

    this._super();
  },
  _updateThumbs: function _updateThumbs(extent) {
    this._updateLabels(extent);
  },
  _updateLabels: function _updateLabels(s) {
    var _this = this;
    if (s) {
      this.sliderLabelsEl.data(s);
    }
    this.sliderLabelsEl.attr("transform", function (d, i) {
      var dX = _this.rescaler(i);
      var dY = 0;
      return "translate(" + (_this.isRTL ? -1 : 1) * dX + "," + dY + ")";
    }).attr("font-size", function (d, i) {
      return _this.propertyScale(d);
    });
    if (_this.model.submodel.use === "constant") this.sliderLabelsEl.text(function (d) {
      return ~~_this.propertyScale(d) + (_this.translator(_this.ui.constantUnit) || "");
    });
  },
  _setLabelsText: function _setLabelsText() {
    var _this = this;
    var texts = [_this.model.submodel.getTickFormatter()(_this.sizeScaleMinMax[0]), _this.model.submodel.getTickFormatter()(_this.sizeScaleMinMax[1])];
    _this.sliderLabelsEl.text(function (d, i) {
      return texts[i];
    });
  }
});

exports.default = SizeSlider;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _iconset = __webpack_require__(21);

var iconset = _interopRequireWildcard(_iconset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI BUTTONLIST
 * Reusable buttonlist component
 */

//default existing buttons
var class_active = "vzb-active";
var class_hidden = "vzb-hidden";
var class_active_locked = "vzb-active-locked";
var class_hide_btn = "vzb-dialog-side-btn";
var class_unavailable = "vzb-unavailable";
var class_vzb_fullscreen = "vzb-force-fullscreen";
var class_container_fullscreen = "vzb-container-fullscreen";

var ButtonList = _component2.default.extend({

  /**
   * Initializes the buttonlist
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, context) {

    //set properties
    var _this = this;
    this.name = this.name || "gapminder-buttonlist";
    //    this.template = '<div class="vzb-buttonlist"></div>';

    this.model_expects = [{
      name: "state",
      type: "model"
    }, {
      name: "ui",
      type: "ui"
    }, {
      name: "locale",
      type: "locale"
    }];

    this._available_buttons = {
      "find": {
        title: "buttons/find",
        icon: "search",
        required: false
      },
      "show": {
        title: "buttons/show",
        icon: "asterisk",
        required: false
      },
      "moreoptions": {
        title: "buttons/more_options",
        icon: "gear",
        required: true
      },
      "colors": {
        title: "buttons/colors",
        icon: "paintbrush",
        required: false
      },
      "mapcolors": {
        title: "buttons/mapcolors",
        icon: "paintbrush",
        required: false
      },
      "size": {
        title: "buttons/size",
        icon: "circle",
        required: false
      },
      "zoom": {
        title: "buttons/zoom",
        icon: "cursorPlus",
        required: false
      },
      "fullscreen": {
        title: "buttons/expand",
        icon: "expand",
        func: this.toggleFullScreen.bind(this),
        required: true
      },
      "trails": {
        title: "buttons/trails",
        icon: "trails",
        func: this.toggleBubbleTrails.bind(this),
        required: false,
        statebind: "ui.chart.trails",
        statebindfunc: this.setBubbleTrails.bind(this)
      },
      "forecast": {
        title: "buttons/forecast",
        icon: "forecast",
        func: this.toggleTimeForecast.bind(this),
        required: false,
        statebind: "state.time.showForecast",
        statebindfunc: this.setTimeForecast.bind(this)
      },
      "lock": {
        title: "buttons/lock",
        icon: "lock",
        func: this.toggleBubbleLock.bind(this),
        required: false,
        statebind: "ui.chart.lockNonSelected",
        statebindfunc: this.setBubbleLock.bind(this)
      },
      "inpercent": {
        title: "buttons/inpercent",
        icon: "percent",
        func: this.toggleInpercent.bind(this),
        required: false,
        statebind: "ui.chart.inpercent",
        statebindfunc: this.setInpercent.bind(this)
      },
      "presentation": {
        title: "buttons/presentation",
        icon: "presentation",
        func: this.togglePresentationMode.bind(this),
        required: false,
        statebind: "ui.presentation",
        statebindfunc: this.setPresentationMode.bind(this)
      },
      "sidebarcollapse": {
        title: "buttons/sidebar_collapse",
        icon: "angleDoubleLeft",
        func: this.toggleSidebarCollapse.bind(this),
        required: true,
        statebind: "ui.sidebarCollapse",
        statebindfunc: this.setSidebarCollapse.bind(this),
        ignoreSize: true
      },
      "about": {
        title: "buttons/about",
        icon: "about",
        required: false
      },
      "axes": {
        title: "buttons/axes",
        icon: "axes",
        required: false
      },
      "axesmc": {
        title: "buttons/axesmc",
        icon: "axes",
        required: false
      },
      "stack": {
        title: "buttons/stack",
        icon: "stack",
        required: false
      },
      "side": {
        title: "buttons/side",
        icon: "side",
        required: false
      },
      "_default": {
        title: "Button",
        icon: "asterisk",
        required: false
      }
    };

    this._active_comp = false;

    this.model_binds = {
      "change:state.marker.select": function changeStateMarkerSelect(evt) {
        if (!_this._readyOnce) return;

        _this.setBubbleTrails();
        _this.setBubbleLock();
        _this._toggleButtons();

        //scroll button list to end if bottons appeared or disappeared
        // if(_this.entitiesSelected_1 !== (_this.model.state.marker.select.length > 0)) {
        //   _this.scrollToEnd();
        // }
        // _this.entitiesSelected_1 = _this.model.state.marker.select.length > 0;
      },
      "change:ui.chart": function changeUiChart(evt, path) {
        if (!_this._readyOnce) return;

        if (path.indexOf("lockActive") > -1 || path.indexOf("lockUnavailable") > -1) {
          _this.setBubbleLock();
        }
      }
    };

    // config.ui is same as this.model.ui here but this.model.ui is not yet available because constructor hasn't been called.
    // can't call constructor earlier because this.model_binds needs to be complete before calling constructor
    config.ui.buttons.forEach(function (buttonId) {
      var button = _this._available_buttons[buttonId];
      if (button && button.statebind) {
        _this.model_binds["change:" + button.statebind] = function (evt) {
          if (!_this._readyOnce) return;
          button.statebindfunc(buttonId, evt.source.value);
        };
      }
    });

    // builds model
    this._super(config, context);

    this.validatePopupButtons(this.model.ui.buttons, this.model.ui.dialogs);
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.element = d3.select(this.placeholder);
    this.element.selectAll("div").remove();

    this.root.findChildByName("gapminder-dialogs").on("close", function (evt, params) {
      _this.setButtonActive(params.id, false);
    });

    var button_expand = (this.model.ui.dialogs || {}).sidebar || [];

    // // if button_expand has been passed in with boolean param or array must check and covert to array
    // if (button_expand){
    //   this.model.ui.dialogs.sidebar = (button_expand === true) ? this.model.ui.buttons : button_expand;
    // }

    // if (button_expand && button_expand.length !== 0) {
    //     d3.select(this.root.element).classed("vzb-dialog-expand-true", true);
    // }

    var button_list = [].concat(this.model.ui.buttons);

    // (button_expand||[]).forEach(function(button) {
    //   if (button_list.indexOf(button) === -1) {
    //     button_list.push(button);
    //   }
    // });

    this.model.ui.buttons = button_list;

    //add buttons and render components
    this._addButtons(button_list, button_expand);

    //store body overflow
    this._prev_body_overflow = document.body.style.overflow;

    this.setBubbleTrails();
    this.setTimeForecast();
    this.setBubbleLock();
    this.setInpercent();
    this.setPresentationMode();

    this._toggleButtons();
  },
  proceedClick: function proceedClick(id) {
    var _this = this;
    var btn = _this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
    var classes = btn.attr("class");
    var btn_config = _this._available_buttons[id];

    if (btn_config && btn_config.func) {
      btn_config.func(id);
    } else {
      var btn_active = classes.indexOf(class_active) === -1;

      btn.classed(class_active, btn_active);
      var evt = {};
      evt["id"] = id;
      evt["active"] = btn_active;
      _this.trigger("click", evt);
    }
  },
  validatePopupButtons: function validatePopupButtons(buttons, dialogs) {
    var _this = this;

    var popupDialogs = dialogs.popup;
    var popupButtons = buttons.filter(function (d) {
      return _this._available_buttons[d] && !_this._available_buttons[d].func;
    });
    for (var i = 0, j = popupButtons.length; i < j; i++) {
      if (popupDialogs.indexOf(popupButtons[i]) == -1) {
        return utils.error('Buttonlist: bad buttons config: "' + popupButtons[i] + '" is missing in popups list');
      }
    }
    return false; //all good
  },


  /*
   * reset buttons show state
   */
  _showAllButtons: function _showAllButtons() {
    // show all existing buttons
    var _this = this;
    var buttons = this.element.selectAll(".vzb-buttonlist-btn");
    buttons.each(function (d, i) {
      var button = d3.select(this);
      button.style("display", "");
    });
  },


  /*
  * determine which buttons are shown on the buttonlist
  */
  _toggleButtons: function _toggleButtons() {
    var _this = this;
    var parent = this.parent.element.node ? this.parent.element : d3.select(this.parent.element);

    //HERE
    var button_expand = (this.model.ui.dialogs || {}).sidebar || [];
    _this._showAllButtons();

    var buttons = this.element.selectAll(".vzb-buttonlist-btn");

    var container = this.element.node().getBoundingClientRect();

    var not_required = [];
    var required = [];

    var button_width = 80;
    var button_height = 80;
    var container_width = this.element.node().getBoundingClientRect().width;
    var container_height = this.element.node().getBoundingClientRect().height;
    var buttons_width = 0;
    var buttons_height = 0;

    buttons.filter(function (d) {
      return !d.ignoreSize;
    }).each(function (d, i) {
      var button_data = d;
      var button = d3.select(this);
      var expandable = button_expand.indexOf(button_data.id) !== -1;
      var button_margin = { top: parseInt(button.style("margin-top")), right: parseInt(button.style("margin-right")), left: parseInt(button.style("margin-left")), bottom: parseInt(button.style("margin-bottom")) };
      button_width = button.node().getBoundingClientRect().width + button_margin.right + button_margin.left;
      button_height = button.node().getBoundingClientRect().height + button_margin.top + button_margin.bottom;

      if (!button.classed(class_hidden)) {
        if (!expandable || _this.getLayoutProfile() !== "large" || _this.model.ui.sidebarCollapse) {
          buttons_width += button_width;
          buttons_height += button_height;
          //sort buttons between required and not required buttons.
          // Not required buttons will only be shown if there is space available
          if (button_data.required) {
            required.push(button);
          } else {
            not_required.push(button);
          }
        } else {
          button.style("display", "none");
        }
      }
    });
    var width_diff = buttons_width - container_width;
    var height_diff = buttons_height - container_height;
    var number_of_buttons = 1;

    //check if container is landscape or portrait
    // if portrait small or large with expand, use width
    if (parent.classed("vzb-large") && parent.classed("vzb-dialog-expand-true") || parent.classed("vzb-small") && parent.classed("vzb-portrait")) {
      //check if the width_diff is small. If it is, add to the container
      // width, to allow more buttons in a way that is still usable
      if (width_diff > 0 && width_diff <= 10) {
        container_width += width_diff;
      }
      number_of_buttons = Math.floor(container_width / button_width) - required.length;
      if (number_of_buttons < 0) {
        number_of_buttons = 0;
      }
      // else, use height
    } else {
      //check if the width_diff is small. If it is, add to the container
      // width, to allow more buttons in a way that is still usable
      if (height_diff > 0 && height_diff <= 10) {
        container_height += height_diff;
      }
      number_of_buttons = Math.floor(container_height / button_height) - required.length;
      if (number_of_buttons < 0) {
        number_of_buttons = 0;
      }
    }
    //change the display property of non required buttons, from right to
    // left
    not_required.reverse();
    var hiddenButtons = [];
    for (var i = 0, j = not_required.length - number_of_buttons; i < j; i++) {
      not_required[i].style("display", "none");
      hiddenButtons.push(not_required[i].attr("data-btn"));
    }

    var evt = {};
    evt["hiddenButtons"] = hiddenButtons;
    _this.trigger("toggle", evt);
  },


  /*
   * adds buttons configuration to the components and template_data
   * @param {Array} button_list list of buttons to be added
   */
  _addButtons: function _addButtons(button_list, button_expand) {
    var _this = this;
    this._components_config = [];
    var details_btns = [];
    if (!button_list.length) return;
    //add a component for each button
    for (var i = 0; i < button_list.length; i++) {

      var btn = button_list[i];
      var btn_config = this._available_buttons[btn];

      //add template data
      var d = btn_config ? btn : "_default";
      var details_btn = utils.clone(this._available_buttons[d]);
      if (d == "_default") {
        details_btn.title = "buttons/" + btn;
      }
      details_btn.id = btn;
      details_btn.icon = iconset[details_btn.icon];
      details_btns.push(details_btn);
    }

    var t = this.getTranslationFunction(true);

    this.element.selectAll("button").data(details_btns).enter().append("button").attr("class", function (d) {
      var cls = "vzb-buttonlist-btn";
      if (button_expand.length > 0) {
        if (button_expand.indexOf(d.id) > -1) {
          cls += " vzb-dialog-side-btn";
        }
      }

      return cls;
    }).attr("data-btn", function (d) {
      return d.id;
    }).html(function (btn) {
      return "<span class='vzb-buttonlist-btn-icon fa'>" + btn.icon + "</span><span class='vzb-buttonlist-btn-title'>" + t(btn.title) + "</span>";
    });

    var buttons = this.element.selectAll(".vzb-buttonlist-btn");

    //clicking the button
    buttons.on("click", function () {

      d3.event.preventDefault();
      d3.event.stopPropagation();

      var id = d3.select(this).attr("data-btn");
      _this.proceedClick(id);
    });
  },
  scrollToEnd: function scrollToEnd() {
    var target = 0;
    var parent = d3.select(".vzb-tool");

    if (parent.classed("vzb-portrait") && parent.classed("vzb-small")) {
      if (this.model.state.marker.select.length > 0) target = this.element.node().scrollWidth;
      this.element.node().scrollLeft = target;
    } else {
      if (this.model.state.marker.select.length > 0) target = this.element.node().scrollHeight;
      this.element.node().scrollTop = target;
    }
  },


  /*
   * RESIZE:
   * Executed whenever the container is resized
   * Ideally, it contains only operations related to size
   */
  resize: function resize() {
    //TODO: what to do when resizing?
    if (!this.element.selectAll) return utils.warn("buttonlist resize() aborted because element is not yet defined");

    //toggle presentaion off is switch to 'small' profile
    if (this.getLayoutProfile() === "small" && this.model.ui.presentation) {
      this.togglePresentationMode();
    }

    this._toggleButtons();
  },
  setButtonActive: function setButtonActive(id, boolActive) {
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

    btn.classed(class_active, boolActive);
  },
  toggleSidebarCollapse: function toggleSidebarCollapse() {
    this.model.ui.sidebarCollapse = !this.model.ui.sidebarCollapse;
    this.setSidebarCollapse();
  },
  setSidebarCollapse: function setSidebarCollapse() {
    var rootEl = d3.select(this.root.element);
    if (rootEl.classed("vzb-dialog-expand-true") == this.model.ui.sidebarCollapse) {
      rootEl.classed("vzb-dialog-expand-true", !this.model.ui.sidebarCollapse);
      this.root.trigger("resize");
    }
  },
  toggleBubbleTrails: function toggleBubbleTrails() {
    this.model.ui.chart.trails = !this.model.ui.chart.trails;
    this.setBubbleTrails();
  },
  setBubbleTrails: function setBubbleTrails() {
    var trails = (this.model.ui.chart || {}).trails;
    if (!trails && trails !== false) return;
    var id = "trails";
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
    if (!btn.node()) return utils.warn("setBubbleTrails: no button '" + id + "' found in DOM. doing nothing");

    btn.classed(class_active_locked, trails);
    btn.classed(class_hidden, this.model.state.marker.select.length == 0);
  },
  toggleTimeForecast: function toggleTimeForecast() {
    this.model.state.time.showForecast = !this.model.state.time.showForecast;
    this.setTimeForecast();
  },
  setTimeForecast: function setTimeForecast() {
    var showForecast = (this.model.state.time || {}).showForecast;
    if (!showForecast && showForecast !== false) return;
    var id = "forecast";
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
    if (!btn.node()) return utils.warn("setBubbleTrails: no button '" + id + "' found in DOM. doing nothing");

    btn.classed(class_active_locked, showForecast);
    btn.classed(class_hidden, !this.model.state.time.endBeforeForecast);
  },
  toggleBubbleLock: function toggleBubbleLock(id) {
    var active = (this.model.ui.chart || {}).lockActive;

    if (this.model.state.marker.select.length == 0 && !active) return;

    var locked = this.model.ui.chart.lockNonSelected;
    var time = this.model.state.time;
    locked = locked ? 0 : time.formatDate(time.value);
    this.model.ui.chart.lockNonSelected = locked;

    this.setBubbleLock();
  },
  setBubbleLock: function setBubbleLock() {
    var locked = (this.model.ui.chart || {}).lockNonSelected;
    var active = (this.model.ui.chart || {}).lockActive;
    var unavailable = (this.model.ui.chart || {}).lockUnavailable || false;
    if (!locked && locked !== 0) return;

    if (locked !== 0 && this.model.state.marker.select.length === 0 && !active) {
      locked = this.model.ui.chart.lockNonSelected = 0;
    }

    var id = "lock";
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
    if (!btn.node()) return utils.warn("setBubbleLock: no button '" + id + "' found in DOM. doing nothing");

    var translator = this.model.locale.getTFunction();

    //btn.classed(class_unavailable, this.model.state.marker.select.length == 0 && !active);
    btn.classed(class_unavailable, unavailable);
    if (typeof active === "undefined") {
      btn.classed(class_hidden, this.model.state.marker.select.length == 0);
    } else {
      btn.classed(class_hidden, !active);
    }

    btn.classed(class_active_locked, locked);

    btn.select(".vzb-buttonlist-btn-icon").html(iconset[locked ? "lock" : "unlock"]);

    btn.select(".vzb-buttonlist-btn-title>span").text(locked ? locked : translator("buttons/lock")).attr("data-vzb-translate", locked ? null : "buttons/lock");
  },
  toggleInpercent: function toggleInpercent() {
    this.model.ui.chart.inpercent = !this.model.ui.chart.inpercent;
    this.setInpercent();
  },
  setInpercent: function setInpercent() {
    if (typeof (this.model.ui.chart || {}).inpercent === "undefined") return;
    var id = "inpercent";
    var translator = this.model.locale.getTFunction();
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

    btn.classed(class_active_locked, this.model.ui.chart.inpercent);
  },
  togglePresentationMode: function togglePresentationMode() {
    this.model.ui.presentation = !this.model.ui.presentation;
    this.setPresentationMode();
  },
  setPresentationMode: function setPresentationMode() {
    var id = "presentation";
    var translator = this.model.locale.getTFunction();
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

    btn.classed(class_active_locked, this.model.ui.presentation);
  },
  toggleFullScreen: function toggleFullScreen(id, emulateClick) {

    if (!window) return;

    var component = this;
    var pholder = component.placeholder;
    var pholder_found = false;
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
    var fs = !this.model.ui.fullscreen;
    var body_overflow = fs ? "hidden" : this._prev_body_overflow;

    while (!(pholder_found = utils.hasClass(pholder, "vzb-placeholder"))) {
      component = component.parent;
      pholder = component.placeholder;
    }

    //TODO: figure out a way to avoid fullscreen resize delay in firefox
    if (fs) {
      this.resizeInExitHandler = false;
      launchIntoFullscreen(pholder);
      subscribeFullscreenChangeEvent.call(this, this.toggleFullScreen.bind(this, id, true));
    } else {
      this.resizeInExitHandler = !emulateClick;
      exitFullscreen.call(this);
    }
    utils.classed(pholder, class_vzb_fullscreen, fs);
    if (typeof container !== "undefined") {
      utils.classed(container, class_container_fullscreen, fs);
    }

    this.model.ui.fullscreen = fs;
    var translator = this.model.locale.getTFunction();
    btn.classed(class_active_locked, fs);

    btn.select(".vzb-buttonlist-btn-icon").html(iconset[fs ? "unexpand" : "expand"]);

    btn.select(".vzb-buttonlist-btn-title>span").text(translator("buttons/" + (fs ? "unexpand" : "expand"))).attr("data-vzb-translate", "buttons/" + (fs ? "unexpand" : "expand"));

    //restore body overflow
    document.body.style.overflow = body_overflow;

    if (!this.resizeInExitHandler) this.root.ui.resizeHandler();

    //force window resize event
    // utils.defer(function() {
    //   event = window.document.createEvent("HTMLEvents");
    //   event.initEvent("resize", true, true);
    //   event.eventName = "resize";
    //   window.dispatchEvent(event);
    // });
  }
});

function isFullscreen() {
  if (!window) return false;
  if (window.document.webkitIsFullScreen !== undefined) return window.document.webkitIsFullScreen;
  if (window.document.mozFullScreen !== undefined) return window.document.mozFullScreen;
  if (window.document.msFullscreenElement !== undefined) return window.document.msFullscreenElement;

  return false;
}

function exitHandler(emulateClickFunc) {
  if (!isFullscreen()) {
    removeFullscreenChangeEvent.call(this);
    if (!this.resizeInExitHandler) {
      emulateClickFunc();
    } else {
      this.root.ui.resizeHandler();
    }
  }
}

function subscribeFullscreenChangeEvent(exitFunc) {
  if (!window) return;
  var doc = window.document;

  this.exitFullscreenHandler = exitHandler.bind(this, exitFunc);
  doc.addEventListener("webkitfullscreenchange", this.exitFullscreenHandler, false);
  doc.addEventListener("mozfullscreenchange", this.exitFullscreenHandler, false);
  doc.addEventListener("fullscreenchange", this.exitFullscreenHandler, false);
  doc.addEventListener("MSFullscreenChange", this.exitFullscreenHandler, false);
}

function removeFullscreenChangeEvent() {
  var doc = window.document;

  doc.removeEventListener("webkitfullscreenchange", this.exitFullscreenHandler);
  doc.removeEventListener("mozfullscreenchange", this.exitFullscreenHandler);
  doc.removeEventListener("fullscreenchange", this.exitFullscreenHandler);
  doc.removeEventListener("MSFullscreenChange", this.exitFullscreenHandler);
}

function launchIntoFullscreen(elem) {
  if (elem.requestFullscreen) {
    elem.requestFullscreen();
  } else if (elem.msRequestFullscreen) {
    elem.msRequestFullscreen();
  } else if (elem.mozRequestFullScreen) {
    elem.mozRequestFullScreen();
  } else if (elem.webkitRequestFullscreen && allowWebkitFullscreenAPI()) {
    elem.webkitRequestFullscreen();
  }
}

function exitFullscreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.msExitFullscreen) {
    document.msExitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen && allowWebkitFullscreenAPI()) {
    document.webkitExitFullscreen();
  } else {
    removeFullscreenChangeEvent.call(this);
    this.resizeInExitHandler = false;
  }
}

function allowWebkitFullscreenAPI() {
  return !(navigator.vendor && navigator.vendor.indexOf("Apple") > -1 && navigator.userAgent && !navigator.userAgent.match("CriOS"));
}

exports.default = ButtonList;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _buttonlist = __webpack_require__(166);

var _buttonlist2 = _interopRequireDefault(_buttonlist);

var _iconset = __webpack_require__(21);

var iconset = _interopRequireWildcard(_iconset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI OPTIONSBUTTONLIST
 * Reusable optionsbuttonlist component
 */

//default existing buttons
var class_active = "vzb-active";
// var class_active_locked = "vzb-active-locked";
// var class_hide_btn = "vzb-dialog-side-btn";
// var class_unavailable = "vzb-unavailable";
// var class_vzb_fullscreen = "vzb-force-fullscreen";
// var class_container_fullscreen = "vzb-container-fullscreen";

var OptionsButtonList = _buttonlist2.default.extend({

  /**
   * Initializes the buttonlist
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, context) {

    //set properties
    var _this = this;
    this.name = "gapminder-optionsbuttonlist";

    this._super(config, context);
  },
  readyOnce: function readyOnce() {
    var _this = this;
    Object.keys(this._available_buttons).forEach(function (buttonId) {
      var button = _this._available_buttons[buttonId];
      button.required = !button.required;
    });

    this.buttonListComp = this.root.findChildByName("gapminder-buttonlist");

    this.buttonListComp.on("click", function (evt, button) {
      var btn = _this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + button.id + "']");
      btn.classed(class_active, button.active);
    });

    this.buttonListComp.on("toggle", function (evt, params) {
      var btn = _this.element.selectAll(".vzb-buttonlist-btn");
      var visibleButton = 0;
      btn.each(function (d) {
        var button = d3.select(this);
        var isHidden = params.hiddenButtons.indexOf(d.id) == -1;
        button.style("display", isHidden ? "none" : "");
        if (!isHidden) visibleButton++;
      });
    });

    this._super();
  },
  proceedClick: function proceedClick(id) {
    var _this = this;
    this.buttonListComp.proceedClick(id);
    var btn_data = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']").datum();
    if (btn_data.func) {
      setTimeout(function () {
        _this.root.findChildByName("gapminder-dialogs").closeAllDialogs();
      }, 200);
    }
  },
  _toggleButtons: function _toggleButtons() {
    //
  }
});

exports.default = OptionsButtonList;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _d2 = __webpack_require__(169);

var _d3 = _interopRequireDefault(_d2);

var _d4 = __webpack_require__(114);

var _d5 = _interopRequireDefault(_d4);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*!
 * VIZABI BUBBLE COLOR LEGEND COMPONENT
 */

var ColorLegend = _component2.default.extend({
  init: function init(config, context) {
    var _this = this;
    this.template = '<div class="vzb-cl-outer"></div>';
    this.name = "colorlegend";

    this.model_expects = [{
      name: "time",
      type: "time"
    }, {
      name: "entities",
      type: "entities"
    }, {
      name: "marker",
      type: "marker"
    }, {
      name: "color",
      type: "color"
    }, {
      name: "locale",
      type: "locale"
    }, {
      name: "ui",
      type: "ui"
    }];

    this.model_binds = {
      "change:color.scaleType": function changeColorScaleType(evt, path) {
        if (!_this._readyOnce || _this.colorModel.isDiscrete()) return;
        _this.updateView();
      },
      "change:color.palette": function changeColorPalette(evt, path) {
        if (!_this._readyOnce || _this.colorModel.isDiscrete() && !_this.frame && !_this.colorModel.use === "constant") return;
        _this.updateView();
      },
      "change:marker.highlight": function changeMarkerHighlight(evt, values) {
        if (!_this.colorModel.isDiscrete()) return;

        _this.model.marker.getFrame(_this.model.time.value, function (frame) {
          if (frame) {
            var _hlEntities = _this.model.marker.getHighlighted(_this.KEY);
            _this.updateGroupsOpacity(_hlEntities.map(function (d) {
              return frame[_this.colorModel._name][d];
            }));
          } else {
            _this.updateGroupsOpacity();
          }
        });
      },
      "change:time.start": function changeTimeStart(evt, original) {
        if (!_this._readyOnce || _this.model.time.splash) return;
        if (_this.colorModel.which == _this.model.time.dim) {
          _this.ready();
        }
      },
      "change:time.end": function changeTimeEnd(evt, original) {
        if (!_this._readyOnce || _this.model.time.splash) return;
        if (_this.colorModel.which == _this.model.time.dim) {
          _this.ready();
        }
      },
      "translate:locale": function translateLocale() {
        _this._translateSelectDialog(_this.translator);
        _this.colorPicker.translate(_this.translator);
        if (_this.colorModel.use === "constant") _this._translateListLegend();
      }
    };

    //contructor is the same as any component
    this._super(config, context);
  },
  readyOnce: function readyOnce() {
    this.translator = this.model.locale.getTFunction();

    //make color in options scrollable
    d3.select(this.placeholder.parentNode).classed("vzb-dialog-scrollable", true);

    this.colorModel = this.model.color;
    this.colorlegendMarker = this.colorModel.getClosestModel("marker_colorlegend");
    if (this.colorlegendMarker) this.colorlegendMarker.on("ready", this.ready.bind(this));

    this._initDOMElements();
    this.colorPicker = new _d3.default(utils.isArray(this.root.element) ? this.root.element : d3.select(this.root.element));

    this.colorPicker.translate(this.translator);
    this._initSelectDialog();
  },
  _initDOMElements: function _initDOMElements() {
    this.element = d3.select(this.element);
    this.wrapperEl = this.element.append("div").attr("class", "vzb-cl-holder");
    this.listColorsEl = this.wrapperEl.append("div").attr("class", "vzb-cl-colorlist");
    this.rainbowEl = this.wrapperEl.append("div").attr("class", "vzb-cl-rainbow");
    this.rainbowCanvasEl = this.rainbowEl.append("canvas");
    this.minimapEl = this.wrapperEl.append("div").attr("class", "vzb-cl-minimap");
    this.rainbowLegendEl = this.wrapperEl.append("div").attr("class", "vzb-cl-rainbow-legend");
    this.rainbowLegendSVG = this.rainbowLegendEl.append("svg");
    this.rainbowLegendG = this.rainbowLegendSVG.append("g");
    this.rainbowLegendG.append("rect");
    this.rainbowLegend = null;

    this.labelScaleEl = this.wrapperEl.append("div").attr("class", "vzb-cl-labelscale");
    this.labelScaleSVG = this.labelScaleEl.append("svg");
    this.labelScaleG = this.labelScaleSVG.append("g");
    this.subtitleDiv = this.wrapperEl.append("div").attr("class", "vzb-cl-subtitle");
    this.subtitleText = this.subtitleDiv.append("span").attr("class", "vzb-cl-subtitle-text");

    this.minimapSVG = this.minimapEl.append("svg");
    this.minimapG = this.minimapSVG.append("g");
  },
  _initSelectDialog: function _initSelectDialog() {
    this.moreOptionsHint = this.wrapperEl.append("span").classed("vzb-cl-more-hint vzb-hidden", true);

    this.selectDialog = this.wrapperEl.append("div").classed("vzb-cl-select-dialog vzb-hidden", true);
    this._initSelectDialogItems();
    this._translateSelectDialog(this.translator);
  },
  _initSelectDialogItems: function _initSelectDialogItems() {
    var _this2 = this;

    this.selectDialogTitle = this.selectDialog.append("div").classed("vzb-cl-select-dialog-title", true);

    this.selectDialog.append("div").classed("vzb-cl-select-dialog-close", true).html(_iconset.close).on("click", function () {
      return _this2._closeSelectDialog();
    });

    this.selectAllButton = this.selectDialog.append("div").classed("vzb-cl-select-dialog-item", true);

    this.removeElseButton = this.selectDialog.append("div").classed("vzb-cl-select-dialog-item", true);

    this.editColorButton = this.selectDialog.append("div").classed("vzb-cl-select-dialog-item vzb-cl-select-dialog-item-moreoptions", true);

    this.editColorButtonTooltip = this.editColorButton.append("div").classed("vzb-cl-select-dialog-item-tooltip", true);
  },
  _translateSelectDialog: function _translateSelectDialog(t) {
    this.moreOptionsHint.text(t("hints/color/more"));
    this.selectAllButton.text("✅ " + t("dialogs/color/select-all"));
    this.removeElseButton.text("🗑️ " + t("dialogs/color/remove-else"));
    this.editColorButton.text("🎨 " + t("dialogs/color/edit-color"));
    this.editColorButtonTooltip.text(t("dialogs/color/edit-color-blocked-hint"));
  },
  _closeSelectDialog: function _closeSelectDialog() {
    this.selectDialog.classed("vzb-hidden", true);
  },
  _bindSelectDialogItems: function _bindSelectDialogItems() {
    var _this3 = this;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _args = _slicedToArray(args, 3),
        index = _args[1],
        indicators = _args[2];

    this.selectDialogTitle.text(indicators[index].textContent);

    this.selectAllButton.on("click", function () {
      var _interact;

      (_interact = _this3._interact()).clickToSelect.apply(_interact, _toConsumableArray(args));
      _this3._closeSelectDialog();
    });

    this.removeElseButton.on("click", function () {
      var _interact2;

      (_interact2 = _this3._interact()).clickToShow.apply(_interact2, _toConsumableArray(args));
      _this3._closeSelectDialog();
    });

    this.editColorButton.on("click", function () {
      var _interact3;

      (_interact3 = _this3._interact()).clickToChangeColor.apply(_interact3, _toConsumableArray(args));
      _this3._closeSelectDialog();
    });
  },
  ready: function ready() {
    var _this4 = this;

    this.KEYS = utils.unique(this.model.marker._getAllDimensions({ exceptType: "time" }));
    this.KEY = this.colorModel._getFirstDimension();
    this.markerArray = this.model.marker.getKeys();
    this.which = this.colorModel.which;
    this.canShowMap = false;
    this.colorlegendMarkerArray = [];
    this.legendHasOwnModel = ["entity_set", "entity_domain"].includes(this.colorModel.getConceptprops().concept_type);

    if (this.legendHasOwnModel && this.colorlegendMarker) {
      if (!this.colorlegendMarker._ready) return;

      this.which = this.colorlegendMarker.getFirstEntityModel().getDimension();

      this.colorlegendMarker.getFrame(this.model.time.value, function (frame) {
        if (!frame) return utils.warn("colorlegend received empty frame in ready()");
        _this4.frame = frame;
        _this4.canShowMap = utils.keys((_this4.frame || {}).hook_geoshape || {}).length;

        _this4.colorlegendMarkerArray = _this4.colorlegendMarker.getKeys(_this4.which);

        _this4.colorlegendMarkerArray.forEach(function (d) {
          if (!((_this4.frame || {}).hook_geoshape || {})[d[_this4.which]]) _this4.canShowMap = false;
        });
        _this4.updateView();
        _this4.updateGroupsOpacity();
      });
    } else {
      this.updateView();
      this.updateGroupsOpacity();
    }
  },
  updateView: function updateView() {
    if (!this.element.selectAll) return utils.warn("colorlegend resize() aborted because element is not yet defined");

    /*POSSIBLE VIEWS:
    Rainbow color legend (for countinuous indicators and properties)
    Minimap color legend (for discrete properties where shapes are available via CL marker model)
    List color legend (for other discarete indicators and properties)
      - one constant
      - list of individual colors for every color legend mark (every country is own color)
      - list of colors informed by CL marker model (world regions)
      - colors informed by scale (discrete indicators such as one in legal slavery case: legal/illegal switches over time)
    */

    //Hide color legend if using a discrete palette that would map to all entities on the chart and therefore will be too long
    //in this case we should show colors in the "find" list instead
    var individualColors = this.colorlegendMarker && this.which == this.KEY && utils.comparePlainObjects(this.colorlegendMarker.getFirstEntityModel().getFilter(), this.model.entities.getFilter());

    this.subtitleDiv.classed("vzb-hidden", true);

    this._updateRainbowLegend(!this.colorModel.isDiscrete());
    this._updateListLegend(this.colorModel.isDiscrete() && !this.canShowMap && !individualColors);
    this._updateMinimapLegend(this.colorModel.isDiscrete() && this.canShowMap);

    this._updateSelectDialog();
  },
  _updateListLegend: function _updateListLegend(isVisible) {
    var _this5 = this;

    this.listColorsEl.classed("vzb-hidden", !isVisible);
    if (!isVisible) return;

    var KEY = this.KEY;
    var _this = this;
    var cScale = this.colorModel.getScale();

    var colorOptionsArray = [];

    if (this.colorlegendMarkerArray.length) {
      colorOptionsArray = this.which == KEY ? this.markerArray : this.colorlegendMarkerArray;
    } else {
      colorOptionsArray = cScale.domain().map(function (value) {
        var result = {};
        result[_this5.which] = value;
        return result;
      });
    }

    var colorOptions = this.listColorsEl.selectAll(".vzb-cl-option").data(utils.unique(colorOptionsArray, function (d) {
      return d[_this5.which];
    }), function (d) {
      return d[_this5.which];
    });

    colorOptions.exit().remove();

    colorOptions = colorOptions.enter().append("div").attr("class", "vzb-cl-option").each(function () {
      d3.select(this).append("div").attr("class", "vzb-cl-color-sample");
      d3.select(this).append("div").attr("class", "vzb-cl-color-legend");
    }).on("mouseover", _this._interact().mouseover).on("mouseout", _this._interact().mouseout).on("click", function () {
      if (_this.legendHasOwnModel) {
        _this5._bindSelectDialogItems.apply(_this5, arguments);
        _this5.selectDialog.classed("vzb-hidden", false);
      } else {
        var _interact4;

        (_interact4 = _this5._interact()).clickToChangeColor.apply(_interact4, arguments);
      }
    }).merge(colorOptions);

    colorOptions.each(function (d, index) {
      d3.select(this).select(".vzb-cl-color-sample").style("background-color", cScale(d[_this.which])).style("border", "1px solid " + cScale(d[_this.which]));
      //Apply names to color legend entries if color is a property
      var label = _this.colorlegendMarker && _this.frame ? _this.frame.label[d[_this.which]] : null;
      if (!label && label !== 0) label = d[_this.which];
      if (_this.colorModel.use === "constant") label = _this.translator("indicator/_default/color");
      d3.select(this).select(".vzb-cl-color-legend").text(label);
    });
  },
  _translateListLegend: function _translateListLegend() {
    this.listColorsEl.select(".vzb-cl-option .vzb-cl-color-legend").text(this.translator("indicator/_default/color"));
  },
  _updateMinimapLegend: function _updateMinimapLegend(isVisible) {
    var _this6 = this;

    this.minimapEl.classed("vzb-hidden", !isVisible);
    if (!isVisible) return;

    var _this = this;
    var cScale = this.colorModel.getScale();

    var tempdivEl = this.minimapEl.append("div").attr("class", "vzb-temp");

    this.minimapSVG.attr("viewBox", null);
    this.minimapSVG.selectAll("g").remove();
    this.minimapG = this.minimapSVG.append("g");
    this.minimapG.selectAll("path").data(this.colorlegendMarkerArray, function (d) {
      return d[_this6.which];
    }).enter().append("path").on("mouseover", this._interact().mouseover).on("mouseout", this._interact().mouseout).on("click", function () {
      _this6._bindSelectDialogItems.apply(_this6, arguments);
      _this6.selectDialog.classed("vzb-hidden", false);
    }).each(function (d) {
      var shapeString = _this.frame.hook_geoshape[d[_this.which]].trim();

      //check if shape string starts with svg tag -- then it's a complete svg
      if (shapeString.slice(0, 4) == "<svg") {
        //append svg element from string to the temporary div
        tempdivEl.html(shapeString);
        //replace the shape string with just the path data from svg
        //TODO: this is not very resilient. potentially only the first path will be taken!
        shapeString = tempdivEl.select("svg").select("path").attr("d");
      }

      d3.select(this).attr("d", shapeString).style("fill", cScale(d[_this.which])).append("title").text(_this.frame.label[d[_this.which]]);

      tempdivEl.html("");
    });

    var gbbox = this.minimapG.node().getBBox();
    this.minimapSVG.attr("viewBox", "0 0 " + gbbox.width * 1.05 + " " + gbbox.height * 1.05);
    tempdivEl.remove();
  },
  _updateRainbowLegend: function _updateRainbowLegend(isVisible) {
    var _this7 = this;

    var _this = this;

    //Hide rainbow element if showing minimap or if color is discrete
    this.rainbowEl.classed("vzb-hidden", !isVisible);
    this.labelScaleEl.classed("vzb-hidden", !isVisible);
    this.rainbowLegendEl.classed("vzb-hidden", !isVisible);
    if (!isVisible) return;

    var gradientWidth = this.rainbowEl.node().getBoundingClientRect().width;
    var paletteKeys = Object.keys(this.colorModel.getPalette()).sort(function (a, b) {
      return a - b;
    }).map(parseFloat);
    var cScale = this.colorModel.getScale();
    var circleRadius = 6;

    var domain = void 0;
    var range = void 0;
    var formatter = this.colorModel.getTickFormatter();
    var fitIntoScale = null;

    var paletteLabels = this.colorModel.paletteLabels;

    if (paletteLabels) {

      fitIntoScale = "optimistic";

      domain = paletteLabels.map(function (val) {
        return parseFloat(val);
      });
      var paletteMax = d3.max(domain);
      range = domain.map(function (val) {
        return val / paletteMax * gradientWidth;
      });
    } else {

      domain = cScale.domain();
      var _paletteMax = d3.max(paletteKeys);
      range = paletteKeys.map(function (val) {
        return val / _paletteMax * gradientWidth;
      });
    }

    var labelScaleType = d3.min(domain) <= 0 && d3.max(domain) >= 0 && this.colorModel.scaleType === "log" ? "genericLog" : this.colorModel.scaleType;

    this.labelScale = cScale.copy().interpolate(d3.interpolate).range(range);

    var marginLeft = parseInt(this.rainbowEl.style("left"), 10) || 0;
    var marginRight = parseInt(this.rainbowEl.style("right"), 10) || marginLeft;

    this.labelScaleSVG.style("width", marginLeft + gradientWidth + marginRight + "px");
    this.labelScaleG.attr("transform", "translate(" + marginLeft + ",2)");
    this.labelsAxis = (0, _d5.default)("bottom");
    this.labelsAxis.scale(this.labelScale)
    //.tickFormat(formatter)
    .tickSizeOuter(5).tickPadding(8).tickSizeMinor(3, -3).labelerOptions({
      scaleType: this.colorModel.scaleType,
      toolMargin: {
        right: marginRight,
        left: marginLeft
      },
      showOuter: false,
      formatter: formatter,
      bump: marginLeft,
      cssFontSize: "8px",
      fitIntoScale: fitIntoScale
    });

    this.labelScaleG.call(this.labelsAxis);

    this.rainbowCanvasEl.attr("width", gradientWidth).attr("height", 1).style("width", gradientWidth + "px").style("height", "100%");

    var context = this.rainbowCanvasEl.node().getContext("2d");
    var image = context.createImageData(gradientWidth, 1);
    for (var i = 0, j = -1, c; i < gradientWidth; ++i) {
      c = d3.rgb(cScale(this.labelScale.invert(i)));
      image.data[++j] = c.r;
      image.data[++j] = c.g;
      image.data[++j] = c.b;
      image.data[++j] = 255;
    }
    context.putImageData(image, 0, 0);

    var conceptProps = this.colorModel.getConceptprops();
    var subtitle = utils.getSubtitle(conceptProps.name, conceptProps.name_short);

    this.subtitleDiv.classed("vzb-hidden", subtitle == "");
    this.subtitleText.text(subtitle);

    //rainbow legend setup
    if (this.rainbowLegendEl.style("display") !== "none") {
      var edgeDomain = d3.extent(domain);

      this.domainScale = this.labelScale.copy().domain(edgeDomain).range(edgeDomain);

      this.paletteScaleLinear = d3.scaleLinear().domain(edgeDomain).range([0, 100]);

      this.rainbowLegendSVG.style("width", marginLeft + gradientWidth + marginRight + "px");
      this.rainbowLegendG.attr("transform", "translate(" + marginLeft + ", " + 7 + ")");

      this.labelScaleEl.selectAll(".vzb-axis-value text").attr("dy", "1.5em");

      if (!edgeDomain.includes(0)) {
        //find tick with zero
        var zeroTickEl = this.labelScaleG.selectAll(".tick text").filter(function () {
          return d3.select(this).text() === "0";
        }).style("cursor", "pointer").on("dblclick", function () {
          var color = cScale(0);
          var paletteKey = +_this.paletteScaleLinear(_this.domainScale(0));
          _this.colorModel.setColor(color, "" + paletteKey, null, true, true);
        });
      }

      this.rainbowLegendG.select("rect").attr("width", gradientWidth).attr("height", 20).on("mousemove", function () {
        _this.labelScaleG.call(_this.labelsAxis.highlightValue(_this.labelScale.invert(d3.mouse(this)[0])));
      }).on("mouseleave", function () {
        return _this.labelScaleG.call(_this.labelsAxis.highlightValue("none"));
      }).on("dblclick", function () {
        var x = d3.mouse(this)[0];
        x = x <= circleRadius * 2 ? circleRadius * 2 : x >= gradientWidth - circleRadius * 2 ? gradientWidth - circleRadius * 2 : x;
        var newValue = _this.labelScale.invert(x);
        var color = cScale(newValue);
        var paletteKey = _this.paletteScaleLinear(_this.domainScale(newValue));
        _this.colorModel.setColor(color, "" + paletteKey, null, true, true);
      });

      var colorRange = cScale.range();

      var value0 = d3.min(domain) < 0 && d3.max(domain) > 0 ? this.labelScale(0) : null;
      var gIndicators = domain.map(function (val, i) {
        return { val: val, i: i, value0: value0,
          isEdgePoint: i === 0 || i === domain.length - 1,
          color: colorRange[i],
          paletteKey: paletteKeys[i],
          xMin: i - 1 < 0 ? 1 : _this7.labelScale(domain[i - 1]) + circleRadius * 2,
          xMax: i + 1 >= domain.length ? gradientWidth - 1 : _this7.labelScale(domain[i + 1]) - circleRadius * 2
        };
      });

      var legendDrag = d3.drag().on("start", function start(d, i) {
        //click сompatible node raise
        var nextSibling = this.nextSibling;
        while (nextSibling) {
          this.parentNode.insertBefore(nextSibling, this);
          nextSibling = this.nextSibling;
        }

        var circle = d3.select(this);
        var dragged = false;
        var ghostCircle = null;

        if (d.isEdgePoint) {
          ghostCircle = circle.clone().lower().classed("ghost", true).style("opacity", 0.8);
        }

        circle.classed("dragging", true);

        d3.event.on("drag", drag).on("end", end);

        function drag(d) {
          if (d3.event.x < 0) return;
          if (d3.event.x > gradientWidth) return;
          if (d3.event.x < d.xMin || d3.event.x > d.xMax) return;
          if (!dragged && d3.event.dx !== 0) dragged = true;

          d.x = d3.event.x;
          if (d.value0 !== null) {
            d.x = d.x < d.value0 - 3 || d.x > d.value0 + 3 ? d.x : d.value0;
          }

          circle.attr("cx", d.x);

          if (dragged) {
            var newValue = _this.labelScale.invert(d.x);
            var paletteKey = +_this.paletteScaleLinear(_this.domainScale(newValue));
            _this.labelScaleG.call(_this.labelsAxis.highlightValue(newValue));

            _this.colorModel.setColor(d.color, "" + paletteKey, !d.isEdgePoint ? "" + d.paletteKey : "-1", false);
            d.val = newValue;

            if (d.isEdgePoint && d.paletteKey !== paletteKey) d.isEdgePoint = false;

            d.paletteKey = paletteKey;
          }
        }

        function end(d) {
          circle.classed("dragging", false);
          if (ghostCircle) ghostCircle.remove();

          if (dragged) {
            var snapX = null;

            if (d.x < circleRadius * 2) {
              snapX = d.x < circleRadius ? 0 : circleRadius * 2;
            } else if (d.x > gradientWidth - circleRadius * 2) {
              snapX = d.x > gradientWidth - circleRadius ? gradientWidth : gradientWidth - circleRadius * 2;
            }

            utils.defer(function () {
              if (snapX !== null) {
                var newValue = _this.labelScale.invert(snapX);
                var paletteKey = +_this.paletteScaleLinear(_this.domainScale(newValue));
                _this.colorModel.setColor(d.color, "" + paletteKey, "" + d.paletteKey, false, false);
                _this.colorModel.setColor(d.color, "" + paletteKey, "" + d.paletteKey, true, true);
              } else {
                _this.colorModel.setColor(d.color, "" + d.paletteKey, null, true, true);
              }
            });
          }
        }
      });

      var dblclick = false;
      var lastClickId = void 0;

      this.rainbowLegend = this.rainbowLegendG.selectAll("circle").data(gIndicators, function (d) {
        return d.i;
      });
      this.rainbowLegend.exit().remove();
      this.rainbowLegend = this.rainbowLegend.enter().append("circle").attr("r", circleRadius + "px").attr("stroke", "#000").on("mouseenter", function (d) {
        _this.labelScaleG.call(_this.labelsAxis.highlightValue(d.val));
      }).on("mouseleave", function () {
        _this.labelScaleG.call(_this.labelsAxis.highlightValue("none"));
      }).on("click", function (d, i) {
        var d3event = { pageX: d3.event.pageX, pageY: d3.event.pageY };
        lastClickId = setTimeout(function () {
          if (!dblclick) _this._interact().clickToChangeColor(d, i, d3event);else {
            clearTimeout(lastClickId);
            dblclick = false;
          }
        }, 500);
      }).on("dblclick", function (d) {
        dblclick = true;
        if (d.isEdgePoint) return;
        utils.defer(function () {
          _this.colorModel.setColor(null, null, "" + d.paletteKey, true, true);
        });
      }).call(legendDrag).merge(this.rainbowLegend);

      this.rainbowLegend.each(function (d, i) {
        d3.select(this).attr("fill", d.color);
        d3.select(this).attr("cx", d.x = _this.labelScale(d.val));
      });
    }
  },
  _updateSelectDialog: function _updateSelectDialog() {
    var isColorSelectable = this.colorModel.isUserSelectable();
    this.editColorButtonTooltip.classed("vzb-hidden", isColorSelectable);
    this.editColorButton.classed("vzb-cl-select-dialog-item-disabled", !isColorSelectable);

    this.selectDialog.classed("vzb-hidden", true);
  },
  _highlight: function _highlight(values) {
    utils.getProp(this, ["model", "ui", "chart", "superhighlightOnMinimapHover"]) ? this.model.marker.setSuperHighlight(values) : this.model.marker.setHighlight(values);
  },
  _unhighlight: function _unhighlight() {
    utils.getProp(this, ["model", "ui", "chart", "superhighlightOnMinimapHover"]) ? this.model.marker.clearSuperHighlighted() : this.model.marker.clearHighlighted();
  },
  _interact: function _interact() {
    var _this = this;
    var KEYS = this.KEYS;
    var KEY = this.KEY;
    var which = this.which;

    return {
      mouseover: function mouseover(d, i) {
        _this.moreOptionsHint.classed("vzb-hidden", false);
        //disable interaction if so stated in concept properties
        if (!_this.colorModel.isDiscrete()) return;

        var view = d3.select(this);
        var target = d[which];

        if (_this.colorModel.use == "indicator") {
          _this.model.marker.getFrame(_this.model.time.value, function (frame) {
            if (!frame) return;

            var filterHash = Object.keys(frame[_this.colorModel._name]).filter(function (key) {
              return frame[_this.colorModel._name][key] == target;
            }).reduce(function (result, key) {
              result[key] = true;
              return result;
            }, {});

            _this._highlight(_this.markerArray.filter(function (d) {
              return filterHash[utils.getKey(d, _this.colorModel.getDataKeys())];
            }));
          });
        } else if (_this.colorModel.use == "property") {
          var filterHash = _this.colorModel.getValidItems()
          //filter so that only countries of the correct target remain
          .filter(function (f) {
            return f[_this.colorModel.which] == target;
          }).reduce(function (result, d) {
            result[d[KEY]] = true;
            return result;
          }, {});

          _this._highlight(_this.markerArray.filter(function (key) {
            return filterHash[key[KEY]];
          }));
        } else {
          // in case of constant do nothing
        }
      },
      mouseout: function mouseout(d, i) {
        _this.moreOptionsHint.classed("vzb-hidden", true);
        //disable interaction if so stated in concept properties
        if (!_this.colorModel.isDiscrete()) return;
        _this._unhighlight();
      },
      clickToChangeColor: function clickToChangeColor(d, i) {
        var d3event = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : d3.event;

        //disable interaction if so stated in concept properties
        if (!_this.colorModel.isUserSelectable()) return;
        var palette = _this.colorModel.getPalette();
        var defaultPalette = _this.colorModel.getDefaultPalette();
        var view = d3.select(this);
        var target = !_this.colorModel.isDiscrete() ? d.paletteKey : d[which];
        _this.colorPicker.colorOld(palette[target]).colorDef(defaultPalette[target]).callback(function (value, isClick) {
          return _this.colorModel.setColor(value, "" + target, null, isClick, isClick);
        }).fitToScreen([d3event.pageX, d3event.pageY]).show(true);
      },
      clickToShow: function clickToShow(d, i) {
        //disable interaction if so stated in concept properties
        if (!_this.colorModel.isDiscrete()) return;

        var view = d3.select(this);
        var target = d[which];

        var oldShow = _this.model.entities.show[which] && _this.model.entities.show[which]["$in"] ? utils.clone(_this.model.entities.show[which]["$in"]) : [];

        var entityIndex = oldShow.indexOf(d[which]);
        if (entityIndex !== -1) {
          oldShow.splice(entityIndex, 1);
        } else {
          oldShow.push(d[which]);
        }

        var show = {};
        if (oldShow.length > 0) show[which] = { "$in": oldShow };

        _this.model.entities.set({ show: show });
      },
      clickToSelect: function clickToSelect(d, i) {
        //disable interaction if so stated in concept properties
        if (!_this.colorModel.isDiscrete()) return;

        var view = d3.select(this);
        var target = d[which];

        var filterHash = _this.colorModel.getValidItems()
        //filter so that only countries of the correct target remain
        .filter(function (f) {
          return f[_this.colorModel.which] == target;
        })
        //fish out the "key" field, leave the rest behind
        .reduce(function (result, d) {
          result[d[KEY]] = true;
          return result;
        }, {});

        var select = _this.markerArray.filter(function (f) {
          return filterHash[f[KEY]];
        }).map(function (d) {
          return utils.clone(d, KEYS);
        });

        if (select.filter(function (d) {
          return _this.model.marker.isSelected(d);
        }).length == select.length) {
          _this.model.marker.clearSelected();
        } else {
          _this.model.marker.setSelect(select);
        }
      }
    };
  },
  resize: function resize() {
    this.updateView();
    this.colorPicker.resize(d3.select(".vzb-colorpicker-svg"));
  },


  /**
   * Function updates the opacity of color legend elements
   * @param   {Array} value = [] array of highlighted elements
   */
  updateGroupsOpacity: function updateGroupsOpacity() {
    var highlight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var _this = this;

    var clMarker = this.colorlegendMarker || {};
    var OPACITY_REGULAR = clMarker.opacityRegular || 0.8;
    var OPACITY_DIM = clMarker.opacityHighlightDim || 0.5;
    var OPACITY_HIGHLIGHT = 1;

    var selection = _this.canShowMap ? ".vzb-cl-minimap path" : ".vzb-cl-colorlist .vzb-cl-option .vzb-cl-color-sample";

    this.wrapperEl.selectAll(selection).style("opacity", function (d) {
      if (!highlight.length) return OPACITY_REGULAR;
      return highlight.indexOf(d[_this.which]) > -1 ? OPACITY_HIGHLIGHT : OPACITY_DIM;
    });
  }
});

exports.default = ColorLegend;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var css = {
  INVISIBLE: "vzb-invisible",
  COLOR_POINTER: "vzb-colorpicker-pointer",
  COLOR_BUTTON: "vzb-colorpicker-cell",
  COLOR_DEFAULT: "vzb-colorpicker-default",
  COLOR_SAMPLE: "vzb-colorpicker-sample",
  COLOR_PICKER: "vzb-colorpicker-svg",
  COLOR_CIRCLE: "vzb-colorpicker-circle",
  COLOR_CIRCLES: "vzb-colorpicker-circles",
  COLOR_SEGMENT: "vzb-colorpicker-segment",
  COLOR_BACKGR: "vzb-colorpicker-background"
};

var ColorPicker = function () {
  function ColorPicker(container) {
    _classCallCheck(this, ColorPicker);

    this._container = container;
    this._wrapper = this._container.select("." + css.COLOR_PICKER);

    this._init();
  }

  _createClass(ColorPicker, [{
    key: "_init",
    value: function _init() {
      this._initVariables();
      this._initCircles();
      this._style();
      this.resize(this._svg);
    }
  }, {
    key: "_initVariables",
    value: function _initVariables() {
      // radius of the central hole in color wheel: px
      this._maxWidth = 280;
      this._maxHeight = 323;

      this._colorOld = "#000";
      this._colorDef = "#000";
      this._colorWhite = "#f8f8f8";
      this._colorBlack = "#444";

      // margins in % of container's width and height
      this._margin = {
        top: 0.1,
        bottom: 0.1,
        left: 0.1,
        right: 0.1
      };

      this._initSvg();

      var _getComputedStyle = getComputedStyle(this._svg.node()),
          svgWidth = _getComputedStyle.width,
          svgHeight = _getComputedStyle.height;

      this._width = this.constructor.px2num(svgWidth);
      this._height = this.constructor.px2num(svgHeight);
      this._maxRadius = this._width / 2 * (1 - this._margin.left - this._margin.right);

      // tuning defaults
      this._nCellsH = 30; // number of cells by hues (angular)
      this._minH = 0; // which hue do we start from: 0 to 1 instead of 0 to 360
      this._nCellsL = 8; // number of cells by lightness (radial)
      this._minL = 0.4; // which lightness to start from: 0 to 1. Recommended .3...0.5
      this._satConstant = 0.8; // constant saturation for color wheel: 0 to 1. Recommended .7...0.8
      this._outerL = 0.3; // exceptional lightness of the outer circle: 0 to 1
      this._firstAngleSat = 0; // exceptional saturation at first angular segment. Set 0 to have shades of grey
      this._minRadius = 12;
      this._arc = d3.arc();

      this._pie = d3.pie().sort(null).value(function (d) {
        return 1;
      });
      this._colorPointer = null;
      this._showColorPicker = false;
      this._sampleRect = null;
      this._sampleText = null;
      this._callback = function (value) {
        return console.info("Color picker callback example. Setting color to " + value);
      };
      this._colorData = this._generateColorData();
    }
  }, {
    key: "_generateColorData",
    value: function _generateColorData() {
      var _minL = this._minL,
          _minH = this._minH,
          _nCellsL = this._nCellsL,
          _nCellsH = this._nCellsH,
          _firstAngleSat = this._firstAngleSat,
          _satConstant = this._satConstant,
          _outerL = this._outerL,
          _colorWhite = this._colorWhite,
          _colorBlack = this._colorBlack;


      var result = [];
      // loop across circles
      for (var l = 0; l < _nCellsL; l++) {
        var lightness = _minL + (1 - _minL) / _nCellsL * l;
        // new circle of cells
        result.push([]);
        // loop across angles
        for (var h = 0; h <= _nCellsH; h++) {
          var hue = 360 * (_minH + (1 - _minH) / _nCellsH * h);
          // new cell
          result[l].push({
            fill: d3.hsl(hue, h === 0 ? _firstAngleSat : _satConstant, l === 0 ? _outerL : lightness).hex(),

            stroke: l === 0 ? _colorWhite : _colorBlack
          });
        }
      }

      return result;
    }
  }, {
    key: "_initSvg",
    value: function _initSvg() {
      var _this = this;

      this._wrapper = this._container.append("div").style("position", "absolute").style("top", "0").style("left", "0").style("width", "100%").style("max-width", this._maxWidth + "px").style("height", "100%").style("max-height", this._maxHeight + "px").style("z-index", 9999).attr("class", css.COLOR_PICKER + " vzb-dialog-shadow").classed(css.INVISIBLE, !this._showColorPicker).on("mouseout", function () {
        return _this._cellHover(_this._colorOld);
      });

      this._svg = this._wrapper.append("svg").style("width", "100%").style("height", "100%");
    }
  }, {
    key: "_initCircles",
    value: function _initCircles() {
      var _this2 = this;

      var _svg = this._svg,
          _maxHeight = this._maxHeight,
          _width = this._width,
          _height = this._height,
          _margin = this._margin,
          _colorData = this._colorData,
          _nCellsL = this._nCellsL,
          _minRadius = this._minRadius,
          _maxRadius = this._maxRadius,
          _colorWhite = this._colorWhite,
          _colorBlack = this._colorBlack;


      _svg.append("rect").attr("width", _width).attr("height", _maxHeight).attr("class", css.COLOR_BACKGR).on("mouseover", function () {
        return _this2._cellHover(_this2._colorOld);
      }).on("click", function () {
        d3.event.stopPropagation();
        _this2._changeColor(_this2._colorOld);
        _this2.show(false);
      });

      var tx = _maxRadius + _width * _margin.left;
      var ty = _maxRadius + _height * _margin.top;
      var circles = _svg.append("g").attr("class", css.COLOR_CIRCLES).attr("transform", "translate(" + tx + ", " + ty + ")");

      _svg.append("rect").attr("class", css.COLOR_SAMPLE).attr("width", _width / 2).attr("height", _height * _margin.top / 2);

      this._sampleRect = _svg.append("rect").attr("class", css.COLOR_SAMPLE).attr("width", _width / 2).attr("x", _width / 2).attr("height", _height * _margin.top / 2);

      _svg.append("text").attr("x", _width * _margin.left).attr("y", _height * _margin.top / 2).attr("dy", "1.3em").attr("class", css.COLOR_SAMPLE).style("text-anchor", "start");

      this._sampleText = _svg.append("text").attr("x", _width * (1 - _margin.right)).attr("y", _height * _margin.top / 2).attr("dy", "1.3em").attr("class", css.COLOR_SAMPLE).style("text-anchor", "end");

      _svg.append("text").attr("x", _width * 0.1).attr("y", _height * (1 - _margin.bottom)).attr("dy", "1.2em").attr("class", "vzb-default-label").style("text-anchor", "start").text("default");

      _svg.append("circle").attr("class", css.COLOR_DEFAULT + " " + css.COLOR_BUTTON).attr("r", _width * _margin.left / 2).attr("cx", _width * _margin.left * 1.5).attr("cy", _height * (1 - _margin.bottom * 1.5)).on("mouseover", function () {
        d3.select(this).style("stroke", _colorBlack);
        self._cellHover(self._colorDef);
      }).on("mouseout", function () {
        d3.select(this).style("stroke", "none");
      });

      var self = this;
      circles.selectAll("." + css.COLOR_CIRCLE).data(_colorData).enter().append("g").attr("class", css.COLOR_CIRCLE).each(function (circleData, index) {
        self._arc.outerRadius(_minRadius + (_maxRadius - _minRadius) / _nCellsL * (_nCellsL - index)).innerRadius(_minRadius + (_maxRadius - _minRadius) / _nCellsL * (_nCellsL - index - 1));

        var segment = d3.select(this).selectAll("." + css.COLOR_SEGMENT).data(self._pie(circleData)).enter().append("g").attr("class", css.COLOR_SEGMENT);

        segment.append("path").attr("class", css.COLOR_BUTTON).attr("d", self._arc).style("fill", function (d) {
          return d.data.fill;
        }).style("stroke", function (d) {
          return d.data.fill;
        }).on("mouseover", function (d) {
          self._cellHover(d.data.fill, this);
        }).on("mouseout", function () {
          return self._cellUnhover();
        });
      });

      circles.append("circle").datum({ data: { fill: _colorWhite, stroke: _colorBlack } }).attr("r", _minRadius).attr("fill", _colorWhite).attr("class", css.COLOR_BUTTON).on("mouseover", function () {
        d3.select(this).style("stroke", _colorBlack);
        self._cellHover(_colorWhite);
      }).on("mouseout", function () {
        d3.select(this).style("stroke", "none");
      });

      this._colorPointer = circles.append("path").attr("class", css.COLOR_POINTER + " " + css.INVISIBLE);

      _svg.selectAll("." + css.COLOR_BUTTON).on("click", function (d) {
        d3.event.stopPropagation();
        _this2._changeColor(d ? d.data.fill : _this2._colorDef, true);
        _this2.show(false);
      });
    }
  }, {
    key: "_style",
    value: function _style() {
      var _svg = this._svg,
          _colorWhite = this._colorWhite;


      _svg.select("." + css.COLOR_BACKGR).style("fill", "white");

      _svg.select("." + css.COLOR_POINTER).style("stroke-width", 2).style("stroke", _colorWhite).style("pointer-events", "none").style("fill", "none");

      _svg.selectAll("." + css.COLOR_BUTTON).style("cursor", "pointer");

      _svg.selectAll("text").style("pointer-events", "none").style("fill", "#D9D9D9").style("font-size", "0.7em").style("text-transform", "uppercase");

      _svg.selectAll("circle." + css.COLOR_BUTTON).style("stroke-width", 2);

      _svg.selectAll("rect." + css.COLOR_SAMPLE).style("pointer-events", "none");
    }
  }, {
    key: "_cellHover",
    value: function _cellHover(value, view) {
      // show color pointer if the view is set (a cell of colorwheel)
      if (view != null) this._colorPointer.classed(css.INVISIBLE, false).attr("d", d3.select(view).attr("d")).style("stroke", d3.select(view).datum().data.stroke || _colorWhite);

      this._sampleRect.style("fill", value);
      this._sampleText.text(value);

      var isTouch = (0, _utils.isTouchDevice)();

      this._changeColor(value, isTouch);
      isTouch && this.show(false);
    }
  }, {
    key: "_changeColor",
    value: function _changeColor(color) {
      var isClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      this._callback(color, isClick);
    }
  }, {
    key: "_cellUnhover",
    value: function _cellUnhover() {
      this._colorPointer.classed(css.INVISIBLE, true);
    }
  }, {
    key: "resize",
    value: function resize(arg) {
      if (!arguments.length) return;

      if (typeof arg !== "undefined") {
        var _margin = this._margin;

        var svg = arg;

        var _getComputedStyle2 = getComputedStyle(svg.node()),
            svgWidth = _getComputedStyle2.width,
            svgHeight = _getComputedStyle2.height;

        var width = this.constructor.px2num(svgWidth);
        var height = this.constructor.px2num(svgHeight);

        var maxRadius = width / 2 * (1 - _margin.left - _margin.right);
        var selectedColor = svg.select("." + css.COLOR_DEFAULT);
        var defaultLabel = svg.select(".vzb-default-label");
        var circles = svg.select("." + css.COLOR_CIRCLES);

        var hPos = maxRadius + height * _margin.top;
        var hPosCenter = (1 + _margin.top * 0.5) * height * 0.5;

        var tx = maxRadius + width * _margin.left;
        var ty = hPos > hPosCenter ? hPosCenter : hPos;
        circles.attr("transform", "translate(" + tx + ", " + ty + ")");

        selectedColor.attr("cx", width * _margin.left * 1.5).attr("cy", height * (1 - _margin.bottom * 1.5));

        defaultLabel.attr("x", width * 0.1).attr("y", height * (1 - _margin.bottom));
      }

      return this.fitToScreen();
    }
  }, {
    key: "fitToScreen",
    value: function fitToScreen(arg) {
      var screen = this._container.node().getBoundingClientRect();
      var xPos = void 0,
          yPos = void 0;

      var _getComputedStyle3 = getComputedStyle(this._wrapper.node()),
          wrapperWidth = _getComputedStyle3.width,
          wrapperHeight = _getComputedStyle3.height,
          wrapperRight = _getComputedStyle3.right,
          wrapperTop = _getComputedStyle3.top;

      var width = this.constructor.px2num(wrapperWidth);
      var height = this.constructor.px2num(wrapperHeight);

      if (!arg) {
        xPos = screen.width - this.constructor.px2num(wrapperRight) - width;
        yPos = this.constructor.px2num(wrapperTop);
      } else {
        xPos = arg[0] - screen.left;
        yPos = arg[1] - screen.top;
      }

      var styles = { left: "" };
      if (screen.width * 0.8 <= width) {
        styles.right = (screen.width - width) * 0.5 + "px";
      } else if (xPos + width > screen.width) {
        styles.right = Math.min(screen.width * 0.1, 20) + "px";
      } else {
        styles.right = screen.width - xPos - width + "px";
      }

      if (styles.right) {
        this._wrapper.style("right", styles.right);
      }

      if (screen.height * 0.8 <= height) {
        styles.top = (screen.height - height) * 0.5 + "px";
      } else if (yPos + height * 1.2 > screen.height) {
        styles.top = screen.height * 0.9 - height + "px";
      } else {
        styles.top = yPos + "px";
      }

      if (styles.top) {
        this._wrapper.style("top", styles.top);
      }

      this._wrapper.style("left", styles.left);

      return this;
    }
  }, {
    key: "show",
    value: function show(arg) {
      if (!arguments.length) {
        return this._showColorPicker;
      }

      if (this._svg == null) {
        console.warn("Color picker is missing SVG element. Was init sequence performed?");
      }

      this._showColorPicker = arg == "toggle" ? !this._showColorPicker : arg;

      if (!this._showColorPicker) {
        this._callback = function () {
          return void 0;
        };
      }

      this._wrapper.classed(css.INVISIBLE, !this._showColorPicker);
    }
  }, {
    key: "_getOrSet",
    value: function _getOrSet(property, value) {
      property = "_" + property;

      if (arguments.length > 1) {
        this[property] = value;
        return this;
      }

      return this[property];
    }
  }, {
    key: "nCellsH",
    value: function nCellsH() {
      return this._getOrSet.apply(this, ["nCellsH"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "minH",
    value: function minH() {
      return this._getOrSet.apply(this, ["minH"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "nCellsL",
    value: function nCellsL() {
      return this._getOrSet.apply(this, ["nCellsL"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "minL",
    value: function minL() {
      return this._getOrSet.apply(this, ["minL"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "outerL",
    value: function outerL() {
      return this._getOrSet.apply(this, ["outerL"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "satConstant",
    value: function satConstant() {
      return this._getOrSet.apply(this, ["satConstant"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "firstAngleSat",
    value: function firstAngleSat() {
      return this._getOrSet.apply(this, ["firstAngleSat"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "minRadius",
    value: function minRadius() {
      return this._getOrSet.apply(this, ["minRadius"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "margin",
    value: function margin() {
      return this._getOrSet.apply(this, ["margin"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "callback",
    value: function callback() {
      return this._getOrSet.apply(this, ["callback"].concat(Array.prototype.slice.call(arguments)));
    }
  }, {
    key: "colorDef",
    value: function colorDef(arg) {
      if (!arguments.length) return this._colorDef;

      if (typeof arg !== "undefined") {
        this._colorDef = arg;
      }

      if (this._svg == null) {
        console.warn("Color picker is missing SVG element. Was init sequence performed?");
      }

      this._svg.select("." + css.COLOR_DEFAULT).style("fill", this._colorDef);

      return this;
    }
  }, {
    key: "translate",
    value: function translate(translator) {
      if (typeof translator === "function") {
        this._svg.select(".vzb-default-label").text(translator("colorpicker/default"));
      }

      return this;
    }
  }, {
    key: "colorOld",
    value: function colorOld(arg) {
      if (!arguments.length) {
        return this._colorOld;
      }

      this._colorOld = arg;

      if (this._svg == null) {
        console.warn("Color picker is missing SVG element. Was init sequence performed?");
      }

      this._svg.select("rect." + css.COLOR_SAMPLE).style("fill", this._colorOld);
      this._svg.select("text." + css.COLOR_SAMPLE).text(this._colorOld);

      return this;
    }
  }], [{
    key: "px2num",
    value: function px2num(px) {
      return parseFloat(px) || 0;
    }
  }]);

  return ColorPicker;
}();

exports.default = ColorPicker;

/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = "<div class=\"vzb-show-list vzb-accordion\">\n  <!-- list will be placed here -->\n</div>\n";

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _globals = __webpack_require__(113);

var _globals2 = _interopRequireDefault(_globals);

var _tool = __webpack_require__(152);

var _tool2 = _interopRequireDefault(_tool);

var _data = __webpack_require__(110);

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Size dialog
 */

var About = _dialog2.default.extend("about", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "about";

    this._super(config, parent);
  },
  readyOnce: function readyOnce() {
    var version = _globals2.default.version;
    var updated = new Date(parseInt(_globals2.default.build));

    this.element = d3.select(this.element);
    this.element.select(".vzb-about-text0").html("This chart is made with Vizabi,");
    this.element.select(".vzb-about-text1").html("a project by <a href='http://gapminder.org' target='_blank'>Gapminder Foundation</a>");
    this.element.select(".vzb-about-version").html("<a href='https://github.com/Gapminder/vizabi/releases/tag/v" + version + "' target='_blank'>Version: " + version + "</a>");
    this.element.select(".vzb-about-updated").html("Build: " + d3.time.format("%Y-%m-%d at %H:%M")(updated));
    this.element.select(".vzb-about-report").html("<a href='https://getsatisfaction.com/gapminder/' target='_blank'>Report a problem</a>");
    this.element.select(".vzb-about-credits").html("<a href='https://github.com/Gapminder/vizabi/graphs/contributors' target='_blank'>Contributors</a>");

    //versions
    var data = _data2.default;

    var toolData = {};
    var versionInfo = this.root.versionInfo;
    toolData.version = versionInfo ? versionInfo.version : "N/A";
    toolData.build = versionInfo ? d3.time.format("%Y-%m-%d at %H:%M")(new Date(parseInt(versionInfo.build))) : "N/A";
    toolData.name = this.root.name;

    var toolsEl = this.element.select(".vzb-about-tool");
    toolsEl.html("");
    toolsEl.append("p").text("Tool: " + toolData.name);
    toolsEl.append("p").text("-version: " + toolData.version);
    toolsEl.append("p").text("-build: " + toolData.build);

    var readerData = data.instances.map(function (dataInstance) {
      var data = {};
      var versionInfo = dataInstance.readerObject.versionInfo;
      data.version = versionInfo ? versionInfo.version : "N/A";
      data.build = versionInfo ? d3.time.format("%Y-%m-%d at %H:%M")(new Date(parseInt(versionInfo.build))) : "N/A";
      data.name = dataInstance.readerObject._name;
      return data;
    });

    var readersEl = this.element.select(".vzb-about-readers").selectAll(".vzb-about-reader").data(readerData);
    readersEl.exit().remove();
    readersEl = readersEl.enter().append("p").attr("class", "vzb-about-reader");
    readersEl.append("p").text(function (d) {
      return d.name;
    });
    readersEl.append("p").text(function (d) {
      return "-version: " + d.version;
    });
    readersEl.append("p").text(function (d) {
      return "-build: " + d.build;
    });

    var datasetData = data.instances.map(function (dataInstance) {
      return dataInstance.getDatasetName();
    });

    var datasetsEl = this.element.select(".vzb-about-datasets").selectAll(".vzb-about-dataset").data(datasetData);
    datasetsEl.exit().remove();
    datasetsEl = datasetsEl.enter().append("p").attr("class", "vzb-about-dataset");
    datasetsEl.append("p").text(function (d) {
      return d;
    });
  }
});

exports.default = About;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _indicatorpicker = __webpack_require__(51);

var _indicatorpicker2 = _interopRequireDefault(_indicatorpicker);

var _minmaxinputs = __webpack_require__(173);

var _minmaxinputs2 = _interopRequireDefault(_minmaxinputs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Axes dialog
 */

var Axes = _dialog2.default.extend("axes", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "axes";
    var _this = this;

    this.components = [{
      component: _indicatorpicker2.default,
      placeholder: ".vzb-xaxis-selector",
      model: ["state.time", "state.marker.axis_x", "locale"]
    }, {
      component: _minmaxinputs2.default,
      placeholder: ".vzb-xaxis-minmax",
      model: ["state.marker", "state.time", "locale"],
      markerID: "axis_x",
      ui: {
        selectDomainMinMax: false,
        selectZoomedMinMax: true
      }
    }, {
      component: _indicatorpicker2.default,
      placeholder: ".vzb-yaxis-selector",
      model: ["state.time", "state.marker.axis_y", "locale"]
    }, {
      component: _minmaxinputs2.default,
      placeholder: ".vzb-yaxis-minmax",
      model: ["state.marker", "state.time", "locale"],
      markerID: "axis_y",
      ui: {
        selectDomainMinMax: false,
        selectZoomedMinMax: true
      }
    }];

    this._super(config, parent);
  }
});

exports.default = Axes;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*!
 * VIZABI MIN MAX INPUT FIELDS
 */

var DOMAINMIN = "domainMin";
var DOMAINMAX = "domainMax";
var ZOOMEDMIN = "zoomedMin";
var ZOOMEDMAX = "zoomedMax";

var MinMaxInputs = _component2.default.extend({

  /**
   * Initializes the Component.
   * Executed once before any template is rendered.
   * @param config The options passed to the component
   * @param context The component's parent
   */
  init: function init(config, context) {
    var _this2 = this,
        _model_binds;

    this.name = "gapminder-minmaxinputs";
    this.template = __webpack_require__(426);

    this.model_expects = [{
      name: "marker",
      type: "marker"
    }, {
      name: "time",
      type: "time"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.markerID = config.markerID;
    if (!config.markerID) utils.warn("minmaxinputs.js complains on 'markerID' property: " + config.markerID);

    this.model_binds = (_model_binds = {
      "translate:locale": function translateLocale() {
        _this2.updateView();
      }

    }, _defineProperty(_model_binds, "change:marker." + this.markerID, function undefined() {
      _this2.updateView();
    }), _defineProperty(_model_binds, "ready", function ready() {
      _this2.updateView();
    }), _model_binds);

    // contructor is the same as any component
    this._super(config, context);

    // SPECIFIC COMPONENT UI! NOT TOOLMODEL UI!
    this.ui = utils.extend({
      selectDomainMinMax: false,
      selectZoomedMinMax: false
    }, this.ui.getPlainObject());
  },
  ready: function ready() {
    this.updateView();
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.element = d3.select(this.element);

    this.el_domain_labelMin = this.element.select(".vzb-mmi-domainmin-label");
    this.el_domain_labelMax = this.element.select(".vzb-mmi-domainmax-label");
    this.el_domain_fieldMin = this.element.select(".vzb-mmi-domainmin");
    this.el_domain_fieldMax = this.element.select(".vzb-mmi-domainmax");

    this.el_break = this.element.select(".vzb-mmi-break");

    this.el_zoomed_labelMin = this.element.select(".vzb-mmi-zoomedmin-label");
    this.el_zoomed_labelMax = this.element.select(".vzb-mmi-zoomedmax-label");
    this.el_zoomed_fieldMin = this.element.select(".vzb-mmi-zoomedmin");
    this.el_zoomed_fieldMax = this.element.select(".vzb-mmi-zoomedmax");

    _this.el_domain_fieldMin.on("change", function () {
      _this._setModel(DOMAINMIN, this.value);
    });
    _this.el_domain_fieldMax.on("change", function () {
      _this._setModel(DOMAINMAX, this.value);
    });

    _this.el_zoomed_fieldMin.on("change", function () {
      _this._setModel(ZOOMEDMIN, this.value);
    });
    _this.el_zoomed_fieldMax.on("change", function () {
      _this._setModel(ZOOMEDMAX, this.value);
    });

    this.element.selectAll("input").on("keypress", function () {
      if (d3.event.which == 13) document.activeElement.blur();
    });
  },
  updateView: function updateView() {
    var _this = this;
    this.translator = this.model.locale.getTFunction();

    this.el_domain_labelMin.text(this.translator("hints/min") + ":");
    this.el_domain_labelMax.text(this.translator("hints/max") + ":");
    this.el_zoomed_labelMin.text(this.translator("hints/min") + ":");
    this.el_zoomed_labelMax.text(this.translator("hints/max") + ":");

    this.el_domain_labelMin.classed("vzb-hidden", !this.ui.selectDomainMinMax);
    this.el_domain_labelMax.classed("vzb-hidden", !this.ui.selectDomainMinMax);
    this.el_domain_fieldMin.classed("vzb-hidden", !this.ui.selectDomainMinMax);
    this.el_domain_fieldMax.classed("vzb-hidden", !this.ui.selectDomainMinMax);

    this.el_break.classed("vzb-hidden", !(this.ui.selectDomainMinMax && this.ui.selectZoomedMinMax));

    this.el_zoomed_labelMin.classed("vzb-hidden", !this.ui.selectZoomedMinMax);
    this.el_zoomed_labelMax.classed("vzb-hidden", !this.ui.selectZoomedMinMax);
    this.el_zoomed_fieldMin.classed("vzb-hidden", !this.ui.selectZoomedMinMax);
    this.el_zoomed_fieldMax.classed("vzb-hidden", !this.ui.selectZoomedMinMax);

    var formatter = function formatter(n) {
      if (!n && n !== 0) return n;
      if (utils.isDate(n)) return _this.model.time.formatDate(n);
      return d3.format(".2r")(n);
    };

    var marker = this.model.marker[this.markerID];
    var domain = marker.getScale().domain();

    this.el_domain_fieldMin.property("value", formatter(d3.min(domain)));
    this.el_domain_fieldMax.property("value", formatter(d3.max(domain)));
    this.el_zoomed_fieldMin.property("value", formatter(marker.getZoomedMin()));
    this.el_zoomed_fieldMax.property("value", formatter(marker.getZoomedMax()));
  },
  _setModel: function _setModel(what, value) {
    this.model.marker[this.markerID][what] = utils.strToFloat(value);
  }
});

exports.default = MinMaxInputs;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _colorlegend = __webpack_require__(168);

var _colorlegend2 = _interopRequireDefault(_colorlegend);

var _indicatorpicker = __webpack_require__(51);

var _indicatorpicker2 = _interopRequireDefault(_indicatorpicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI COLOR DIALOG
 */

var Colors = _dialog2.default.extend("colors", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "colors";

    this.components = [{
      component: _indicatorpicker2.default,
      placeholder: ".vzb-caxis-selector",
      model: ["state.time", "state.marker.color", "locale"],
      showHoverValues: true
    }, {
      component: _colorlegend2.default,
      placeholder: ".vzb-clegend-container",
      model: ["state.time", "state.entities", "state.marker", "state.marker.color", "locale", "ui"]
    }];

    this._super(config, parent);
  }
});

exports.default = Colors;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * VIZABI DIALOGS
 * Reusable dialogs component
 */

//default existing dialogs
var class_active = "vzb-active";

var Dialogs = _component2.default.extend({

  /**
   * Initializes the dialogs
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, context) {

    // set properties
    this.name = "gapminder-dialogs";
    this._curr_dialog_index = 20;

    this.model_expects = [{
      name: "state",
      type: "model"
    }, {
      name: "ui",
      type: "ui"
    }, {
      name: "locale",
      type: "locale"
    }];

    var components = _dialog2.default.getCollection();
    this._available_dialogs = Object.keys(components).reduce(function (result, key) {
      var component = components[key];

      if (component.prototype.isDialog && !key.startsWith("_")) {
        result[key] = { dialog: component };
      }

      return result;
    }, {});

    this._super(config, context);
  },
  domReady: function domReady() {
    var dialog_popup = (this.model.ui.dialogs || {}).popup || [];
    var dialog_sidebar = (this.model.ui.dialogs || {}).sidebar || [];

    this.rootEl = this.root.element instanceof Array ? this.root.element : d3.select(this.root.element);

    // if dialog_sidebar has been passed in with boolean param or array must check and covert to array
    if (dialog_sidebar === true) {
      dialog_sidebar = dialog_popup;
      (this.model.ui.dialogs || {}).sidebar = dialog_sidebar;
    }
    if (dialog_sidebar.length !== 0 && !this.model.ui.sidebarCollapse) {
      this.rootEl.classed("vzb-dialog-expand-true", true);
    }
    this.dialog_popup = dialog_popup;
    this.dialog_sidebar = dialog_sidebar;
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.element = d3.select(this.placeholder);
    this.element.selectAll("div").remove();
    if (utils.isTouchDevice()) {
      this.element.classed("vzb-no-hover", true);
    }

    this._addDialogs(this.dialog_popup, this.dialog_sidebar);

    //this.resize();
    utils.defer(function () {
      _this.trigger("resize");
    });

    if (this.dialog_popup.length !== 0) {
      this.root.findChildByName("gapminder-buttonlist").on("click", function (evt, button) {
        if (!_this._available_dialogs[button.id]) return;

        if (button.active) {
          _this.openDialog(button.id);
        } else {
          _this.closeDialog(button.id);
        }
      });

      var popupDialogs = this.element.selectAll(".vzb-top-dialog").filter(function (d) {
        return _this.dialog_popup.indexOf(d.id) > -1;
      });

      var close_buttons = popupDialogs.select(".vzb-top-dialog>.vzb-dialog-modal>.vzb-dialog-buttons>[data-click='closeDialog']");
      close_buttons.on("click", function (d, i) {
        _this.closeDialog(d.id);
      });

      var pinDialog = popupDialogs.select(".vzb-top-dialog>.vzb-dialog-modal>[data-click='pinDialog']");
      pinDialog.on("click", function (d, i) {
        _this.pinDialog(d.id);
      });

      this.rootEl.node().addEventListener("click", function () {
        _this.closeAllDialogs();
      });

      this.rootEl.on("mousedown", function (e) {
        if (!this._active_comp) return; //don't do anything if nothing is open

        var target = d3.event.target;
        var closeDialog = true;
        while (target) {
          if (target.classList.contains("vzb-dialog-modal")) {
            closeDialog = false;
            break;
          }
          target = target.parentElement;
        }
        if (closeDialog) {
          _this.closeAllDialogs();
        }
      });
    }

    this.element.on("click", function () {
      d3.event.stopPropagation();
    });
  },
  resize: function resize() {
    if (!this.element.selectAll) return utils.warn("dialogs resize() aborted because element is not yet defined");

    var _this = this;
    var profile = this.getLayoutProfile();

    this.element.selectAll(".vzb-top-dialog").each(function (d) {
      var dialogEl = d3.select(this);
      var cls = dialogEl.attr("class").replace(" vzb-popup", "").replace(" vzb-sidebar", "");

      if (profile === "large" && _this.dialog_sidebar.indexOf(d.id) > -1) {
        cls += _this.model.ui.sidebarCollapse ? " vzb-popup" : " vzb-sidebar";
        if (!_this.model.ui.sidebarCollapse) dialogEl.style("z-index", null);
      } else if (_this.dialog_popup.indexOf(d.id) > -1) {
        cls += " vzb-popup";
      }

      dialogEl.attr("class", cls);
    });
  },


  /*
   * adds dialogs configuration to the components and template_data
   * @param {Array} dialog_list list of dialogs to be added
   */
  _addDialogs: function _addDialogs(dialog_popup, dialog_sidebar) {

    var profile = this.getLayoutProfile();
    var dialog_list = [];

    dialog_list = dialog_popup ? dialog_list.concat(dialog_popup) : dialog_list;
    dialog_list = dialog_sidebar ? dialog_list.concat(dialog_sidebar) : dialog_list;

    dialog_list = utils.unique(dialog_list);

    this._components_config = [];
    var details_dlgs = [];
    if (!dialog_list.length) return;
    //add a component for each dialog
    for (var i = 0; i < dialog_list.length; i++) {

      var dlg = dialog_list[i];
      var dlg_config = this._available_dialogs[dlg];

      //if it's a dialog, add component
      if (dlg_config && dlg_config.dialog) {
        var comps = this._components_config;

        //add corresponding component
        comps.push({
          component: dlg_config.dialog,
          placeholder: '.vzb-dialogs-dialog[data-dlg="' + dlg + '"]',
          model: ["state", "ui", "locale"]
        });

        dlg_config.component = comps.length - 1;
      }

      dlg_config.id = dlg;
      details_dlgs.push(dlg_config);
    }

    this.element.selectAll("div").data(details_dlgs).enter().append("div").attr("data-dlg", function (d) {
      return d.id;
    }).attr("class", "vzb-top-dialog vzb-dialogs-dialog vzb-dialog-shadow");

    this.loadSubComponents();

    var _this = this;
    //render each subcomponent
    utils.forEach(this.components, function (subcomp) {
      subcomp.render();
      _this.on("resize", function () {
        subcomp.trigger("resize");
      });
      subcomp.on("dragstart", function () {
        _this.bringForward(subcomp.name);
      });
      subcomp.on("close", function () {
        this.placeholderEl.each(function (d) {
          var evt = {};
          evt.id = d.id;
          _this.trigger("close", evt);
        });
      });
    });
  },
  bringForward: function bringForward(id) {
    var dialog = this.element.select(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");
    dialog.style("z-index", this._curr_dialog_index);
    this._curr_dialog_index += 10;
  },


  //TODO: make opening/closing a dialog via update and model
  /*
   * Activate a dialog
   * @param {String} id dialog id
   */
  openDialog: function openDialog(id) {
    //close pinned dialogs for small profile
    var forceClose = this.getLayoutProfile() === "small";
    this.closeAllDialogs(forceClose);

    var dialog = this.element.selectAll(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");

    this._active_comp = this.components[this._available_dialogs[id].component];

    this._active_comp.beforeOpen();
    //add classes
    dialog.classed(class_active, true);

    this.bringForward(id);

    //call component function
    this._active_comp.open();
  },
  pinDialog: function pinDialog(id) {
    var dialog = this.element.select(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");

    if (this._available_dialogs[id].ispin) {
      dialog.classed("pinned", false);
      this._available_dialogs[id].ispin = false;
    } else {
      dialog.classed("pinned", true);
      this._available_dialogs[id].ispin = true;
    }
  },


  /*
   * Closes a dialog
   * @param {String} id dialog id
   */
  closeDialog: function closeDialog(id) {
    var dialog = this.element.selectAll(".vzb-popup.vzb-dialogs-dialog[data-dlg='" + id + "']");

    this._active_comp = this.components[this._available_dialogs[id].component];

    if (this._active_comp && !this._active_comp.isOpen) return;

    if (this._available_dialogs[id].ispin) this.pinDialog(id);

    if (this._active_comp) {
      this._active_comp.beforeClose();
    }
    //remove classes
    dialog.classed(class_active, false);

    //call component close function
    if (this._active_comp) {
      this._active_comp.close();
    }
    this._active_comp = false;
  },


  /*
   * Close all dialogs
   */
  closeAllDialogs: function closeAllDialogs(forceclose) {
    var _this = this;
    //remove classes
    var dialogClass = forceclose ? ".vzb-popup.vzb-dialogs-dialog.vzb-active" : ".vzb-popup.vzb-dialogs-dialog.vzb-active:not(.pinned)";
    var all_dialogs = this.element.selectAll(dialogClass);
    all_dialogs.each(function (d) {
      _this.closeDialog(d.id);
    });
  }
});

exports.default = Dialogs;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _show = __webpack_require__(115);

var _show2 = _interopRequireDefault(_show);

var _singlehandleslider = __webpack_require__(63);

var _singlehandleslider2 = _interopRequireDefault(_singlehandleslider);

var _indicatorpicker = __webpack_require__(51);

var _indicatorpicker2 = _interopRequireDefault(_indicatorpicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI FIND CONTROL
 * Reusable find dialog
 */

var Find = _dialog2.default.extend("find", {
  init: function init(config, parent) {
    this.name = "find";
    var _this = this;

    this.components = [{
      component: _show2.default,
      placeholder: ".vzb-dialog-panel-show",
      model: ["state", "locale"]
    }, {
      component: _singlehandleslider2.default,
      placeholder: ".vzb-dialog-bubbleopacity",
      model: ["state.marker", "locale"],
      arg: "opacitySelectDim"
    }];

    this.enableSelectShowSwitch = ((config.ui.dialogs.dialog || {}).find || {}).enableSelectShowSwitch || false;
    this.panelMode = ((config.ui.dialogs.dialog || {}).find || {}).panelMode || "find";
    this.enablePicker = ((config.ui.dialogs.dialog || {}).find || {}).enablePicker;
    if (this.enablePicker) {
      this.components.push({
        component: _indicatorpicker2.default,
        placeholder: ".vzb-find-filter-selector",
        model: ["state.time", "state.marker", "locale"]
      });
    }

    this.model_binds = {
      "change:state.marker.select": function changeStateMarkerSelect(evt) {
        _this.items.order();
        _this.selectDataPoints();
        _this.showHideButtons();
      },
      "change:state.time.playing": function changeStateTimePlaying(evt) {
        if (!_this.model.state.time.playing) {
          _this.time = _this.model.state.time.value;

          _this.model.state.marker.getFrame(_this.time, function (values, time) {
            if (!values || _this.time - time) return;
            _this.redrawDataPoints(values);
          });
        }
      },
      "change:state.time.value": function changeStateTimeValue(evt) {
        // hide changes if the dialog is not visible
        if (!_this.placeholderEl.classed("vzb-active") && !_this.placeholderEl.classed("vzb-sidebar")) return;

        _this.time = _this.model.state.time.value;

        _this.model.state.marker.getFrame(_this.time, function (values) {
          if (!values) return;
          _this.redrawDataPoints(values);
        });
      },
      "change:ui.dialogs.dialog.find.enableSelectShowSwitch": function changeUiDialogsDialogFindEnableSelectShowSwitch(evt) {
        if (!_this._readyOnce) return;
        _this.enableSelectShowSwitch = ((config.ui.dialogs.dialog || {}).find || {}).enableSelectShowSwitch || false;
        _this.element.select(".vzb-dialog-title-switch .vzb-switch-slider").classed("vzb-hidden", !_this.enableSelectShowSwitch);
        _this.element.select(".vzb-dialog-title-switch").style("pointer-events", _this.enableSelectShowSwitch ? "auto" : "none");
      },
      "translate:locale": function translateLocale() {
        if (!_this._readyOnce) return;
        _this.input_search.attr("placeholder", _this.translator("placeholder/search") + "...");
      }
    };

    this._super(config, parent);
  },


  /**
   * Grab the list div
   */
  readyOnce: function readyOnce() {
    this._super();

    this.panelComps = { find: this, show: this.findChildByName("show") };

    this.titleSwitch = this.element.select(".vzb-dialog-title-switch input");
    this.panelsEl = this.contentEl.selectAll(".vzb-dialog-content");
    this.list = this.element.select(".vzb-find-list");
    this.input_search = this.element.select(".vzb-find-search");
    this.deselect_all = this.element.select(".vzb-find-deselect");
    this.opacity_nonselected = this.element.select(".vzb-dialog-bubbleopacity");

    this.element.select(".vzb-dialog-title-switch .vzb-switch-slider").classed("vzb-hidden", !this.enableSelectShowSwitch);
    this.element.select(".vzb-dialog-title-switch").style("pointer-events", this.enableSelectShowSwitch ? "auto" : "none");
    this.element.select(".vzb-find-filter-selector").classed("vzb-hidden", !this.enablePicker);
    this.element.select(".vzb-dialog-title").classed("vzb-title-two-rows", this.enablePicker);

    this.KEY = this.model.state.entities.getDimension();

    var _this = this;

    this.titleSwitch.on("change", function () {
      _this.panelMode = _this.titleSwitch.property("checked") ? "show" : "find";
      _this.panelsEl.classed("vzb-active", false);
      _this.contentEl.select(".vzb-dialog-panel-" + _this.panelMode).classed("vzb-active", true);
      _this.panelComps[_this.panelMode].showHideSearch();
      _this._buttonAdjust();
      _this.panelComps[_this.panelMode].showHideButtons();
    });
    this.titleSwitch.property("checked", this.panelMode !== "find");
    this.titleSwitch.dispatch("change");

    this.input_search.on("keyup", function () {
      var event = d3.event;
      if (event.keyCode == 13 && _this.input_search.node().value == "select all") {
        _this.input_search.node().value = "";
        //clear highlight so it doesn't get in the way when selecting an entity
        if (!utils.isTouchDevice()) _this.model.state.marker.clearHighlighted();
        _this.model.state.marker.selectAll();
        utils.defer(function () {
          return _this.panelComps[_this.panelMode].showHideSearch();
        });
      }
    });

    this.input_search.on("input", function () {
      _this.panelComps[_this.panelMode].showHideSearch();
    });

    d3.select(this.input_search.node().parentNode).on("reset", function () {
      utils.defer(function () {
        return _this.panelComps[_this.panelMode].showHideSearch();
      });
    }).on("submit", function () {
      d3.event.preventDefault();
      return false;
    });

    this.deselect_all.on("click", function () {
      _this.deselectMarkers();
    });

    var closeButton = this.buttonsEl.select(".vzb-dialog-button[data-click='closeDialog']");
    closeButton.on("click.panel", function () {
      return _this.panelComps[_this.panelMode].closeClick();
    });

    this.translator = this.model.locale.getTFunction();
    this.input_search.attr("placeholder", this.translator("placeholder/search") + "...");

    //make sure it refreshes when all is reloaded
    this.root.on("ready", function () {
      _this.ready();
    });
  },
  getPanelMode: function getPanelMode() {
    return this.panelMode;
  },
  _buttonAdjust: function _buttonAdjust() {
    this.buttonsEl.selectAll(".vzb-dialog-buttons > :not([data-dialogtype])").classed("vzb-hidden", true);
    this.buttonsEl.selectAll("[data-panel=" + this.panelMode + "]").classed("vzb-hidden", false);
  },
  open: function open() {
    var _this = this;
    this._super();

    this.input_search.node().value = "";
    this.showHideSearch();

    this.time = this.model.state.time.value;

    this.model.state.marker.getFrame(this.time, function (values) {
      if (!values) return;
      _this.redrawDataPoints(values);
    });
  },


  /**
   * Build the list everytime it updates
   */
  //TODO: split update in render and update methods
  ready: function ready() {
    this._super();

    var _this = this;
    var KEYS = this.KEYS = utils.unique(this.model.state.marker._getAllDimensions({ exceptType: "time" }));

    this.importantHooks = _this.model.state.marker.getImportantHooks();

    this.time = this.model.state.time.value;
    this.model.state.marker.getFrame(this.time, function (values) {
      if (!values) return;

      var data = _this.model.state.marker.getKeys().map(function (d) {
        d.brokenData = false;
        d.name = _this.model.state.marker.getCompoundLabelText(d, values);
        return d;
      });

      //sort data alphabetically
      data.sort(function (a, b) {
        return a.name < b.name ? -1 : 1;
      });

      _this.list.html("");

      _this.items = _this.list.selectAll(".vzb-find-item").data(data).enter().append("div").attr("class", "vzb-find-item vzb-dialog-checkbox");

      _this.items.append("input").attr("type", "checkbox").attr("class", "vzb-find-item").attr("id", function (d, i) {
        return "-find-" + i + "-" + _this._id;
      }).on("change", function (d) {
        //clear highlight so it doesn't get in the way when selecting an entity
        if (!utils.isTouchDevice()) _this.model.state.marker.clearHighlighted();
        _this.model.state.marker.selectMarker(d);
        //return to highlighted state
        if (!utils.isTouchDevice() && !d.brokenData) _this.model.state.marker.highlightMarker(d);
      });

      _this.items.append("label").attr("for", function (d, i) {
        return "-find-" + i + "-" + _this._id;
      }).text(function (d) {
        return d.name;
      }).attr("title", function (d) {
        return this.offsetWidth < this.scrollWidth ? d.name : null;
      }).on("mouseover", function (d) {
        if (!utils.isTouchDevice() && !d.brokenData) _this.model.state.marker.highlightMarker(d);
      }).on("mouseout", function (d) {
        if (!utils.isTouchDevice()) _this.model.state.marker.clearHighlighted();
      });
      utils.preventAncestorScrolling(_this.element.select(".vzb-dialog-scrollable"));

      _this.redrawDataPoints(values);
      _this.selectDataPoints();
      _this.showHideSearch();
      _this.showHideButtons();
    });
  },
  redrawDataPoints: function redrawDataPoints(values) {
    var _this = this;
    var KEYS = this.KEYS;

    _this.items.each(function (d) {
      var view = d3.select(this).select("label");
      d.brokenData = false;

      utils.forEach(_this.importantHooks, function (name) {
        if (_this.model.state.marker[name].use == "constant") return;
        var hook = values[name];
        if (!hook) return;
        var value = hook[utils.getKey(d, KEYS)];
        if (!value && value !== 0) {
          d.brokenData = true;
          return false;
        }
      });

      var nameIfEllipsis = this.offsetWidth < this.scrollWidth ? d.name : "";
      view.classed("vzb-find-item-brokendata", d.brokenData).attr("title", nameIfEllipsis + (d.brokenData ? (nameIfEllipsis ? " | " : "") + _this.model.state.time.formatDate(_this.time) + ": " + _this.translator("hints/nodata") : ""));
    });
  },
  selectDataPoints: function selectDataPoints() {
    var _this = this;
    var KEY = this.KEY;
    //    const selected = this.model.state.marker.getSelected(KEY);
    var selected = this.model.state.marker;
    this.items.selectAll("input")
    //      .property("checked", d => (selected.indexOf(d[KEY]) !== -1));
    .property("checked", function (d) {
      var isSelected = selected.isSelected(d);
      d3.select(this.parentNode).classed("vzb-checked", isSelected);
      return isSelected;
    });
    var lastCheckedNode = this.list.selectAll(".vzb-checked").classed("vzb-separator", false).lower().nodes()[0];
    d3.select(lastCheckedNode).classed("vzb-separator", true);
    this.contentEl.node().scrollTop = 0;
  },
  showHideSearch: function showHideSearch() {
    if (this.getPanelMode() !== "find") return;

    var search = this.input_search.node().value || "";
    search = search.toLowerCase();

    this.list.selectAll(".vzb-find-item").classed("vzb-hidden", function (d) {
      var lower = (d.name || "").toString().toLowerCase();
      return lower.indexOf(search) === -1;
    });
  },
  showHideButtons: function showHideButtons() {
    if (this.getPanelMode() !== "find") return;

    var someSelected = !!this.model.state.marker.select.length;
    this.deselect_all.classed("vzb-hidden", !someSelected);
    this.opacity_nonselected.classed("vzb-hidden", !someSelected);
    if (someSelected) {
      this.findChildByName("singlehandleslider").trigger("resize");
    }
  },
  deselectMarkers: function deselectMarkers() {
    this.model.state.marker.clearSelected();
  },
  transitionEnd: function transitionEnd(event) {
    this._super(event);

    if (!utils.isTouchDevice()) this.input_search.node().focus();
  },
  closeClick: function closeClick() {}
});

exports.default = Find;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _singlehandleslider = __webpack_require__(63);

var _singlehandleslider2 = _interopRequireDefault(_singlehandleslider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Size dialog
 */

var Grouping = _dialog2.default.extend("grouping", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "grouping";

    // in dialog, this.model_expects = ["state", "data"];

    this.groupStops = [1, 5, 10, 15];

    this.components = [{
      component: _singlehandleslider2.default,
      placeholder: ".vzb-dialog-placeholder",
      model: ["state.entities_age", "locale"],
      arg: "grouping",
      properties: {
        snapValue: true,
        suppressInput: true,
        domain: this.groupStops
      }
    }];

    this._super(config, parent);
  },
  readyOnce: function readyOnce() {
    this._super();
    //    this.element = d3.select(this.element);
    var groups = this.element.select(".vzb-dialog-groups");

    groups.selectAll(".vzb-dialog-groups-title").data(this.groupStops).enter().append("span").attr("class", ".vzb-dialog-groups-title").text(function (d) {
      return d;
    });
  }
});

exports.default = Grouping;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _sizeslider = __webpack_require__(165);

var _sizeslider2 = _interopRequireDefault(_sizeslider);

var _indicatorpicker = __webpack_require__(51);

var _indicatorpicker2 = _interopRequireDefault(_indicatorpicker);

var _simplecheckbox = __webpack_require__(52);

var _simplecheckbox2 = _interopRequireDefault(_simplecheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Label dialog
 */

var Label = _dialog2.default.extend("label", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "label";

    // in dialog, this.model_expects = ["state", "data"];

    this.components = [{
      component: _sizeslider2.default,
      placeholder: ".vzb-dialog-sizeslider",
      model: ["state.marker.size_label", "locale"],
      propertyname: "LabelTextSize",
      ui: {
        constantUnit: "unit/pixels"
      }
    }, {
      component: _indicatorpicker2.default,
      placeholder: ".vzb-saxis-selector",
      model: ["state.time", "state.marker.size_label", "locale"],
      showHoverValues: true
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-removelabelbox-switch",
      model: ["ui.chart", "locale"],
      checkbox: "removeLabelBox",
      submodel: "labels"
    }];

    this._super(config, parent);
  }
});

exports.default = Label;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _optionsbuttonlist = __webpack_require__(167);

var _optionsbuttonlist2 = _interopRequireDefault(_optionsbuttonlist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * More options dialog
 */

var MoreOptions = _dialog2.default.extend("moreoptions", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "moreoptions";

    //specifying components
    this.components = [{
      component: _optionsbuttonlist2.default,
      placeholder: ".vzb-dialog-options-buttonlist",
      model: ["state", "ui", "locale"]
    }];

    this._super(config, parent);
  },
  readyOnce: function readyOnce() {
    this._super();

    var _this = this;
    this.accordionEl = this.contentEl.select(".vzb-accordion");

    this.on("dragend", function () {
      _this._setMaxHeight();
    });

    var dialog_popup = (this.model.ui.dialogs || {}).popup || [];
    var dialog_moreoptions = (this.model.ui.dialogs || {}).moreoptions || [];

    // if dialog_moreoptions has been passed in with boolean param or array must check and covert to array
    if (dialog_moreoptions === true) {
      dialog_moreoptions = dialog_popup;
      (this.model.ui.dialogs || {}).moreoptions = dialog_moreoptions;
    }

    this._addDialogs(dialog_moreoptions);

    //accordion
    if (this.accordionEl) {
      var titleEl = this.accordionEl.selectAll(".vzb-accordion-section").select(".vzb-dialog-title>span:first-child");
      titleEl.on("click", function (d) {
        var element = _this.components[d.component].element;
        var sectionEl = _this.components[d.component].placeholderEl;
        var activeEl = _this.accordionEl.select(".vzb-accordion-active");
        if (activeEl) {
          activeEl.classed("vzb-accordion-active", false);
        }
        if (sectionEl.node() !== activeEl.node()) {
          sectionEl.classed("vzb-accordion-active", true);
          _this.transitionEvents.forEach(function (event) {
            sectionEl.on(event, function () {
              _this.transitionEvents.forEach(function (event) {
                sectionEl.on(event, null);
              });
              _this.components[d.component].trigger("resize");
            });
          });
        }
      });
    }
  },
  _addDialogs: function _addDialogs(dialog_list) {
    this._components_config = [];
    var details_dlgs = [];
    if (!dialog_list.length) return;
    //add a component for each dialog
    for (var i = 0; i < dialog_list.length; i++) {

      //check moreoptions in dialog.moreoptions
      if (dialog_list[i] === "moreoptions") continue;

      var dlg = dialog_list[i];
      var dlg_config = utils.deepClone(this.parent._available_dialogs[dlg]);

      //if it's a dialog, add component
      if (dlg_config && dlg_config.dialog) {
        var comps = this._components_config;

        //add corresponding component
        comps.push({
          component: dlg_config.dialog,
          placeholder: '.vzb-dialogs-dialog[data-dlg="' + dlg + '"]',
          model: ["state", "ui", "locale"]
        });

        dlg_config.component = comps.length - 1;

        dlg_config.id = dlg;
        details_dlgs.push(dlg_config);
      }
    }

    this.accordionEl.selectAll("div").data(details_dlgs).enter().append("div").attr("class", function (d) {
      var cls = "vzb-dialogs-dialog vzb-moreoptions vzb-accordion-section";
      return cls;
    }).attr("data-dlg", function (d) {
      return d.id;
    });

    this.loadSubComponents();

    var _this = this;
    //render each subcomponent
    utils.forEach(this.components, function (subcomp) {
      subcomp.render();
      _this.on("resize", function () {
        subcomp.trigger("resize");
      });
    });
  }
});

exports.default = MoreOptions;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _singlehandleslider = __webpack_require__(63);

var _singlehandleslider2 = _interopRequireDefault(_singlehandleslider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Size dialog
 */

var Opacity = _dialog2.default.extend("opacity", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "opacity";

    // in dialog, this.model_expects = ["state", "data"];

    this.components = [{
      component: _singlehandleslider2.default,
      placeholder: ".vzb-dialog-bubbleopacity-regular",
      model: ["state.marker", "locale"],
      arg: "opacityRegular"
    }, {
      component: _singlehandleslider2.default,
      placeholder: ".vzb-dialog-bubbleopacity-selectdim",
      model: ["state.marker", "locale"],
      arg: "opacitySelectDim"
    }];

    this._super(config, parent);
  }
});

exports.default = Opacity;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _simplecheckbox = __webpack_require__(52);

var _simplecheckbox2 = _interopRequireDefault(_simplecheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Size dialog
 */

var Presentation = _dialog2.default.extend("presentation", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "presentation";

    // in dialog, this.model_expects = ["state", "data"];

    this.components = [{
      component: _simplecheckbox2.default,
      placeholder: ".vzb-presentationmode-switch",
      model: ["ui", "locale"],
      checkbox: "presentation"
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-decorations-switch",
      model: ["ui.chart.decorations", "locale"],
      checkbox: "enabled"
    }];

    this._super(config, parent);
  }
});

exports.default = Presentation;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _indicatorpicker = __webpack_require__(51);

var _indicatorpicker2 = _interopRequireDefault(_indicatorpicker);

var _simplecheckbox = __webpack_require__(52);

var _simplecheckbox2 = _interopRequireDefault(_simplecheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*!
 * VIZABI SIDE CONTROL
 * Reusable side dialog
 */

var Side = _dialog2.default.extend("side", {
  init: function init(config, parent) {
    this.name = "side";
    var _this = this;

    this.model_binds = {
      "change:ui.chart.flipSides": function changeUiChartFlipSides(evt) {
        if (!_this._readyOnce) return;
        _this.updateState();
        _this.redraw();
      }

    };

    this.components = [{
      component: _indicatorpicker2.default,
      placeholder: ".vzb-side-selector",
      model: ["state.time", "state.marker.side", "locale"],
      showHoverValues: false
    }];

    this._super(config, parent);
  },


  /**
   * Grab the list div
   */
  readyOnce: function readyOnce() {
    this._super();
    this.listLeft = this.element.select(".vzb-side-list-left");
    this.listRight = this.element.select(".vzb-side-list-right");
    this.switchSides = this.element.select(".vzb-side-switch-sides");

    this.TIMEDIM = this.model.state.time.getDimension();
    this.state = {};
    var _this = this;

    this.switchSides.on("click", function () {
      _this.model.ui.chart.flipSides = !_this.model.ui.chart.flipSides;
    });

    this.model.state.marker.side.getEntity().on("change:show", function () {
      _this.updateState();
      _this.redraw();
    });

    //make sure it refreshes when all is reloaded
    this.root.on("ready", function () {
      _this.redraw();
    });
  },
  ready: function ready() {
    this._super();

    var sideEntities = this.model.state.marker.side.getEntity();
    this.KEY = sideEntities.getDimension();
    this.labelNames = this.model.state.marker.getLabelHookNames();
    if (this.model.state.marker.side.use !== "constant" && !(sideEntities.show[this.KEY] || {})["$in"]) {
      var sideKeys = this.model.state.marker.side.getUnique(this.model.state.marker.side.which).filter(function (f) {
        return f !== null;
      });
      var filterKeys = sideKeys.sort(d3.ascending).slice(0, 2);
      if (filterKeys.length > 0) {
        var show = Object.assign({}, sideEntities.show);
        show[this.KEY] = { "$in": filterKeys };
        sideEntities.set("show", show);
      }
    }

    this.updateState();
    this.redraw();
    utils.preventAncestorScrolling(this.element.select(".vzb-dialog-scrollable"));
  },
  updateState: function updateState() {
    var _this = this;
    var sideDim = this.model.state.marker.side.getEntity().getDimension();
    var modelSide = this.model.state.marker.side;

    this.state["right"] = {};
    this.state["left"] = {};
    if (modelSide.state["left"][sideDim] && modelSide.state["right"][sideDim]) {
      this.state["left"][sideDim] = modelSide.state["left"][sideDim];
      this.state["right"][sideDim] = modelSide.state["right"][sideDim];
    } else {
      var sides = this.model.state.marker.getKeys(sideDim);
      var sideKeys = [];
      var sideFiltered = !!this.model.state.marker.side.getEntity().show[sideDim];
      sideKeys = sides.filter(function (f) {
        return !sideFiltered || _this.model.state.marker.side.getEntity().isShown(f);
      }).map(function (m) {
        return m[sideDim];
      });

      if (sideKeys.length > 2) sideKeys.length = 2;
      if (sideKeys.length > 1) {
        var sortFunc = this.ui.chart.flipSides ? d3.ascending : d3.descending;
        sideKeys.sort(sortFunc);
      }

      this.state["right"] = {};
      this.state["right"][sideDim] = sideKeys[0];
      this.state["left"] = {};
      this.state["left"][sideDim] = sideKeys[1] ? sideKeys[1] : sideKeys[0];
    }

    var hidden = this.model.state.marker.side.use == "constant";

    this.listLeft.classed("vzb-hidden", hidden);
    this.listRight.classed("vzb-hidden", hidden);
    this.switchSides.classed("vzb-hidden", hidden || this.state["left"][sideDim] == this.state["right"][sideDim]);
  },
  redraw: function redraw() {

    var _this = this;
    var labelNames = this.labelNames;
    var KEY = this.KEY;

    this.translator = this.model.locale.getTFunction();

    if (!_this.model.state.marker.side.getEntity().dim) return;

    this.model.state.marker.getFrame(this.model.state.time.value, function (values) {
      if (!values) return;
      var data = [];
      var sideConcept = _this.model.state.marker.side.getConceptprops();

      if (sideConcept.concept_type == "entity_set") {
        data.push.apply(data, _toConsumableArray(_this.model.state.marker.side.getEntity().getEntitySets("data")[sideConcept.concept][0].map(function (d) {
          var result = {};
          result[KEY] = d[sideConcept.concept];
          result["label"] = d["name"];
          return result;
        })));
      } else {
        utils.forEach(values[labelNames[KEY]], function (value, key) {
          var result = {};
          result[KEY] = key;
          result["label"] = value;
          data.push(result);
        });
      }

      //sort data alphabetically
      data.sort(function (a, b) {
        return a.label < b.label ? -1 : 1;
      });

      _this.listLeft.html("");
      _this.listRight.html("");
      _this.createList(_this.listLeft, "left", data);
      _this.createList(_this.listRight, "right", data);
    });
  },
  createList: function createList(listSel, name, data) {
    var _this = this;
    var sideDim = this.model.state.marker.side.getEntity().getDimension();

    var items = listSel.selectAll(".vzb-side-item").data(data).enter().append("div").attr("class", "vzb-side-item vzb-dialog-radio");

    items.append("input").attr("type", "radio").attr("name", name + "-" + _this._id).attr("class", "vzb-side-item").attr("id", function (d) {
      return "-side-" + name + "-" + d[sideDim] + "-" + _this._id;
    }).property("checked", function (d) {
      return _this.state[name][sideDim] === d[sideDim];
    }).on("change", function (d, i) {
      var sideEntities = _this.model.state.marker.side.getEntity();
      var sideDim = sideEntities.getDimension();
      var otherSide = name == "left" ? "right" : "left";
      var modelSide = _this.model.state.marker.side;

      modelSide.state[name][sideDim] = d[sideDim];
      modelSide.state[otherSide][sideDim] = _this.state[otherSide][sideDim];

      var showArray = [];

      if (!sideEntities.isShown(d)) {
        showArray.push(d);
      }
      if (d[sideDim] !== _this.state[otherSide][sideDim] && !sideEntities.isShown(_this.state[otherSide])) {
        showArray.push(_this.state[otherSide]);
      }
      if (_this.state[name][sideDim] !== _this.state[otherSide][sideDim] && sideEntities.isShown(_this.state[name])) {
        showArray.push(_this.state[name]);
      }

      if (d[sideDim] !== _this.state[otherSide][sideDim]) {
        var sideKeys = [d[sideDim], _this.state[otherSide][sideDim]];
        var sortFunc = _this.ui.chart.flipSides ? d3.ascending : d3.descending;
        sideKeys.sort(sortFunc);
        if (sideKeys[name == "left" ? 0 : 1] == d[sideDim]) {
          _this.model.state.marker.side.switchSideState();
          _this.ui.chart.flipSides = !_this.ui.chart.flipSides;
        }
      }

      if (showArray.length) {
        sideEntities.showEntity(showArray);
      }
    });

    items.append("label").attr("for", function (d) {
      return "-side-" + name + "-" + d[_this.KEY] + "-" + _this._id;
    }).text(function (d) {
      return d.label;
    });
  }
});

exports.default = Side;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _bubblesize = __webpack_require__(164);

var _bubblesize2 = _interopRequireDefault(_bubblesize);

var _indicatorpicker = __webpack_require__(51);

var _indicatorpicker2 = _interopRequireDefault(_indicatorpicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Size dialog
 */

var Size = _dialog2.default.extend("size", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "size";
    var _this = this;

    // in dialog, this.model_expects = ["state", "ui", "locale"];

    this.model_binds = {
      "change:state.marker.size.which": function changeStateMarkerSizeWhich(evt) {
        if (!_this._readyOnce) return;
        _this.updateSubtitle();
      },
      "translate:locale": function translateLocale() {
        if (!_this._readyOnce) return;
        _this.updateSubtitle();
      }
    };

    this.components = [{
      component: _indicatorpicker2.default,
      placeholder: ".vzb-saxis-selector",
      model: ["state.time", "state.marker.size", "locale"],
      showHoverValues: true
    }];

    // config.ui is same as this.model.ui here but this.model.ui is not yet available because constructor hasn't been called.
    // can't call constructor earlier because this.components needs to be complete before calling constructor
    if (!config.ui.chart || config.ui.chart.sizeSelectorActive !== 0) {
      this.components.push({
        component: _bubblesize2.default,
        placeholder: ".vzb-dialog-bubblesize",
        model: ["state.marker.size", "locale"],
        ui: {
          show_button: false
        }
      });
    }

    this._super(config, parent);
  },
  readyOnce: function readyOnce() {
    this._super();
    this.updateSubtitle();
  },
  updateSubtitle: function updateSubtitle() {
    var conceptProps = this.model.state.marker.size.getConceptprops();
    var subtitle = utils.getSubtitle(conceptProps.name, conceptProps.name_short);

    this.element.select(".vzb-dialog-subtitle").text(subtitle);
  }
});

exports.default = Size;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _singlehandleslider = __webpack_require__(63);

var _singlehandleslider2 = _interopRequireDefault(_singlehandleslider);

var _simplecheckbox = __webpack_require__(52);

var _simplecheckbox2 = _interopRequireDefault(_simplecheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Speed = _dialog2.default.extend("speed", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "speed";

    // in dialog, this.model_expects = ["state", "data"];

    this.components = [{
      component: _singlehandleslider2.default,
      placeholder: ".vzb-speed-slider",
      model: ["state.time", "locale"],
      arg: "delay",
      properties: {
        domain: [1200, 900, 450, 200, 150, 100],
        roundDigits: 0
      }
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-showforecast-switch",
      model: ["state.time", "locale"],
      checkbox: "showForecast"
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-pausebeforeforecast-switch",
      model: ["state.time", "locale"],
      checkbox: "pauseBeforeForecast"
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-showstripedpatternwhenforecast-switch",
      model: ["ui.chart", "locale"],
      checkbox: "showForecastOverlay"
    }];

    this._super(config, parent);
  },
  readyOnce: function readyOnce() {
    this._super();
    var _this = this;

    this.timeFormatExampleEl = this.element.select(".vzb-timeformatexample-label");

    this.forecastFieldEl = this.element.select(".vzb-endbeforeforecast-field").on("keypress", function () {
      if (d3.event.charCode == 13 || d3.event.keyCode == 13) {
        //this prevents form submission action with subsequent page reload
        d3.event.preventDefault();
        this.blur();
      }
    }).on("change", function () {
      var parsed = _this.model.state.time.parse(this.value);
      if (utils.isDate(parsed)) {
        _this.model.state.time.endBeforeForecast = parsed;
      }
    });

    this.updateView();
  },
  updateView: function updateView() {
    this.forecastFieldEl.property("value", this.model.state.time.formatDate(this.model.state.time.endBeforeForecast));
    this.timeFormatExampleEl.text(this.model.state.time.formatDate(new Date()));
  }
});

exports.default = Speed;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _draggablelist = __webpack_require__(186);

var _draggablelist2 = _interopRequireDefault(_draggablelist);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * stack dialog
 */

var Stack = _dialog2.default.extend("stack", {

  /**
     * Initializes the dialog component
     * @param config component configuration
     * @param context component context (parent)
     */
  init: function init(config, parent) {
    this.name = "stack";
    var _this = this;

    // in dialog, this.model_expects = ["state", "ui", "locale"];

    this.components = [{
      component: _draggablelist2.default,
      placeholder: ".vzb-dialog-draggablelist",
      model: ["state.marker.group", "state.marker.color", "locale", "ui.chart"],
      groupID: "manualSorting",
      isEnabled: "manualSortingEnabled",
      dataArrFn: _this.manualSorting.bind(_this),
      lang: ""
    }];

    this.model_binds = {
      "change:state.marker.group": function changeStateMarkerGroup(evt) {
        //console.log("group change " + evt);
        if (!_this._ready) return;
        _this.updateView();
      }
    };

    this._super(config, parent);
  },
  readyOnce: function readyOnce() {
    this._super();

    var _this = this;
    this.group = this.model.state.marker.group;
    this.stack = this.model.state.marker.stack;

    this.howToStackEl = this.element.select(".vzb-howtostack").selectAll("input").on("change", function () {
      _this.setModel("stack", d3.select(this).node().value);
    });
    this.howToMergeEl = this.element.select(".vzb-howtomerge").selectAll("input").on("change", function () {
      _this.setModel("merge", d3.select(this).node().value);
    });

    this.updateView();
  },
  ready: function ready() {
    this._super();
    if (!this.model.state.marker.color.isDiscrete()) {
      if (this.stack.use == "property") {
        this.setModel("stack", "none");
        return;
      } else if (this.group.merge) {
        this.setModel("merge", "none");
        return;
      }
    }
    this.updateView();
  },
  updateView: function updateView() {
    var _this = this;

    this.howToStackEl.property("checked", function () {
      if (d3.select(this).node().value === "none") return _this.stack.which === "none";
      if (d3.select(this).node().value === "bycolor") return _this.stack.which === _this.model.state.marker.color.which;
      if (d3.select(this).node().value === "all") return _this.stack.which === "all";
    }).attr("disabled", function () {
      if (d3.select(this).node().value === "none") return null; // always enabled
      if (d3.select(this).node().value === "all") return null; // always enabled
      if (d3.select(this).node().value === "bycolor") return _this.model.state.marker.color.use !== "property" ? true : null;
    });

    _this.model.ui.chart.manualSortingEnabled = _this.stack.which == "all";

    this.howToMergeEl.property("checked", function () {
      if (d3.select(this).node().value === "none") return !_this.group.merge && !_this.stack.merge;
      if (d3.select(this).node().value === "grouped") return _this.group.merge;
      if (d3.select(this).node().value === "stacked") return _this.stack.merge;
    }).attr("disabled", function () {
      if (d3.select(this).node().value === "none") return null; // always enabled
      if (d3.select(this).node().value === "grouped") return _this.stack.which === "none" || _this.model.state.marker.color.use !== "property" ? true : null;
      if (d3.select(this).node().value === "stacked") return _this.stack.which === "all" ? null : true;
    });
  },
  manualSorting: function manualSorting(value) {
    var persistent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (arguments.length === 0) return this.model.state.marker.group.manualSorting;
    this.model.state.marker.group.set({ manualSorting: value }, false, persistent);
  },
  setModel: function setModel(what, value) {

    var obj = { stack: {}, group: {} };

    if (what === "merge") {
      switch (value) {
        case "none":
          obj.group.merge = false;
          obj.stack.merge = false;
          break;
        case "grouped":
          obj.group.merge = true;
          obj.stack.merge = false;
          break;
        case "stacked":
          obj.group.merge = false;
          obj.stack.merge = true;
          break;
      }
    }
    if (what === "stack") {

      switch (value) {
        case "all":
          obj.stack.use = "constant";
          obj.stack.which = "all";
          break;
        case "none":
          obj.stack.use = "constant";
          obj.stack.which = "none";
          break;
        case "bycolor":
          obj.stack.use = "property";
          obj.stack.which = this.model.state.marker.color.which;
          obj.stack.spaceRef = this.model.state.marker.color.spaceRef;
          break;
      }

      //validate possible merge values in group and stack hooks
      if (value === "none" && this.group.merge) obj.group.merge = false;
      if (value !== "all" && this.stack.merge) obj.stack.merge = false;
    }

    this.model.state.marker.set(obj);
  }
});

exports.default = Stack;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var DraggableList = _component2.default.extend({
  init: function init(config, context) {
    this.template = '<span class="vzb-dl-holder"><ul class="vzb-draggable list vzb-dialog-scrollable"></ul></span>';
    var _this = this;
    this.name = "draggableList";

    this.dataArrFn = config.dataArrFn;
    this.lang = config.lang;

    this.model_expects = [{
      name: "group",
      type: "model"
    }, {
      name: "color",
      type: "color"
    }, {
      name: "locale",
      type: "locale"
    }, {
      name: "chart",
      type: "model"
    }];

    this.groupID = config.groupID;
    this.isEnabled = config.isEnabled;
    this.draggable = true;

    if (!config.groupID) utils.warn("draggablelist.js complains on 'groupID' property: " + config.groupID);

    this.model_binds = {
      "translate:locale": function translateLocale(evt) {
        _this.updateView();
      },
      "change:group.which": function changeGroupWhich(evt) {
        _this.updateView();
      }
    };

    this.model_binds["change:group." + this.groupID] = function (evt) {
      _this.updateView();
    };
    this.model_binds["change:chart." + this.isEnabled] = function (evt) {
      _this.draggable = _this.model.chart[_this.isEnabled];
      _this.updateView();
    };

    this._super(config, context);

    this.updateData = utils.debounce(this.updateData, 1000);

    this.itemDragger = d3.drag().on("start", function (draggedData, i) {
      if (_this.dataUpdateFlag || !_this.draggable) return;
      d3.event.sourceEvent.stopPropagation();
      _this.parentBoundRect = _this.element.node().getBoundingClientRect();
      _this.element.selectAll("div").each(function (d, i) {
        var boundRect = this.getBoundingClientRect();
        d._y = boundRect.top;
        d._top = 0;
        if (draggedData.data === d.data) {
          d._height = boundRect.height;
          _this.selectedNode = this;
        }
      });
      d3.select(_this.selectedNode).classed("dragged", true);
    }).on("drag", function (draggedData, draggedIndex) {
      if (_this.dataUpdateFlag || !_this.draggable) return;
      draggedData._top += d3.event.dy;
      var newDraggedY = draggedData._y + draggedData._top;
      if (newDraggedY > _this.parentBoundRect.top && newDraggedY + draggedData._height < _this.parentBoundRect.top + _this.parentBoundRect.height) {
        _this.itemsEl.style("top", function (d, i) {
          var top = 0;

          if (i < draggedIndex && d._y + draggedData._height * 0.5 > newDraggedY) {
            top = draggedData._height;
          } else if (i > draggedIndex && d._y - draggedData._height * 0.5 < newDraggedY) {
            top = -draggedData._height;
          }

          if (i != draggedIndex) d._top = top;
          return d._top + "px";
        });
      }
    }).on("end", function (d, i) {
      if (_this.dataUpdateFlag || !_this.draggable) return;
      _this.getData();
    });
  },
  ready: function ready() {
    var _this = this;

    this.updateView();

    this.itemsEl = this.element.selectAll("div");

    this.itemsEl.call(_this.itemDragger);

    var test = this.itemsEl.select("li").on("mouseover", function () {
      d3.select(this).classed("hover", true);
    }).on("mouseout", function () {
      d3.select(this).classed("hover", false);
    }).on("touchstart", function () {
      d3.event.preventDefault();
    });
  },
  updateView: function updateView() {
    var _this = this;

    var labels = _this.model.color.getColorlegendMarker().label.getItems();
    var labelsKeys = utils.keys(labels);

    var labelsKeysSorted = labelsKeys.slice().sort();
    var prevLabelsKeysSorted = (this.dataArrFn() || []).slice().sort();
    if (utils.arrayEquals(labelsKeysSorted, prevLabelsKeysSorted) === false) {
      this.dataArrFn(labelsKeys);
    }

    this.items = this.element.selectAll("div").data(function () {
      return (_this.dataArrFn() || []).map(function (d) {
        return { data: d };
      });
    });

    this.items.exit().remove();

    this.items = this.items.enter().append("div").each(function () {
      var view = d3.select(this).append("li");

      view.append("span").classed("label-circle", true);

      view.append("span").classed("label-text", true);
    }).merge(this.items);

    var colorScale = this.model.color.getScale();
    this.items.select("li").each(function (_ref) {
      var data = _ref.data;

      var view = d3.select(this);

      view.classed("hover", false).attr("data", data);

      view.select(".label-circle").style("background", colorScale(data));

      view.select(".label-text").text(labels[data]);
    });

    var draggable = _this.draggable ? true : null;
    this.element.selectAll("div").style("top", "").attr("draggable", draggable).classed("dragged", false);
    this.dataUpdateFlag = false;
  },
  getData: function getData() {
    var dataArr = [];
    var data = this.element.selectAll("div").data();

    dataArr = data.sort(function (a, b) {
      return a._y + a._top - (b._y + b._top);
    }).map(function (d) {
      return d.data;
    });
    if (utils.arrayEquals(this.dataArrFn(), dataArr)) {
      this.updateView();
    } else {
      this.dataUpdateFlag = true;
      this.updateData(dataArr, true);
    }
  },
  updateData: function updateData(dataArr, persistent) {
    this.dataArrFn(dataArr, persistent);
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.element = d3.select(this.element).select(".list");
  }
});

exports.default = DraggableList;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _simplecheckbox = __webpack_require__(52);

var _simplecheckbox2 = _interopRequireDefault(_simplecheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Technical = _dialog2.default.extend("technical", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "technical";

    this.components = [{
      component: _simplecheckbox2.default,
      placeholder: ".vzb-advancedshowandselect-switch",
      model: ["ui.dialogs.dialog.find", "locale"],
      checkbox: "enableSelectShowSwitch"
    }];

    this._super(config, parent);
  }
});

exports.default = Technical;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _d = __webpack_require__(189);

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Timedisplay dialog
 */
var TimeDisplay = _dialog2.default.extend("timedisplay", {
  init: function init(config, parent) {
    var _this = this;

    this.name = "timedisplay";

    this.model_binds = {
      "change:state.time.value": function changeStateTimeValue() {
        _this.updateTime();
      }
    };

    this._super(config, parent);
  },
  ready: function ready() {
    this.updateTime();
  },
  readyOnce: function readyOnce() {
    this._super();
    this.timeLabel = new _d2.default(this.element.select(".vzb-timedisplay"));
    this.timeLabel.setConditions({ widthRatio: 1, heightRatio: 1 });
    this.resize();
  },
  resize: function resize() {
    if (this.timeLabel) {
      this.timeLabel.resize(this.contentEl.style("width"), this.contentEl.style("height"));
    }
  },
  updateTime: function updateTime() {
    var timeMdl = this.model.state.time;
    this.time_1 = this.time == null ? timeMdl.value : this.time;
    this.time = timeMdl.value;
    var duration = timeMdl.playing && this.time - this.time_1 > 0 ? timeMdl.delayAnimations : 0;
    this.timeLabel.setText(timeMdl.formatDate(this.time, "ui"), duration);
  }
});

exports.default = TimeDisplay;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _class2.default.extend({
  init: function init(context, conditions) {
    this.context = context;
    this.context.classed("vzb-dynamic-background", true);

    this.width = 0;
    this.height = 0;
    this.topOffset = 0;
    this.leftOffset = 0;
    this.bottomOffset = 0;
    this.rightOffset = 0;
    this.textWidth = 0;
    this.textHeight = 0;
    this.widthRatio = 0.9;
    this.heightRatio = 0.9;
    this.xAlign = "center";
    this.yAlign = "center";
    this.element = this.context.append("text").style("font-size", "20px");
    this._sample = this.context.append("text").style("font-size", "20px").style("opacity", 0);

    if (conditions) {
      this.setConditions(conditions);
    }
  },
  setConditions: function setConditions(conditions) {
    if (!isNaN(parseFloat(conditions.rightOffset)) && isFinite(conditions.rightOffset)) {
      this.rightOffset = conditions.rightOffset;
    }
    if (!isNaN(parseFloat(conditions.leftOffset)) && isFinite(conditions.leftOffset)) {
      this.leftOffset = conditions.leftOffset;
    }
    if (!isNaN(parseFloat(conditions.topOffset)) && isFinite(conditions.topOffset)) {
      this.topOffset = conditions.topOffset;
    }
    if (!isNaN(parseFloat(conditions.bottomOffset)) && isFinite(conditions.bottomOffset)) {
      this.bottomOffset = conditions.bottomOffset;
    }
    if (conditions.xAlign) {
      this.xAlign = conditions.xAlign;
    }
    if (conditions.yAlign) {
      this.yAlign = conditions.yAlign;
    }
    if (!isNaN(parseFloat(conditions.widthRatio)) && conditions.widthRatio > 0 && conditions.widthRatio <= 1) {
      this.widthRatio = conditions.widthRatio;
    }
    if (!isNaN(parseFloat(conditions.heightRatio)) && conditions.heightRatio > 0 && conditions.heightRatio <= 1) {
      this.heightRatio = conditions.heightRatio;
    }
    return this;
  },
  resize: function resize(width, height, topOffset, leftOffset) {
    this.width = parseInt(width, 10) || 0;
    this.height = parseInt(height, 10) || 0;

    if (topOffset) {
      this.topOffset = topOffset;
    }
    if (leftOffset) {
      this.leftOffset = leftOffset;
    }

    this._resizeText();
  },
  setText: function setText(text) {
    var _this = this;

    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    var callback = function callback() {
      _this._sample.text(text);
      _this._resizeText();
      _this.element.text(text);
    };

    var clear = function clear() {
      clearTimeout(_this._text.timeout);
      delete _this._text;
    };

    if (!delay) {
      if (this._text) {
        clear();
      }
      callback();
    } else {
      if (this._text) {
        this._text.callback();
        clear();
      }
      this._text = {
        callback: callback,
        timeout: setTimeout(function () {
          callback();
          clear();
        }, delay)
      };
    }

    return this;
  },
  _resizeText: function _resizeText() {
    var bbox = this._sample.node().getBBox();
    if (!bbox.width || !bbox.height || !this.width || !this.height) return this;

    // method from http://stackoverflow.com/a/22580176
    var widthTransform = this.width * this.widthRatio / bbox.width;
    var heightTransform = this.height * this.heightRatio / bbox.height;
    this.scalar = Math.min(widthTransform, heightTransform);
    this.element.attr("transform", "scale(" + this.scalar + ")");

    this.textHeight = bbox.height * this.scalar;
    this.textWidth = bbox.width * this.scalar;

    switch (this.yAlign) {
      case "bottom":
        this.context.select("text").attr("dy", ".325em");break;
      case "center":
        this.context.select("text").attr("dy", ".325em");break;
      case "top":
        this.context.select("text").attr("dy", "0");break;
    }

    this.context.attr("transform", "translate(" + this._getLeftOffset() + "," + this._getTopOffset() + ")");

    return this;
  },
  _getLeftOffset: function _getLeftOffset() {
    switch (this.xAlign) {
      case "right":
        return this.width - this.textWidth / 2 - this.rightOffset;
      case "left":
        return this.textWidth / 2 + this.leftOffset;
      default:
        return this.width / 2;
    }
  },
  _getTopOffset: function _getTopOffset() {
    switch (this.yAlign) {
      case "top":
        return this.textHeight / 2 + this.topOffset;
      case "bottom":
        return this.height - this.textHeight / 2 - this.bottomOffset;
      default:
        return this.height / 2;
    }
  }
}); //d3.svg.dynamicBackground

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _dialog = __webpack_require__(12);

var _dialog2 = _interopRequireDefault(_dialog);

var _zoombuttonlist = __webpack_require__(191);

var _zoombuttonlist2 = _interopRequireDefault(_zoombuttonlist);

var _simplecheckbox = __webpack_require__(52);

var _simplecheckbox2 = _interopRequireDefault(_simplecheckbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*
 * Zoom dialog
 */

var Zoom = _dialog2.default.extend("zoom", {

  /**
   * Initializes the dialog component
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, parent) {
    this.name = "zoom";

    // in dialog, this.model_expects = ["state", "data"];

    this.components = [{
      component: _zoombuttonlist2.default,
      placeholder: ".vzb-dialog-zoom-buttonlist",
      model: ["state", "ui", "locale"]
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-panwitharrow-switch",
      model: ["ui", "locale"],
      checkbox: "panWithArrow"
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-zoomonscrolling-switch",
      model: ["ui", "locale"],
      checkbox: "zoomOnScrolling"
    }, {
      component: _simplecheckbox2.default,
      placeholder: ".vzb-adaptminmaxzoom-switch",
      model: ["ui", "locale"],
      checkbox: "adaptMinMaxZoom"
    }];

    this._super(config, parent);
  }
});

exports.default = Zoom;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _iconset = __webpack_require__(21);

var iconset = _interopRequireWildcard(_iconset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI OPTIONSBUTTONLIST
 * Reusable optionsbuttonlist component
 */

//default existing buttons
var class_active = "vzb-active";
// var class_active_locked = "vzb-active-locked";
// var class_hide_btn = "vzb-dialog-side-btn";
// var class_unavailable = "vzb-unavailable";
// var class_vzb_fullscreen = "vzb-force-fullscreen";
// var class_container_fullscreen = "vzb-container-fullscreen";

var ZoomButtonList = _component2.default.extend({

  /**
   * Initializes the buttonlist
   * @param config component configuration
   * @param context component context (parent)
   */
  init: function init(config, context) {

    //set properties
    var _this = this;
    this.name = "gapminder-zoombuttonlist";

    this.model_expects = [{
      name: "state",
      type: "model"
    }, {
      name: "ui",
      type: "ui"
    }, {
      name: "locale",
      type: "locale"
    }];

    this._available_buttons = {
      "arrow": {
        title: "buttons/cursorarrow",
        icon: "cursorArrow",
        func: this.toggleCursorMode.bind(this),
        required: true,
        statebind: "ui.cursorMode",
        statebindfunc: this.setCursorMode.bind(this)
      },
      "plus": {
        title: "buttons/cursorplus",
        icon: "cursorPlus",
        func: this.toggleCursorMode.bind(this),
        required: true,
        statebind: "ui.cursorMode",
        statebindfunc: this.setCursorMode.bind(this)
      },
      "minus": {
        title: "buttons/cursorminus",
        icon: "cursorMinus",
        func: this.toggleCursorMode.bind(this),
        required: true,
        statebind: "ui.cursorMode",
        statebindfunc: this.setCursorMode.bind(this)
      },
      "hand": {
        title: "buttons/cursorhand",
        icon: "cursorHand",
        func: this.toggleCursorMode.bind(this),
        required: true,
        statebind: "ui.cursorMode",
        statebindfunc: this.setCursorMode.bind(this)
      },
      "hundredpercent": {
        title: "buttons/hundredpercent",
        icon: "hundredPercent",
        func: this.toggleHundredPercent.bind(this),
        required: true
        // ,
        // statebind: "ui.chart.trails",
        // statebindfunc: this.setBubbleTrails.bind(this)
      }
    };

    this.model_binds = {};

    Object.keys(this._available_buttons).forEach(function (buttonId) {
      var button = _this._available_buttons[buttonId];
      if (button && button.statebind) {
        _this.model_binds["change:" + button.statebind] = function (evt) {
          button.statebindfunc(buttonId, evt.source.value);
        };
      }
    });

    this._super(config, context);
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.element = d3.select(this.placeholder);
    this.element.selectAll("div").remove();

    this._addButtons(Object.keys(this._available_buttons), []);
    this.setCursorMode("arrow");
  },


  /*
   * adds buttons configuration to the components and template_data
   * @param {Array} button_list list of buttons to be added
   */
  _addButtons: function _addButtons(button_list, button_expand) {
    var _this = this;
    this._components_config = [];
    var details_btns = [];
    if (!button_list.length) return;
    //add a component for each button
    for (var i = 0; i < button_list.length; i++) {

      var btn = button_list[i];
      var btn_config = this._available_buttons[btn];

      //add template data
      var d = btn_config ? btn : "_default";
      var details_btn = utils.clone(this._available_buttons[d]);

      details_btn.id = btn;
      details_btn.icon = iconset[details_btn.icon];
      details_btns.push(details_btn);
    }

    var t = this.getTranslationFunction(true);

    this.element.selectAll("button").data(details_btns).enter().append("button").attr("class", function (d) {
      var cls = "vzb-buttonlist-btn";
      if (button_expand.length > 0) {
        if (button_expand.indexOf(d.id) > -1) {
          cls += " vzb-dialog-side-btn";
        }
      }

      return cls;
    }).attr("data-btn", function (d) {
      return d.id;
    }).html(function (btn) {
      return "<span class='vzb-buttonlist-btn-icon fa'>" + btn.icon + "</span><span class='vzb-buttonlist-btn-title'>" + t(btn.title) + "</span>";
    });

    var buttons = this.element.selectAll(".vzb-buttonlist-btn");

    //clicking the button
    buttons.on("click", function () {

      d3.event.preventDefault();
      d3.event.stopPropagation();

      var id = d3.select(this).attr("data-btn");
      _this.proceedClick(id);
    });
  },
  proceedClick: function proceedClick(id) {
    var _this = this;
    var btn = _this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");
    var classes = btn.attr("class");
    var btn_config = _this._available_buttons[id];

    if (btn_config && btn_config.func) {
      btn_config.func(id);
    } else {
      var btn_active = classes.indexOf(class_active) === -1;

      btn.classed(class_active, btn_active);
      var evt = {};
      evt["id"] = id;
      evt["active"] = btn_active;
      _this.trigger("click", evt);
    }
  },
  setButtonActive: function setButtonActive(id, boolActive) {
    var btn = this.element.selectAll(".vzb-buttonlist-btn[data-btn='" + id + "']");

    btn.classed(class_active, boolActive);
  },
  toggleCursorMode: function toggleCursorMode(id) {
    var value = id;
    this.model.ui.set("cursorMode", value, false, false);
  },
  setCursorMode: function setCursorMode(id) {
    var value = this.model.ui.cursorMode ? this.model.ui.cursorMode : "arrow";
    this.element.selectAll(".vzb-buttonlist-btn").classed(class_active, function (d) {
      return d.id == value;
    });
  },
  toggleHundredPercent: function toggleHundredPercent(id) {
    this.root.trigger("resetZoom");
  }
});

exports.default = ZoomButtonList;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__(193);

__webpack_require__(395);

var _vizabi = __webpack_require__(396);

var _vizabi2 = _interopRequireDefault(_vizabi);

__webpack_require__(441);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _vizabi2.default;

module.exports = _vizabi2.default;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(194);

__webpack_require__(391);

__webpack_require__(392);

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(80)))

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(195);
__webpack_require__(198);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(202);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(206);
__webpack_require__(207);
__webpack_require__(208);
__webpack_require__(209);
__webpack_require__(210);
__webpack_require__(211);
__webpack_require__(212);
__webpack_require__(213);
__webpack_require__(214);
__webpack_require__(215);
__webpack_require__(216);
__webpack_require__(217);
__webpack_require__(218);
__webpack_require__(219);
__webpack_require__(220);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(223);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(226);
__webpack_require__(227);
__webpack_require__(228);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(236);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(251);
__webpack_require__(252);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(257);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(261);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(269);
__webpack_require__(270);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(273);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(278);
__webpack_require__(279);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(282);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(286);
__webpack_require__(287);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(294);
__webpack_require__(295);
__webpack_require__(296);
__webpack_require__(297);
__webpack_require__(298);
__webpack_require__(101);
__webpack_require__(299);
__webpack_require__(135);
__webpack_require__(300);
__webpack_require__(136);
__webpack_require__(301);
__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(139);
__webpack_require__(141);
__webpack_require__(142);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(310);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(313);
__webpack_require__(314);
__webpack_require__(315);
__webpack_require__(316);
__webpack_require__(317);
__webpack_require__(318);
__webpack_require__(319);
__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(322);
__webpack_require__(323);
__webpack_require__(324);
__webpack_require__(325);
__webpack_require__(326);
__webpack_require__(327);
__webpack_require__(328);
__webpack_require__(329);
__webpack_require__(330);
__webpack_require__(331);
__webpack_require__(332);
__webpack_require__(333);
__webpack_require__(334);
__webpack_require__(335);
__webpack_require__(336);
__webpack_require__(337);
__webpack_require__(338);
__webpack_require__(339);
__webpack_require__(340);
__webpack_require__(341);
__webpack_require__(342);
__webpack_require__(343);
__webpack_require__(344);
__webpack_require__(345);
__webpack_require__(346);
__webpack_require__(347);
__webpack_require__(348);
__webpack_require__(349);
__webpack_require__(350);
__webpack_require__(351);
__webpack_require__(352);
__webpack_require__(353);
__webpack_require__(354);
__webpack_require__(355);
__webpack_require__(356);
__webpack_require__(357);
__webpack_require__(358);
__webpack_require__(359);
__webpack_require__(360);
__webpack_require__(361);
__webpack_require__(362);
__webpack_require__(363);
__webpack_require__(364);
__webpack_require__(365);
__webpack_require__(366);
__webpack_require__(367);
__webpack_require__(368);
__webpack_require__(369);
__webpack_require__(370);
__webpack_require__(371);
__webpack_require__(372);
__webpack_require__(373);
__webpack_require__(374);
__webpack_require__(375);
__webpack_require__(376);
__webpack_require__(377);
__webpack_require__(378);
__webpack_require__(379);
__webpack_require__(380);
__webpack_require__(381);
__webpack_require__(382);
__webpack_require__(383);
__webpack_require__(384);
__webpack_require__(385);
__webpack_require__(386);
__webpack_require__(387);
__webpack_require__(388);
__webpack_require__(389);
__webpack_require__(390);
module.exports = __webpack_require__(22);


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(3);
var has = __webpack_require__(17);
var DESCRIPTORS = __webpack_require__(9);
var $export = __webpack_require__(0);
var redefine = __webpack_require__(15);
var META = __webpack_require__(36).KEY;
var $fails = __webpack_require__(4);
var shared = __webpack_require__(58);
var setToStringTag = __webpack_require__(53);
var uid = __webpack_require__(39);
var wks = __webpack_require__(7);
var wksExt = __webpack_require__(117);
var wksDefine = __webpack_require__(82);
var enumKeys = __webpack_require__(197);
var isArray = __webpack_require__(66);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var toIObject = __webpack_require__(18);
var toPrimitive = __webpack_require__(27);
var createDesc = __webpack_require__(38);
var _create = __webpack_require__(42);
var gOPNExt = __webpack_require__(120);
var $GOPD = __webpack_require__(19);
var $DP = __webpack_require__(10);
var $keys = __webpack_require__(40);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(43).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(60).f = $propertyIsEnumerable;
  __webpack_require__(65).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(35)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(58)('native-function-to-string', Function.toString);


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(40);
var gOPS = __webpack_require__(65);
var pIE = __webpack_require__(60);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(42) });


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperty: __webpack_require__(10).f });


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(9), 'Object', { defineProperties: __webpack_require__(119) });


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(18);
var $getOwnPropertyDescriptor = __webpack_require__(19).f;

__webpack_require__(29)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(11);
var $getPrototypeOf = __webpack_require__(20);

__webpack_require__(29)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(11);
var $keys = __webpack_require__(40);

__webpack_require__(29)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(29)('getOwnPropertyNames', function () {
  return __webpack_require__(120).f;
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(6);
var meta = __webpack_require__(36).onFreeze;

__webpack_require__(29)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(6);
var meta = __webpack_require__(36).onFreeze;

__webpack_require__(29)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(6);
var meta = __webpack_require__(36).onFreeze;

__webpack_require__(29)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(6);

__webpack_require__(29)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(6);

__webpack_require__(29)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(6);

__webpack_require__(29)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(0);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(121) });


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { is: __webpack_require__(122) });


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(0);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(86).set });


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(54);
var test = {};
test[__webpack_require__(7)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(15)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(0);

$export($export.P, 'Function', { bind: __webpack_require__(123) });


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(10).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(9) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(6);
var getPrototypeOf = __webpack_require__(20);
var HAS_INSTANCE = __webpack_require__(7)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(10).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(125);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(126);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(3);
var has = __webpack_require__(17);
var cof = __webpack_require__(24);
var inheritIfRequired = __webpack_require__(88);
var toPrimitive = __webpack_require__(27);
var fails = __webpack_require__(4);
var gOPN = __webpack_require__(43).f;
var gOPD = __webpack_require__(19).f;
var dP = __webpack_require__(10).f;
var $trim = __webpack_require__(55).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(42)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(9) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(15)(global, NUMBER, $Number);
}


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toInteger = __webpack_require__(25);
var aNumberValue = __webpack_require__(127);
var repeat = __webpack_require__(89);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(4)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $fails = __webpack_require__(4);
var aNumberValue = __webpack_require__(127);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(0);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(0);
var _isFinite = __webpack_require__(3).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', { isInteger: __webpack_require__(128) });


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(0);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(0);
var isInteger = __webpack_require__(128);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(0);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseFloat = __webpack_require__(126);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $parseInt = __webpack_require__(125);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(0);
var log1p = __webpack_require__(129);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(0);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(0);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(0);
var sign = __webpack_require__(90);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(0);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(0);
var $expm1 = __webpack_require__(91);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { fround: __webpack_require__(130) });


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(0);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(0);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { log1p: __webpack_require__(129) });


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', { sign: __webpack_require__(90) });


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(91);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(4)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(0);
var expm1 = __webpack_require__(91);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toAbsoluteIndex = __webpack_require__(41);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(18);
var toLength = __webpack_require__(8);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(55)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(67)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(92)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $at = __webpack_require__(67)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(8);
var context = __webpack_require__(94);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(95)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(0);
var context = __webpack_require__(94);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(95)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(89)
});


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(0);
var toLength = __webpack_require__(8);
var context = __webpack_require__(94);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(95)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(16)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(16)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(16)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(16)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(16)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(16)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(16)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(16)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(16)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(16)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(16)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(16)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(16)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(0);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(27);

$export($export.P + $export.F * __webpack_require__(4)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(0);
var toISOString = __webpack_require__(274);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(4);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(15)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(7)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(14)(proto, TO_PRIMITIVE, __webpack_require__(277));


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(27);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(0);

$export($export.S, 'Array', { isArray: __webpack_require__(66) });


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(23);
var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var call = __webpack_require__(131);
var isArrayIter = __webpack_require__(96);
var toLength = __webpack_require__(8);
var createProperty = __webpack_require__(97);
var getIterFn = __webpack_require__(98);

$export($export.S + $export.F * !__webpack_require__(69)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var createProperty = __webpack_require__(97);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(4)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(0);
var toIObject = __webpack_require__(18);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(59) != Object || !__webpack_require__(26)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var html = __webpack_require__(85);
var cof = __webpack_require__(24);
var toAbsoluteIndex = __webpack_require__(41);
var toLength = __webpack_require__(8);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(4)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var aFunction = __webpack_require__(13);
var toObject = __webpack_require__(11);
var fails = __webpack_require__(4);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(26)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $forEach = __webpack_require__(30)(0);
var STRICT = __webpack_require__(26)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(6);
var isArray = __webpack_require__(66);
var SPECIES = __webpack_require__(7)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $map = __webpack_require__(30)(1);

$export($export.P + $export.F * !__webpack_require__(26)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $filter = __webpack_require__(30)(2);

$export($export.P + $export.F * !__webpack_require__(26)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $some = __webpack_require__(30)(3);

$export($export.P + $export.F * !__webpack_require__(26)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $every = __webpack_require__(30)(4);

$export($export.P + $export.F * !__webpack_require__(26)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(132);

$export($export.P + $export.F * !__webpack_require__(26)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $reduce = __webpack_require__(132);

$export($export.P + $export.F * !__webpack_require__(26)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $indexOf = __webpack_require__(64)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(26)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toIObject = __webpack_require__(18);
var toInteger = __webpack_require__(25);
var toLength = __webpack_require__(8);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(26)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { copyWithin: __webpack_require__(133) });

__webpack_require__(37)('copyWithin');


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(0);

$export($export.P, 'Array', { fill: __webpack_require__(100) });

__webpack_require__(37)('fill');


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(30)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(37)(KEY);


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(0);
var $find = __webpack_require__(30)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(37)(KEY);


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(44)('Array');


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(3);
var inheritIfRequired = __webpack_require__(88);
var dP = __webpack_require__(10).f;
var gOPN = __webpack_require__(43).f;
var isRegExp = __webpack_require__(68);
var $flags = __webpack_require__(61);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(9) && (!CORRECT_NEW || __webpack_require__(4)(function () {
  re2[__webpack_require__(7)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(15)(global, 'RegExp', $RegExp);
}

__webpack_require__(44)('RegExp');


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(136);
var anObject = __webpack_require__(2);
var $flags = __webpack_require__(61);
var DESCRIPTORS = __webpack_require__(9);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(15)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(4)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var toLength = __webpack_require__(8);
var advanceStringIndex = __webpack_require__(103);
var regExpExec = __webpack_require__(70);

// @@match logic
__webpack_require__(71)('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var toInteger = __webpack_require__(25);
var advanceStringIndex = __webpack_require__(103);
var regExpExec = __webpack_require__(70);
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(71)('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(2);
var sameValue = __webpack_require__(122);
var regExpExec = __webpack_require__(70);

// @@search logic
__webpack_require__(71)('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(68);
var anObject = __webpack_require__(2);
var speciesConstructor = __webpack_require__(62);
var advanceStringIndex = __webpack_require__(103);
var toLength = __webpack_require__(8);
var callRegExpExec = __webpack_require__(70);
var regexpExec = __webpack_require__(102);
var fails = __webpack_require__(4);
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(71)('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(35);
var global = __webpack_require__(3);
var ctx = __webpack_require__(23);
var classof = __webpack_require__(54);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(6);
var aFunction = __webpack_require__(13);
var anInstance = __webpack_require__(45);
var forOf = __webpack_require__(46);
var speciesConstructor = __webpack_require__(62);
var task = __webpack_require__(104).set;
var microtask = __webpack_require__(105)();
var newPromiseCapabilityModule = __webpack_require__(106);
var perform = __webpack_require__(137);
var userAgent = __webpack_require__(72);
var promiseResolve = __webpack_require__(138);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(7)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(47)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(53)($Promise, PROMISE);
__webpack_require__(44)(PROMISE);
Wrapper = __webpack_require__(22)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(69)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(143);
var validate = __webpack_require__(48);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(73)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var $typed = __webpack_require__(74);
var buffer = __webpack_require__(107);
var anObject = __webpack_require__(2);
var toAbsoluteIndex = __webpack_require__(41);
var toLength = __webpack_require__(8);
var isObject = __webpack_require__(6);
var ArrayBuffer = __webpack_require__(3).ArrayBuffer;
var speciesConstructor = __webpack_require__(62);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(4)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(44)(ARRAY_BUFFER);


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
$export($export.G + $export.W + $export.F * !__webpack_require__(74).ABV, {
  DataView: __webpack_require__(107).DataView
});


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(33)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(0);
var aFunction = __webpack_require__(13);
var anObject = __webpack_require__(2);
var rApply = (__webpack_require__(3).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(4)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(0);
var create = __webpack_require__(42);
var aFunction = __webpack_require__(13);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);
var fails = __webpack_require__(4);
var bind = __webpack_require__(123);
var rConstruct = (__webpack_require__(3).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(10);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var toPrimitive = __webpack_require__(27);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(4)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(0);
var gOPD = __webpack_require__(19).f;
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(93)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(19);
var getPrototypeOf = __webpack_require__(20);
var has = __webpack_require__(17);
var $export = __webpack_require__(0);
var isObject = __webpack_require__(6);
var anObject = __webpack_require__(2);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(19);
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(0);
var getProto = __webpack_require__(20);
var anObject = __webpack_require__(2);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(0);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(145) });


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(0);
var anObject = __webpack_require__(2);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(10);
var gOPD = __webpack_require__(19);
var getPrototypeOf = __webpack_require__(20);
var has = __webpack_require__(17);
var $export = __webpack_require__(0);
var createDesc = __webpack_require__(38);
var anObject = __webpack_require__(2);
var isObject = __webpack_require__(6);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(0);
var setProto = __webpack_require__(86);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(0);
var $includes = __webpack_require__(64)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(37)('includes');


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(146);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var aFunction = __webpack_require__(13);
var arraySpeciesCreate = __webpack_require__(99);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(37)('flatMap');


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(0);
var flattenIntoArray = __webpack_require__(146);
var toObject = __webpack_require__(11);
var toLength = __webpack_require__(8);
var toInteger = __webpack_require__(25);
var arraySpeciesCreate = __webpack_require__(99);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(37)('flatten');


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(0);
var $at = __webpack_require__(67)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(147);
var userAgent = __webpack_require__(72);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(0);
var $pad = __webpack_require__(147);
var userAgent = __webpack_require__(72);

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(55)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(55)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(0);
var defined = __webpack_require__(28);
var toLength = __webpack_require__(8);
var isRegExp = __webpack_require__(68);
var getFlags = __webpack_require__(61);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(93)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(82)('asyncIterator');


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(82)('observable');


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(0);
var ownKeys = __webpack_require__(145);
var toIObject = __webpack_require__(18);
var gOPD = __webpack_require__(19);
var createProperty = __webpack_require__(97);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $values = __webpack_require__(148)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(0);
var $entries = __webpack_require__(148)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var aFunction = __webpack_require__(13);
var $defineProperty = __webpack_require__(10);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(9) && $export($export.P + __webpack_require__(75), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var aFunction = __webpack_require__(13);
var $defineProperty = __webpack_require__(10);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(9) && $export($export.P + __webpack_require__(75), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(27);
var getPrototypeOf = __webpack_require__(20);
var getOwnPropertyDescriptor = __webpack_require__(19).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(9) && $export($export.P + __webpack_require__(75), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(0);
var toObject = __webpack_require__(11);
var toPrimitive = __webpack_require__(27);
var getPrototypeOf = __webpack_require__(20);
var getOwnPropertyDescriptor = __webpack_require__(19).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(9) && $export($export.P + __webpack_require__(75), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(149)('Map') });


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(0);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(149)('Set') });


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(76)('Map');


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(76)('Set');


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(76)('WeakMap');


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(76)('WeakSet');


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(77)('Map');


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(77)('Set');


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(77)('WeakMap');


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(77)('WeakSet');


/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.G, { global: __webpack_require__(3) });


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(0);

$export($export.S, 'System', { global: __webpack_require__(3) });


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(0);
var cof = __webpack_require__(24);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var scale = __webpack_require__(151);
var fround = __webpack_require__(130);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(0);

$export($export.S, 'Math', { scale: __webpack_require__(151) });


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(0);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(0);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(0);
var core = __webpack_require__(22);
var global = __webpack_require__(3);
var speciesConstructor = __webpack_require__(62);
var promiseResolve = __webpack_require__(138);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(0);
var newPromiseCapability = __webpack_require__(106);
var perform = __webpack_require__(137);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(20);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(141);
var from = __webpack_require__(150);
var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(20);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var getPrototypeOf = __webpack_require__(20);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(34);
var anObject = __webpack_require__(2);
var aFunction = __webpack_require__(13);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(0);
var microtask = __webpack_require__(105)();
var process = __webpack_require__(3).process;
var isNode = __webpack_require__(24)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(0);
var global = __webpack_require__(3);
var core = __webpack_require__(22);
var microtask = __webpack_require__(105)();
var OBSERVABLE = __webpack_require__(7)('observable');
var aFunction = __webpack_require__(13);
var anObject = __webpack_require__(2);
var anInstance = __webpack_require__(45);
var redefineAll = __webpack_require__(47);
var hide = __webpack_require__(14);
var forOf = __webpack_require__(46);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(44)('Observable');


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(3);
var $export = __webpack_require__(0);
var userAgent = __webpack_require__(72);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(0);
var $task = __webpack_require__(104);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(101);
var getKeys = __webpack_require__(40);
var redefine = __webpack_require__(15);
var global = __webpack_require__(3);
var hide = __webpack_require__(14);
var Iterators = __webpack_require__(56);
var wks = __webpack_require__(7);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(80)))

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(393);
module.exports = __webpack_require__(22).RegExp.escape;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(0);
var $re = __webpack_require__(394)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 394 */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),
/* 395 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Headers", function() { return Headers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Request", function() { return Request; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Response", function() { return Response; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMException", function() { return DOMException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetch", function() { return fetch; });
var support = {
  searchParams: 'URLSearchParams' in self,
  iterable: 'Symbol' in self && 'iterator' in Symbol,
  blob:
    'FileReader' in self &&
    'Blob' in self &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in self,
  arrayBuffer: 'ArrayBuffer' in self
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
    throw new TypeError('Invalid character in header field name')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
    var parts = line.split(':')
    var key = parts.shift().trim()
    if (key) {
      var value = parts.join(':').trim()
      headers.append(key, value)
    }
  })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = 'statusText' in options ? options.statusText : 'OK'
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = self.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      resolve(new Response(body, options))
    }

    xhr.onerror = function() {
      reject(new TypeError('Network request failed'))
    }

    xhr.ontimeout = function() {
      reject(new TypeError('Network request failed'))
    }

    xhr.onabort = function() {
      reject(new DOMException('Aborted', 'AbortError'))
    }

    xhr.open(request.method, request.url, true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr && support.blob) {
      xhr.responseType = 'blob'
    }

    request.headers.forEach(function(value, name) {
      xhr.setRequestHeader(name, value)
    })

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!self.fetch) {
  self.fetch = fetch
  self.Headers = Headers
  self.Request = Request
  self.Response = Response
}


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _requireAll = __webpack_require__(108);

var _requireAll2 = _interopRequireDefault(_requireAll);

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _tool = __webpack_require__(152);

var _tool2 = _interopRequireDefault(_tool);

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _model = __webpack_require__(49);

var _model2 = _interopRequireDefault(_model);

var _reader = __webpack_require__(111);

var _reader2 = _interopRequireDefault(_reader);

var _events = __webpack_require__(50);

var _events2 = _interopRequireDefault(_events);

var _globals = __webpack_require__(113);

var _globals2 = _interopRequireDefault(_globals);

var _iconset = __webpack_require__(21);

var iconset = _interopRequireWildcard(_iconset);

var _d = __webpack_require__(162);

var _d2 = _interopRequireDefault(_d);

var _d3 = __webpack_require__(163);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Vzb = function Vzb(name, placeholder, external_model) {
  var tool = _tool2.default.get(name);
  if (tool) {
    var t = new tool(placeholder, external_model);
    Vzb._instances[t._id] = t;
    return t;
  }
  utils.error('Tool "' + name + '" was not found.');
};

//stores reference to each tool on the page
Vzb._instances = {};
//stores global variables accessible by any tool or component
Vzb._globals = _globals2.default;

//TODO: clear all objects and intervals as well
//garbage collection
Vzb.clearInstances = function (id) {
  if (id) {
    Vzb._instances[id] = void 0;
  } else {
    for (var i in Vzb._instances) {
      Vzb._instances[i].clear();
    }
    Vzb._instances = {};
  }
};

//available readers = all
var readers = (0, _requireAll2.default)(__webpack_require__(403));

//register available readers
utils.forEach(readers, function (reader, name) {
  _reader2.default.register(name, reader);
});

var components = (0, _requireAll2.default)(__webpack_require__(405), 1);

//register available components
utils.forEach(components, function (component, name) {
  _component2.default.register(name, component);
});

(0, _requireAll2.default)(__webpack_require__(432));

Vzb.helpers = (0, _requireAll2.default)(__webpack_require__(433));
Vzb.iconset = iconset;

//d3 addons

//import * as touchFixes from 'helpers/d3.touchFixes';

//d3 v3 -> v4

// Copies a variable number of methods from source to target.
d3.rebind = function (target, source) {
  var i = 1,
      method = void 0;
  var n = arguments.length;
  while (++i < n) {
    target[method = arguments[i]] = d3_rebind(target, source, source[method]);
  }return target;
};

// Method is assumed to be a standard D3 getter-setter:
// If passed with no arguments, gets the value.
// If passed with arguments, sets the value and returns the target.
function d3_rebind(target, source, method) {
  return function () {
    var value = method.apply(source, arguments);
    return value === source ? target : value;
  };
}

d3.time = {};
d3.time.scale = d3.scaleTime;
d3.time.scale.utc = d3.scaleUtc;
d3.time.format = function (f) {
  var format = d3.timeFormat(f);
  format.parse = d3.timeParse(f);
  return format;
};
d3.time.format.utc = function (f) {
  var format = d3.utcFormat(f);
  format.parse = d3.utcParse(f);
  return format;
};
d3.time.format.iso = function (f) {
  var format = d3.isoFormat(f);
  format.parse = d3.isoParse(f);
  return format;
};

d3.scaleGenericlog = _d2.default;
d3.selection.prototype.onTap = _d3.onTap;
d3.selection.prototype.onLongTap = _d3.onLongTap;

//TODO: Fix for scroll on mobile chrome on d3 v3.5.17. It must be retested/removed on d3 v4.x.x
//see explanation here https://github.com/vizabi/vizabi/issues/2020#issuecomment-250205191
//d3.svg.brush = touchFixes.brush;
//d3.drag = touchFixes.drag;
//d3.behavior.zoom = touchFixes.zoom;

//makes all objects accessible
Vzb.Class = _class2.default;
Vzb.Tool = _tool2.default;
Vzb.Component = _component2.default;
Vzb.Model = _model2.default;
Vzb.Reader = _reader2.default;
Vzb.Events = _events2.default;
Vzb.utils = utils;

exports.default = Vzb;

/***/ }),
/* 397 */
/***/ (function(module, exports) {

/*
 * A collection of interpolators
 * @param {Number} x1, x2, y1, y2 - boundary points
 * @param {Number} x - point of interpolation
 * @return {Number} y - interpolated value
 */
//
module.exports = {
    linear: function(x1, x2, y1, y2, x) {
      return +y1 + (x - x1) / (x2 - x1) * (y2 - y1);
    },
    exp: function(x1, x2, y1, y2, x) {
      return Math.exp((Math.log(y1) * (x2 - x) - Math.log(y2) * (x1 - x)) / (x2 - x1));
    },
    stepBefore: function(x1, x2, y1, y2, x) {
        return y2;
    },
    stepAfter: function(x1, x2, y1, y2, x) {
        return y1;
    },
    stepMiddle: function(x1, x2, y1, y2, x) {
        return (x < (x1 + x2)/2) ? y1 : y2;
    }
};


/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Intervals = _class2.default.extend({

  /**
   * Initializes intervals
   */
  init: function init() {
    this.intervals = {};
  },


  /**
   * Sets an interval
   * @param {String} name name of interval
   * @param {Function} func function to be executed
   * @param {Number} duration duration in milliseconds
   */
  setInterval: function (_setInterval) {
    function setInterval(_x, _x2, _x3) {
      return _setInterval.apply(this, arguments);
    }

    setInterval.toString = function () {
      return _setInterval.toString();
    };

    return setInterval;
  }(function (name, func, duration) {
    this.clearInterval(name);
    this.intervals[name] = setInterval(func, duration);
  }),


  /**
   * Clears an interval
   * @param {String} name name of interval to be removed
   */
  clearInterval: function (_clearInterval) {
    function clearInterval(_x4) {
      return _clearInterval.apply(this, arguments);
    }

    clearInterval.toString = function () {
      return _clearInterval.toString();
    };

    return clearInterval;
  }(function (name) {
    if (name) {
      if (this.intervals[name]) {
        clearInterval(this.intervals[name]);
        delete this.intervals[name];
      }
    } else {
      this.clearAllIntervals();
    }
  }),


  /**
   * Clears all intervals
   */
  clearAllIntervals: function clearAllIntervals() {
    for (var i in this.intervals) {
      this.clearInterval(i);
    }
  }
});

exports.default = Intervals;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./axis": 109,
	"./axis.js": 109,
	"./color": 153,
	"./color.js": 153,
	"./data": 110,
	"./data.js": 110,
	"./dataconnected": 57,
	"./dataconnected.js": 57,
	"./entities": 112,
	"./entities.js": 112,
	"./group": 154,
	"./group.js": 154,
	"./hook": 32,
	"./hook.js": 32,
	"./label": 155,
	"./label.js": 155,
	"./locale": 156,
	"./locale.js": 156,
	"./marker": 78,
	"./marker.js": 78,
	"./side": 157,
	"./side.js": 157,
	"./size": 158,
	"./size.js": 158,
	"./stack": 159,
	"./stack.js": 159,
	"./time": 160,
	"./time.js": 160,
	"./ui": 161,
	"./ui.js": 161
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 399;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataStorage = exports.Storage = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _getQueryId(query, path, lastModified, readerName) {
  return utils.hashCode([query.select.key, query.where, query.from, query.join, query.dataset, query.version, query.language, path, lastModified, readerName]);
}

function getCacheKey(dataId, frames, keys) {
  var result = frames[0] + " - " + frames[frames.length - 1] + " (" + frames.length + ")";
  if (keys) {
    result = result + "_" + keys.join();
  }
  return result;
}

var Storage = exports.Storage = function () {
  function Storage() {
    _classCallCheck(this, Storage);

    this.queryIds = {};
    this.queries = {};
    this._collection = {};
    this._collectionPromises = {}; // stores promises, making sure we don't do one calulation twice
  }

  /**
   * Loads resource from reader
   * @param {Array} query Array with queries to be loaded
   * @param {Object} parsers An object with concepts as key and parsers as value
   * @param {Object} readerObject for this query
   */


  _createClass(Storage, [{
    key: "loadFromReader",
    value: function loadFromReader(query, parsers, readerObject) {
      var _this = this;
      var queryMergeId = _getQueryId(query, readerObject._basepath, readerObject._lastModified, readerObject._name);

      if (!this.queries[queryMergeId]) {
        this.queries[queryMergeId] = this.queryQueue(readerObject, queryMergeId);
      }
      return this.queries[queryMergeId].getPromise(query, parsers);
    }
  }, {
    key: "getDataId",
    value: function getDataId(query, readerObject, parsers) {
      var queryMergeId = _getQueryId(query, readerObject._basepath, readerObject._lastModified, readerObject._name);
      if (this.queries[queryMergeId]) {
        return this.queries[queryMergeId].getDataId(query, parsers);
      }
      return false;
    }
  }, {
    key: "queryQueue",
    value: function queryQueue(readerObject, queryMergeId) {
      var _context = this;
      var _parsersCompare = function _parsersCompare(readerParsers, queryParcers) {
        return Object.keys(queryParcers).filter(function (p) {
          return queryParcers[p] !== readerParsers[p];
        }).length == 0 && (Object.keys(readerParsers).length == 0 || Object.keys(queryParcers).length != 0);
      };
      return new function () {
        this.readerObject = readerObject;
        this.queries = [];
        this.query = null;
        this.parsers = null;
        this.defer = {};
        this.getPromise = function (query, parsers) {
          var _this2 = this;

          var _loop = function _loop(reader) {
            if (query.select.value.filter(function (x) {
              return reader.query.select.value.indexOf(x) == -1;
            }).length == 0 && _parsersCompare(reader.parsers, parsers)) {
              //check if this query have all needed values
              return {
                v: reader.defer.promise
              };
            }
          };

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = this.queries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var reader = _step.value;

              var _ret = _loop(reader);

              if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          if (!this.query) {
            this.query = query;
            this.parsers = parsers;
          } else {
            this.query.select.value = this.query.select.value ? utils.unique(this.query.select.value.concat(query.select.value)) : [];
            utils.extend(this.parsers, parsers);
          }
          utils.debounce(function () {
            _this2.runQuery();
          }, 10)();
          if (!this.defer.promise || !(this.defer.promise instanceof Promise)) {
            this.defer.promise = new Promise(function (resolve, reject) {
              _this2.defer.resolve = resolve;
              _this2.defer.reject = reject;
            });
          }
          return this.defer.promise;
        };
        this.runQuery = function () {
          if (this.query) {
            this.queries.push(this.reader(this.query, this.parsers, this.defer));
            this.query = null;
            this.parsers = null;
            this.defer = {};
          }
        };

        this.getDataId = function (query, parsers) {
          var _loop2 = function _loop2(reader) {
            if ((!query.select.value || query.select.value.filter(function (x) {
              return reader.query.select.value.indexOf(x) == -1;
            }).length == 0) && _parsersCompare(reader.parsers, parsers) && reader.dataId) {
              //check if this query have all needed values
              return {
                v: reader.dataId
              };
            }
          };

          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = this.queries[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var reader = _step2.value;

              var _ret2 = _loop2(reader);

              if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          return false;
        };

        this.reader = function (query, parsers, defer) {
          var _queue = this;
          // && !(_queue.readerObject.compatibility || {}).aggregateValues
          var _query = query.grouping ? utils.clone(query, null, ["grouping"]) : query;
          return new function () {
            var _this3 = this;

            this.defer = defer;
            this.query = query;
            this.parsers = parsers;
            this.dataId = null;

            //TODO FIXME: this is the added protection for the case when vizabi requests have null in select.key
            //this happens because of the incorrect implementation of multidimensionality in pop by age,
            //when marker is always connected to "side" entity, which sometimes has dim of null
            //instead an entity should be added to and removed from marker space
            var promise = void 0;
            if (query.select.key.includes(null)) {
              promise = Promise.resolve([]);
            } else {
              promise = _queue.readerObject.read(_query, this.parsers);
            }

            promise.then(function (response) {
              //success reading
              _this3.checkQueryResponse(query, response);
              _this3.dataId = utils.hashCode([_query, _queue.readerObject._basepath]);
              _context._collection[_this3.dataId] = {};
              _context._collectionPromises[_this3.dataId] = {};
              var col = _context._collection[_this3.dataId];
              col.data = response;
              col.valid = {};
              col.nested = {};
              col.unique = {};
              col.timespan = {};
              col.limits = {};
              col.frames = {};
              col.haveNoDataPointsPerKey = {};
              col.query = query;
              _this3.defer.resolve(_this3.dataId);
            }).catch(function (error) {
              _this3.defer.reject(error);
            });

            this.checkQueryResponse = function (query, response) {
              var _this4 = this;

              if (response.length == 0) utils.warn("Reader for data source '" + this._name + "' returned empty array for query:", JSON.stringify(query, null, 2));

              if (response.length > 0) {
                // search data for the entirely missing columns
                var columnsMissing = (query.select.key || []).concat(query.select.value || []);
                for (var i = response.length - 1; i >= 0; i--) {
                  for (var c = columnsMissing.length - 1; c >= 0; c--) {
                    // if found value for column c in row i then remove that column name from the list of missing columns
                    if (response[i][columnsMissing[c]] || response[i][columnsMissing[c]] === 0) columnsMissing.splice(c, 1);
                  }
                  // all columns were found to have value in at least one of the rows then stop iterating
                  if (!columnsMissing.length) break;
                }
                columnsMissing.forEach(function (d) {
                  if (query.select.key.indexOf(d) == -1) {
                    utils.warn("Reader result: Column '" + d + "' is missing from '" + query.from + "' data, but it might be ok");
                  } else {
                    utils.error("Reader result: Key column '" + d + "' is missing from '" + query.from + "' response", JSON.stringify(query));
                    var err = new Error();
                    err.name = "reader/error/keyColumnMissingInReaderResult";
                    err.message = "Reader result: Key column '" + d + "' is missing from '" + query.from + "' response";
                    err.details = d;
                    err.ddfql = query;

                    _this4.defer.reject(err);
                    console.log(response);
                  }
                });
              }
            };
          }();
        };
      }();
    }
  }, {
    key: "aggregateData",
    value: function aggregateData(dataId, query, readerObject, conceptProps) {
      if (Object.keys(query.grouping).every(function (key) {
        return query.grouping[key]["grouping"] === 1;
      })) {
        return Promise.resolve(dataId);
      }

      var queryMergeId = _getQueryId(query, readerObject._basepath, readerObject._lastModified, readerObject._name);
      var dataIdAggr = utils.hashCode([query, readerObject._basepath]);

      if (!this._collection[dataIdAggr] || this._collection[dataIdAggr]._queryMergeId !== queryMergeId) {
        var grouping = query.grouping = query.grouping;
        var queryKeys = query.select.key;
        var queryMeasures = query.select.value.filter(function (value) {
          return conceptProps[value]["concept_type"] === "measure";
        });

        var order = query.from === "datapoints" ? queryKeys.concat(query.animatable) : queryKeys.slice(0);

        var groupKeys = Object.keys(grouping || {}).filter(function (key) {
          return order.indexOf(key) !== -1 && queryKeys.indexOf(key) !== -1 && grouping[key]["grouping"] > 1;
        });
        var groupKeyCalcs = groupKeys.reduce(function (calcs, key) {
          return function (group) {
            calcs[key] = function (d) {
              return ~~(+d / group) * group;
            };
            return calcs;
          }(grouping[key]["grouping"]);
        }, {});

        var nest = d3.nest();
        for (var i = 0; i < order.length; i++) {
          nest = nest.key(function (k, groupKeyCalc) {
            return groupKeyCalc ? function (d) {
              return groupKeyCalc(d[k]);
            } : function (d) {
              return d[k];
            };
          }(order[i], groupKeyCalcs[order[i]]));
        }

        if (groupKeys.length) {
          nest = nest.rollup(function (values) {
            var obj = Object.assign({}, values[0]);
            groupKeys.forEach(function (key) {
              return obj[key] = groupKeyCalcs[key](obj[key]);
            });
            queryMeasures.forEach(function (measure) {
              return obj[measure] = d3.sum(values, function (d) {
                return +d[measure];
              });
            });
            return [obj];
          });
        }

        this._collection[dataIdAggr] = {};
        this._collectionPromises[dataIdAggr] = {};
        var col = this._collection[dataIdAggr];
        col.data = utils.nestArrayToValues(nest.entries(this._collection[dataId]["data"]));
        col.valid = {};
        col.nested = {};
        col.unique = {};
        col.timespan = {};
        col.limits = {};
        col.frames = {};
        col.haveNoDataPointsPerKey = {};
        col.query = query;
        col._queryMergeId = queryMergeId;
      }

      return Promise.resolve(dataIdAggr);
    }
  }, {
    key: "getData",
    value: function getData(dataId, what, whatId, args) {
      // if they want data, return the data
      if (!what || what == "data") {
        return this._collection[dataId]["data"];
      }
      if (what == "query") {
        return this._collection[dataId]["query"];
      }
      // if they didn't give an instruction, give them the whole thing
      // it's probably old code which modifies the data outside this class
      // TODO: move these methods inside (e.g. model.getNestedItems())
      if (!whatId) {
        return this._collection[dataId][what];
      }

      // if they want a certain processing of the data, see if it's already in cache
      var id = typeof whatId === "string" ? whatId : JSON.stringify(whatId);
      if (this._collection[dataId][what][id]) {
        return this._collection[dataId][what][id];
      }

      // if it's not cached, process the data and then return it
      switch (what) {
        case "unique":
          this._collection[dataId][what][id] = this._getUnique(dataId, whatId);
          break;
        case "valid":
          this._collection[dataId][what][id] = this._getValid(dataId, whatId);
          break;
        case "timespan":
          this._collection[dataId][what][id] = this._getTimespan(dataId, whatId);
          break;
        case "limits":
          this._collection[dataId][what][id] = this._getLimits(dataId, whatId);
          break;
        case "nested":
          this._collection[dataId][what][id] = this._getNested(dataId, whatId);
          break;
        case "haveNoDataPointsPerKey":
          //do nothing. no caching is available for this option, served directly from collection
          break;
      }
      return this._collection[dataId][what][id];
    }
  }, {
    key: "_getTimespan",
    value: function _getTimespan(dataId, column) {
      var TIME = this._collection[dataId].query.animatable;
      var items = this._collection[dataId].data.filter(function (f) {
        return f[column] || f[column] === 0;
      }).map(function (m) {
        return m[TIME];
      });

      if (items.length == 0) utils.warn("_getTimespan() was unable to work with an empty array of valid datapoints");

      return { min: d3.min(items), max: d3.max(items) };
    }
  }, {
    key: "_getValid",
    value: function _getValid(dataId, column) {
      return this._collection[dataId].data.filter(function (f) {
        return f[column] || f[column] === 0;
      });
    }
  }, {
    key: "_getLimits",
    value: function _getLimits(dataId, attr) {

      var items = this._collection[dataId].data;
      // get only column attr and only rows with number or date
      var filtered = items.reduce(function (filtered, d) {

        // check for dates
        var f = utils.isDate(d[attr]) ? d[attr] : parseFloat(d[attr]);

        // if it is a number
        if (!isNaN(f)) {
          filtered.push(f);
        }

        //filter
        return filtered;
      }, []);

      // get min/max for the filtered rows
      var min = filtered[0];
      var max = min;
      var minAbsNear0 = Math.abs(filtered.find(function (v) {
        return v != 0;
      }));
      var limits = {};
      for (var i = 0; i < filtered.length; i += 1) {
        var c = filtered[i];
        if (c < min) {
          min = c;
        } else if (c > max) {
          max = c;
        }
        if (c > 0 && c < minAbsNear0) {
          minAbsNear0 = c;
        } else if (c < 0 && c > -minAbsNear0) {
          minAbsNear0 = -c;
        }
      }
      limits.min = min || 0;
      limits.max = max || 100;
      limits.minAbsNear0 = minAbsNear0 || (min === 0 ? max : min);
      return limits;
    }
  }, {
    key: "_getUnique",
    value: function _getUnique(dataId, attr) {
      var uniq = void 0;
      var items = this._collection[dataId].data;
      // if it's an array, it will return a list of unique combinations.
      if (utils.isArray(attr)) {
        var values = items.map(function (d) {
          return utils.clone(d, attr);
        }); // pick attrs
        uniq = utils.unique(values, function (n) {
          return JSON.stringify(n);
        });
      } // if it's a string, it will return a list of values
      else {
          var _values = items.map(function (d) {
            return d[attr];
          });
          uniq = utils.unique(_values);
        }
      return uniq;
    }
  }, {
    key: "_getNested",
    value: function _getNested(dataId, order) {
      // Nests are objects of key-value pairs
      // Example:
      //
      // order = ["geo", "gender", "time"];
      //
      // original_data = [
      //   { geo: "afg", gender: "male", time: 1800, gdp: 23424, lex: 23}
      //   { geo: "afg", gender: "female", time: 1800, gdp: 23424, lex: 23}
      //   { geo: "afg", gender: "male", time: 1801, gdp: 23424, lex: null}
      //   { geo: "afg", gender: "female", time: 1801, gdp: 23424, lex: null}
      //   { geo: "chn", gender: "male", time: 1800, gdp: 23587424, lex: 46}
      //   { geo: "chn", gender: "female", time: 1800, gdp: 23587424, lex: 46}
      //   { geo: "chn", gender: "male", time: 1801, gdp: null, lex: null}
      //   { geo: "chn", gender: "female", time: 1801, gdp: null, lex: null}
      // ];
      //
      // nested_data = {
      //   ["afg","male"]: {
      //     1800: {gdp: 23424, lex: 23},
      //     1801: {gdp: 23424, lex: null}
      //   }
      //   ["afg","female"]: {
      //     1800: {gdp: 23424, lex: 23},
      //     1801: {gdp: 23424, lex: null}
      //   }
      //   ["chn","male"]: {
      //     1800: {gdp: 23587424, lex: 46 },
      //     1801: {gdp: null, lex: null }
      //   }
      //   ["chn","female"]: {
      //     1800: {gdp: 23587424, lex: 46 },
      //     1801: {gdp: null, lex: null }
      //   }
      // };

      var nest = d3.nest();
      for (var i = 0; i < order.length; i++) {
        nest = nest.key(function (k) {
          return function (d) {
            return d[k];
          };
        }(order[i]));
      }

      return utils.nestArrayToObjWithFlatKeys(nest.entries(this._collection[dataId]["data"]));
    }
  }, {
    key: "getFrames",
    value: function getFrames(dataId, framesArray, keys, conceptprops) {
      var _this = this;
      //if(dataId === false) return Promise.resolve([]);

      var whatId = getCacheKey(dataId, framesArray, keys);
      if (!this._collectionPromises[dataId][whatId]) {
        this._collectionPromises[dataId][whatId] = {
          queue: this.framesQueue(framesArray, whatId),
          promise: null
        };
      }
      if (this._collectionPromises[dataId][whatId] && this._collectionPromises[dataId][whatId]["promise"] instanceof Promise) {
        return this._collectionPromises[dataId][whatId]["promise"];
      }

      this._collectionPromises[dataId][whatId]["promise"] = new Promise(function (resolve, reject) {
        if (!dataId) reject(utils.warn("Data.js 'get' method doesn't like the dataId you gave it: " + dataId));
        _this._getFrames(dataId, whatId, framesArray, keys, conceptprops).then(function (frames) {
          _this._collection[dataId]["frames"][whatId] = frames;
          resolve(_this._collection[dataId]["frames"][whatId]);
        });
      });

      return this._collectionPromises[dataId][whatId]["promise"];
    }
  }, {
    key: "getFrame",
    value: function getFrame(dataId, framesArray, neededFrame, keys) {
      var _this = this;
      //if(dataId === false) return Promise.resolve([]);

      var whatId = getCacheKey(dataId, framesArray, keys);
      return new Promise(function (resolve, reject) {
        if (_this._collection[dataId]["frames"][whatId] && _this._collection[dataId]["frames"][whatId][neededFrame]) {
          resolve(_this._collection[dataId]["frames"][whatId]);
        } else {
          _this._collectionPromises[dataId][whatId]["queue"].forceFrame(neededFrame, function () {
            resolve(_this._collection[dataId]["frames"][whatId]);
          });
        }
      });
    }
  }, {
    key: "listenFrame",
    value: function listenFrame(dataId, framesArray, keys, cb) {
      var whatId = getCacheKey(dataId, framesArray, keys);
      this._collectionPromises[dataId][whatId]["queue"].defaultCallbacks.push(function (time) {
        cb(dataId, time);
      });
      if (this._collection[dataId]["frames"][whatId]) {
        //reduce frame array to get correct Date from frame key
        var framesObj = framesArray.reduce(function (result, frame) {
          result[frame] = frame;
          return result;
        }, {});
        utils.forEach(this._collection[dataId]["frames"][whatId], function (frame, key) {
          cb(dataId, framesObj[key]);
        });
      }
    }
  }, {
    key: "_muteAllQueues",
    value: function _muteAllQueues(except) {
      utils.forEach(this._collectionPromises, function (queries, dataId) {
        utils.forEach(queries, function (promise, whatId) {
          if (promise.queue.isActive == true && promise.queue.whatId != except) {
            promise.queue.mute();
          }
        });
      });
    }
  }, {
    key: "_checkForcedQueuesExists",
    value: function _checkForcedQueuesExists() {
      utils.forEach(this._collectionPromises, function (queries, dataId) {
        utils.forEach(queries, function (promise, whatId) {
          if (promise.queue.forcedQueue.length > 0) {
            promise.queue.unMute();
          }
        });
      });
    }
  }, {
    key: "_unmuteQueue",
    value: function _unmuteQueue() {
      utils.forEach(this._collectionPromises, function (queries, dataId) {
        utils.forEach(queries, function (promise, whatId) {
          if (promise.queue.isActive == false) {
            promise.queue.unMute();
          }
        });
      });
    }

    /**
     * set priority for generate each year frame
     * @param framesArray
     * @param whatId
     * @returns {*}
     */

  }, {
    key: "framesQueue",
    value: function framesQueue(framesArray, whatId) {
      var _context = this;
      return new function () {
        this.defaultCallbacks = [];
        this.callbacks = {};
        this.forcedQueue = [];
        this.isActive = true;
        this.delayedAction = null;
        this.whatId = whatId;
        this.queue = framesArray.slice(0); //clone array
        var queue = this;
        //put the last element to the start of the queue because we are likely to need it first
        this.queue.splice(0, 0, this.queue.splice(this.queue.length - 1, 1)[0]);
        this.key = 0;
        this.mute = function () {
          this.isActive = false;
          this.delayedAction = Promise.resolve.bind(Promise);
        };

        this.unMute = function () {
          this.isActive = true;
          if (typeof this.delayedAction === "function") {
            this.delayedAction();
          }
          this.delayedAction = null;
          if (this.forcedQueue.length == 0 && this.queue.length == 0) {
            _context._unmuteQueue();
          }
        };
        this.frameComplete = function (frameName) {
          //function called after build each frame with name of frame build
          var i = void 0;
          if (queue.defaultCallbacks.length > 0) {
            for (i = 0; i < queue.defaultCallbacks.length; i++) {
              queue.defaultCallbacks[i](frameName);
            }
          }
          if (queue.callbacks[frameName] && queue.callbacks[frameName].length > 0) {
            for (i = 0; i < queue.callbacks[frameName].length; i++) {
              queue.callbacks[frameName][i]();
            }
          }
        };
        this._waitingForActivation = function () {
          var _this = this;
          return new Promise(function (resolve, reject) {
            if (_this.isActive) {
              return resolve();
            }
            _this.delayedAction = resolve;
          });
        };

        this._getNextFrameName = function () {
          var frameName = null;
          if (this.forcedQueue.length > 0 || this.queue.length > 0) {
            if (this.forcedQueue.length > 0) {
              frameName = this.forcedQueue.shift();
            } else {
              if (this.forcedQueue.length == 0 && this.key >= this.queue.length - 1) {
                this.key = 0;
              }
              frameName = this.queue.splice(this.key, 1).pop();
            }
          } else {
            _context._unmuteQueue();
          }
          return frameName;
        };
        this.checkForcedFrames = function () {
          if (this.forcedQueue.length > 0) return;
          _context._checkForcedQueuesExists();
        };

        // returns the next frame in a queue
        this.getNext = function () {
          var _this = this;
          return new Promise(function (resolve, reject) {
            _this.checkForcedFrames();
            if (_this.isActive) {
              resolve(_this._getNextFrameName());
            } else {
              _this._waitingForActivation().then(function () {
                resolve(_this._getNextFrameName());
              });
            }
          });
        };

        // force the particular frame up the queue
        this.forceFrame = function (frameName, cb) {
          var objIndexOf = function objIndexOf(obj, need) {
            var search = need.toString();
            var index = -1;
            for (var i = 0, len = obj.length; i < len; i++) {
              if (obj[i].toString() == search) {
                index = i;
                break;
              }
            }
            return index;
          };
          if (this.callbacks[frameName]) {

            this.callbacks[frameName].push(cb);
          } else {
            var newKey = objIndexOf(this.queue, frameName); //this.queue.indexOf(frameName.toString());
            if (newKey !== -1) {
              this.forcedQueue.unshift(this.queue.splice(newKey, 1).pop());
              _context._muteAllQueues(this.whatId);
              this.unMute();
              if (typeof cb === "function") {
                if (_typeof(this.callbacks[frameName]) !== "object") {
                  this.callbacks[frameName] = [];
                }
                this.callbacks[frameName].push(cb);
              }
              this.key = newKey; //set key to next year after gorced element (preload if user click play)
            } else {
              if (_typeof(this.callbacks[frameName]) === "object") {
                this.callbacks[frameName].push(cb);
              } else {
                this.callbacks[frameName] = [cb];
              }
            }
          }
        };
      }();
    }

    /**
     * Get regularised dataset (where gaps are filled)
     * @param {Number} dataId hash code for query
     * @param {String} whatId hash code for cache
     * @param {Array} framesArray -- array of keyframes across animatable
     * @param {Array} keys -- array of keys
     * @param {Array} indicatorsDB
     * @returns {Object} regularised dataset, nested by [animatable, column, key]
     */

  }, {
    key: "_getFrames",
    value: function _getFrames(dataId, whatId, framesArray, keys, indicatorsDB) {
      var _this = this;
      if (!_this._collection[dataId]["frames"][whatId]) {
        _this._collection[dataId]["frames"][whatId] = {};
      }
      return new Promise(function (resolve, reject) {

        //TODO: thses should come from state or from outside somehow
        // FramesArray in the input contains the array of keyframes in animatable dimension.
        // Example: array of years like [1800, 1801 … 2100]
        // these will be the points where we need data
        // (some of which might already exist in the set. in regular datasets all the points would exist!)

        // Check if query.where clause is missing a time field

        if (!indicatorsDB) utils.warn("_getFrames in data.js is missing indicatorsDB, it's needed for gap filling");
        if (!framesArray) utils.warn("_getFrames in data.js is missing framesArray, it's needed so much");

        var TIME = _this._collection[dataId].query.animatable;
        var KEY = _this._collection[dataId].query.select.key.slice(0);
        if (TIME && KEY.indexOf(TIME) != -1) KEY.splice(KEY.indexOf(TIME), 1);

        var filtered = {};
        var items = void 0,
            itemsIndex = void 0,
            oneFrame = void 0,
            method = void 0,
            use = void 0,
            next = void 0;

        // We _nest_ the flat dataset in two levels: first by “key” (example: geo), then by “animatable” (example: year)
        // See the _getNested function for more details
        var nested = _this.getData(dataId, "nested", KEY.concat([TIME]), indicatorsDB);
        var nestedKeys = Object.keys(nested);
        keys = keys ? keys : nestedKeys.map(function (k) {
          return JSON.parse(k).join(",");
        });

        // Get the list of columns that are in the dataset, exclude key column and animatable column
        // Example: [“lex”, “gdp”, “u5mr"]
        var query = _this._collection[dataId].query;
        var columns = query.select.value.filter(function (f) {
          return f !== "_default";
        });

        var cLength = columns.length;

        var key = void 0,
            nestedKey = void 0,
            k = void 0,
            column = void 0,
            c = void 0;

        for (k = 0; k < keys.length; k++) {
          filtered[keys[k]] = {};
          for (c = 0; c < cLength; c++) {
            filtered[keys[k]][columns[c]] = null;
          }
        }

        for (c = 0; c < cLength; c++) {
          _this._collection[dataId].haveNoDataPointsPerKey[columns[c]] = {};
        }var buildFrame = function buildFrame(frameName, keys, dataId, callback) {
          var frame = {};
          if (query.from !== "datapoints") {
            // we populate the regular set with a single value (unpack properties into constant time series)
            var dataset = _this._collection[dataId].data;
            for (c = 0; c < cLength; c++) {
              frame[columns[c]] = {};
            }for (var i = 0; i < dataset.length; i++) {
              var d = dataset[i];
              for (c = 0; c < cLength; c++) {
                frame[columns[c]][d[KEY[0]]] = d[columns[c]];
                //check data for properties with missed data. If founded then write key to haveNoDataPointsPerKey with
                //count of broken datapoints
                if (d[columns[c]] == null) {
                  _this._collection[dataId].haveNoDataPointsPerKey[columns[c]][JSON.stringify([d[KEY[0]]])] = dataset.length;
                }
              }
            }
          } else {
            // If there is a time field in query.where clause, then we are dealing with indicators in this request

            // Put together a template for cached filtered sets (see below what's needed)

            // Now we run a 3-level loop: across frames, then across keys, then and across data columns (lex, gdp)

            for (c = 0; c < cLength; c++) {
              frame[columns[c]] = {};
            }for (k = 0; k < keys.length; k++) {
              key = keys[k];
              nestedKey = nestedKeys[k];

              for (c = 0; c < cLength; c++) {
                column = columns[c];

                //If there are some points in the array with valid numbers, then
                //interpolate the missing point and save it to the “clean regular set”
                method = indicatorsDB[column] ? indicatorsDB[column].interpolation : null;

                // Inside of this 3-level loop is the following:
                if (nested[nestedKey] && nested[nestedKey][frameName] && (nested[nestedKey][frameName][0][column] || nested[nestedKey][frameName][0][column] === 0)) {

                  // Check if the piece of data for [this key][this frame][this column] exists
                  // and is valid. If so, then save it into a “clean regular set”
                  frame[column][key] = nested[nestedKey][frameName][0][column];
                } else if (method === "none" || query.gapfill === false) {

                  // the piece of data is not available and the interpolation is set to "none"
                  frame[column][key] = null;
                } else {
                  // If the piece of data doesn’t exist or is invalid, then we need to inter- or extapolate it

                  // Let’s take a slice of the nested set, corresponding to the current key nested[key]
                  // As you remember it has the data nested further by frames.
                  // At every frame the data in the current column might or might not exist.
                  // Thus, let’s filter out all the frames which don’t have the data for the current column.
                  // Let’s cache it because we will most likely encounter another gap in the same column for the same key
                  items = filtered[key][column];
                  if (items === null) {
                    var givenFrames = Object.keys(nested[nestedKey]);
                    items = new Array(givenFrames.length);
                    itemsIndex = 0;

                    for (var z = 0, length = givenFrames.length; z < length; z++) {
                      oneFrame = nested[nestedKey][givenFrames[z]];
                      if (oneFrame[0][column] || oneFrame[0][column] === 0) items[itemsIndex++] = oneFrame[0];
                    }

                    //trim the length of the array
                    items.length = itemsIndex;

                    if (itemsIndex === 0) {
                      filtered[key][column] = [];
                    } else {
                      filtered[key][column] = items;
                    }

                    if (items.length == 0) _this._collection[dataId].haveNoDataPointsPerKey[column][nestedKey] = items.length;
                  }

                  // Now we are left with a fewer frames in the filtered array. Let's check its length.
                  //If the array is empty, then the entire column is missing for the key
                  //So we let the key have missing values in this column for all frames
                  if (items && items.length > 0) {
                    next = null;
                    frame[column][key] = utils.interpolatePoint(items, use, column, next, TIME, frameName, method);
                  }
                }
              } //loop across columns
            } //loop across keys
          }

          // save the calcualted frame to global datamanager cache
          _this._collection[dataId]["frames"][whatId][frameName] = frame;

          // fire the callback
          if (typeof callback === "function") {
            // runs the function frameComplete inside framesQueue.getNext()
            callback(frameName);
          }

          // recursively call the buildFrame again, this time for the next frame
          //QUESTION: FramesArray is probably not needed at this point. dataId and whatId is enough
          _this._collectionPromises[dataId][whatId]["queue"].getNext().then(function (nextFrame) {
            if (nextFrame) {
              utils.defer(function () {
                buildFrame(nextFrame, keys, dataId, _this._collectionPromises[dataId][whatId]["queue"].frameComplete);
              });
            } else {
              //this goes to marker.js as a "response"
              resolve(_this._collection[dataId]["frames"][whatId]);
            }
          });
        };
        _this._collectionPromises[dataId][whatId]["queue"].getNext().then(function (nextFrame) {
          if (nextFrame) {
            buildFrame(nextFrame, keys, dataId, _this._collectionPromises[dataId][whatId]["queue"].frameComplete);
          }
        });
      });
    }
  }]);

  return Storage;
}();

var DataStorage = exports.DataStorage = new Storage();

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* Factory pattern for object creation as in
 * https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e
 * https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a
 *
 * We may want to have one DimensionManager singleton object for Vizabi. That way entities can be shared throughout instances.
 */

var DimensionManagerPrototype = {

  model: null,
  dimensionModels: new Map(),

  updateDimensionModels: function updateDimensionModels() {
    var _this = this;

    this.dimensionModels.clear();
    utils.forEach(this.model.state._data, function (model, name) {
      if (typeof model.dim === "undefined") return;
      _this.dimensionModels.set(name, model);
    });
  },
  getDimensionModelsForSpace: function getDimensionModelsForSpace(oldSpace, newSpaceDimensions) {
    var _this2 = this;

    this.updateDimensionModels();

    // match new space to entities
    // assumption:
    // - no overlapping dimensionModels between markers or changing dimension models is fine
    // - one entities model per dimension
    // - only one time model (state.time)

    //split old non time entities to recycled and 'free to use'(dim can change)
    var freeToUseOldEntities = [];
    var recycledOldEntitiesByDim = Object.keys(oldSpace).reduce(function (result, modelName) {
      if (oldSpace[modelName]._type == "entities") {
        if (newSpaceDimensions.includes(oldSpace[modelName].dim)) {
          result[oldSpace[modelName].dim] = modelName;
        } else {
          freeToUseOldEntities.push(modelName);
        }
      }
      return result;
    }, {});
    var newSpace = newSpaceDimensions.map(function (dim, index) {

      /**
       * HEURISTIC 1: use old space and map new space on those entities (works only for same-dimensional)
       */
      var modelName = void 0;
      if (_this2.model.dataManager.isConceptType(dim, "time")) {
        modelName = "time";
        oldSpace[modelName].dim = dim;
      } else if (recycledOldEntitiesByDim[dim]) {
        return recycledOldEntitiesByDim[dim];
      } else {
        modelName = freeToUseOldEntities.shift();
        if (typeof modelName != "undefined") {
          // entities model found
          oldSpace[modelName].setDimension(dim);
        } else {
          // no more entities models left
          modelName = "entities_" + dim;
          var _newEntities = _defineProperty({}, modelName, { dim: dim });
          _this2.model.state.set(_newEntities);
        }
      }
      return modelName;

      /**
       * HEURISTIC 2 (unused/untested): Look for entities models which already have dimensions, use time or create new entities model
       */

      // check if there is a entities model with this dimension, if so return it
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _this2.dimensionModels.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var name = _ref2[0];
          var dimensionModel = _ref2[1];

          if (dimensionModel.dim == dim) {
            return name;
          }
        }

        // if time, change the one time model
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (_this2.model.dataManager.isConceptType(dim, "time")) {
        // we expect only one time model and update this (baaad, but state.time is still hardcoded in quite some places)
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = _this2.dimensionModels.entries()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _ref3 = _step2.value;

            var _ref4 = _slicedToArray(_ref3, 2);

            var _name = _ref4[0];
            var _dimensionModel = _ref4[1];

            if (_dimensionModel.type == "time") {
              _dimensionModel.dim = dim;
              return _name;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }

      // for others, create entities model for new dimension
      var newEntities = _defineProperty({}, "entities_" + dim, { dim: dim });
      _this2.model.state.set(newEntities);
      return "entities_" + dim;
    });

    return newSpace;
  }
};

function DimensionManager(model) {
  var dimMan = Object.create(DimensionManagerPrototype);
  dimMan.model = model;
  return dimMan;
}

exports.default = DimensionManager;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var DataManagerPrototype = {

  model: null,
  dataModels: new Map(),

  getDataModels: function getDataModels() {
    this.updateDataModels();
    return this.dataModels;
  },
  updateDataModels: function updateDataModels() {
    var _this = this;

    this.dataModels.clear();
    utils.forEach(this.model._data, function (model, name) {
      if (model._type != "data") return;
      _this.dataModels.set(name, model);
    });
  },


  // heuristic: if concept is typed as such in one of the datasources, it's of that type
  isConceptType: function isConceptType(conceptID, concept_type) {
    this.updateDataModels();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.dataModels.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var dataModel = _step.value;

        if (dataModel.conceptDictionary[conceptID] && dataModel.conceptDictionary[conceptID].concept_type == concept_type) return true;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return false;
  },


  // assumption: all datasources have identical concept properties if they are set
  getConceptProperty: function getConceptProperty(conceptID, property) {
    this.updateDataModels();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this.dataModels.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var dataModel = _step2.value;

        var concept = dataModel.getConceptprops(conceptID);
        if (concept && concept[property]) return concept[property];
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return "Concept not found";
  },
  getCollectionFromKey: function getCollectionFromKey(pKey) {
    if (pKey.length > 1) return "datapoints";else if (pKey[0] == "concept") return "concepts";
    return "entities";
  },
  getAvailabilityForMarkerKey: function getAvailabilityForMarkerKey(key) {
    var _this2 = this;

    var results = new Map();

    var addResult = function addResult(kvPair, dataModel) {
      var keyString = _this2.createKeyString(["key", "value"], kvPair);
      var indicatorsDB = dataModel.getConceptprops();

      results.set(keyString, {
        key: kvPair.key.map(function (concept) {
          return indicatorsDB[concept];
        }),
        value: indicatorsDB[kvPair.value],
        dataSource: dataModel
      });
    };

    // joins availability of datamodels
    // assumes datamodels always have same data

    var _loop = function _loop(dataModel) {

      dataModel.dataAvailability.datapoints.forEach(function (kvPair) {
        if (key.length == kvPair.key.size && key.every(function (dim) {
          return kvPair.key.has(dim);
        })) {
          addResult({ key: Array.from(kvPair.key), value: kvPair.value }, dataModel);
        }
      });

      // get all available entity properties for current marker space
      dataModel.dataAvailability.entities.forEach(function (kvPair) {
        if (kvPair.value == null) return;

        key.forEach(function (dim) {
          if (kvPair.key.has(dim) && kvPair.value.indexOf("is--") === -1) {
            addResult({ key: [dim], value: kvPair.value }, dataModel);
          }
        });
      });
    };

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = this.dataModels.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var dataModel = _step3.value;

        _loop(dataModel);
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return Array.from(results.values());
  },
  getAvailableDataForKey: function getAvailableDataForKey(pKey) {
    var pValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    this.updateDataModels();

    if (!Array.isArray(pKey)) pKey = [pKey];
    var collection = this.getCollectionFromKey(pKey);
    var result = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = this.dataModels.values()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var dataModel = _step4.value;

        var _loop2 = function _loop2(key, value) {
          if (key.size === pKey.length && pKey.every(function (_pKey) {
            return key.has(_pKey);
          }) && (!pValue || value === pValue)) {
            result.push({ data: dataModel._name, key: pKey, value: value });
          }
        };

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = ((dataModel.dataAvailability || {})[collection] || [])[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _ref = _step5.value;
            var key = _ref.key;
            var value = _ref.value;

            _loop2(key, value);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return result;
  },
  getDimensionValues: function getDimensionValues(conceptID) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var queryAddition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var query = Object.assign({
      select: {
        key: [conceptID],
        value: value
      },
      from: "entities"
    }, queryAddition);
    return Promise.all([].concat(_toConsumableArray(this.getDataModels().values())).filter(function (ds) {
      return ds.getConceptprops(conceptID);
    }).map(function (dataModel) {
      return dataModel.load(query, undefined, true).then(function (dataId) {
        return dataModel.getData(dataId).map(function (m) {
          m.dataSourceName = dataModel._name;return m;
        });
      });
    }));
  },


  /**
   * Return tag entities with name and parents from all data sources
   * @return {array} Array of tag objects
   */
  getTags: function getTags(locale) {
    var _this3 = this;

    return this.getDimensionValues("tag", ["name", "parent"], { language: locale }).then(function (results) {
      return _this3.mergeResults(results, ["tag"]);
    }); // using merge because key-duplicates terribly slow down treemenu
  },


  /**
   * Concat query results. Does not care about keys and key collisions. Only use when key-collisions are accepted or not expected.
   * @param  {[type]} results [description]
   * @return {[type]}         [description]
   */
  concatResults: function concatResults(results) {
    return results.reduce(function (accumulator, current) {
      return accumulator.concat(current);
    });
  },


  /**
   * Merges query results. The first result is base, subsequent results are only added if key is not yet in end result.
   * @param  {array of arrays} results Array where each element is a result, each result is an array where each element is a row
   * @param  {array} key     primary key to each result
   * @return {array}         merged results
   */
  mergeResults: function mergeResults(results, key) {
    var _this4 = this;

    var keys = new Map();
    results.forEach(function (result) {
      result.forEach(function (row) {
        var keyString = _this4.createKeyString(key, row);
        if (!keys.has(keyString)) keys.set(keyString, row);
      });
    });
    return Array.from(keys.values());
  },
  createKeyString: function createKeyString(key, row) {
    return key.map(function (concept) {
      return row[concept];
    }).join(",");
  }
};

function DataManager(model) {
  var dataMan = Object.create(DataManagerPrototype);
  dataMan.model = model;
  return dataMan;
}

exports.default = DataManager;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./inline/inline.js": 404
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 403;

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reader = __webpack_require__(111);

var _reader2 = _interopRequireDefault(_reader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Inline Reader
 * the simplest reader possible
 */

var InlineReader = _reader2.default.extend({

  _name: "inline",

  init: function init(readerInfo) {
    this._data = readerInfo.data || [{}];
  },
  load: function load() {
    return Promise.resolve({
      columns: Object.keys(this._data[0]),
      rows: this._data
    });
  },


  versionInfo: { version: "0.40.14", build: 1551875890651 }

});

exports.default = InlineReader;

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./brushslider/brushslider.js": 79,
	"./brushslider/bubblesize/bubblesize.js": 164,
	"./brushslider/singlehandleslider/singlehandleslider.js": 63,
	"./brushslider/sizeslider/sizeslider.js": 165,
	"./buttonlist/buttonlist.js": 166,
	"./buttonlist/optionsbuttonlist/optionsbuttonlist.js": 167,
	"./colorlegend/colorlegend.js": 168,
	"./datanotes/datanotes.js": 407,
	"./datawarning/datawarning.js": 408,
	"./dialogs/_dialog.js": 12,
	"./dialogs/about/about.js": 171,
	"./dialogs/axes/axes.js": 172,
	"./dialogs/colors/colors.js": 174,
	"./dialogs/dialogs.js": 175,
	"./dialogs/find/find.js": 176,
	"./dialogs/find/show.js": 115,
	"./dialogs/grouping/grouping.js": 177,
	"./dialogs/label/label.js": 178,
	"./dialogs/moreoptions/moreoptions.js": 179,
	"./dialogs/opacity/opacity.js": 180,
	"./dialogs/presentation/presentation.js": 181,
	"./dialogs/side/side.js": 182,
	"./dialogs/size/size.js": 183,
	"./dialogs/speed/speed.js": 184,
	"./dialogs/stack/stack.js": 185,
	"./dialogs/technical/technical.js": 187,
	"./dialogs/timedisplay/timedisplay.js": 188,
	"./dialogs/zoom/zoom.js": 190,
	"./draggablelist/draggablelist.js": 186,
	"./indicatorpicker/indicatorpicker.js": 51,
	"./minmaxinputs/minmaxinputs.js": 173,
	"./simplecheckbox/simplecheckbox.js": 52,
	"./steppedspeedslider/steppedspeedslider.js": 427,
	"./timeslider/timeslider.js": 429,
	"./treemenu/treemenu.js": 431,
	"./zoombuttonlist/zoombuttonlist.js": 191
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 405;

/***/ }),
/* 406 */
/***/ (function(module, exports) {

module.exports = "<div class=\"vzb-slider-holder\">\n\t<svg class=\"vzb-slider-svg\">\n\t\t<g class=\"vzb-slider-wrap\">\n\t\t\t<g class=\"vzb-slider\">\n\t\t\t</g>\n\t\t</g>\n\t</svg>\n</div>\n";

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var DataNotes = _component2.default.extend({
  init: function init(config, context) {
    var _this = this;

    this.name = "gapminder-datanotes";

    this.model_expects = [{
      name: "marker",
      type: "marker"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.context = context;

    this.model_binds = {
      "translate:locale": function translateLocale(evt) {
        if (!_this._ready || !_this._readyOnce) return;
        _this.ready();
      }
    };

    //contructor is the same as any component
    this._super(config, context);

    this.close = this.close.bind(this);

    this.hidden = true;
    this.showNotes = false;
    this.pinned = false;
    this.left = 0;
    this.top = 0;
    this.hookName = null;
    this.newHookName = null;
  },
  ready: function ready() {
    this.setValues();
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.translator = this.model.locale.getTFunction();
    this.element = d3.select(this.placeholder);

    this.element.selectAll("div").remove();

    var container = this.element;

    container.append("div").html(_iconset.close).on("click", function () {
      d3.event.stopPropagation();
      _this.close();
    }).select("svg").attr("width", "0px").attr("height", "0px").attr("class", "vzb-data-notes-close").classed("vzb-hidden", true);

    container.append("div").attr("class", "vzb-data-notes-body vzb-dialog-scrollable");

    container.append("div").attr("class", "vzb-data-notes-link");
  },
  resize: function resize() {
    this.close();
  },
  close: function close() {
    if (!this.hidden) {
      this.pin(false).hide();
    }
  },
  setHook: function setHook(_hookName) {
    if (!this._readyOnce) return this;
    if (this.pinned) {
      this.newHookName = _hookName;
      return this;
    }
    if (this.hookName) this.model.marker[this.hookName].off("change:which", this.close);
    this.hookName = this.newHookName = _hookName;
    this.model.marker[this.hookName].on("change:which", this.close);

    this.setValues();

    return this;
  },
  setValues: function setValues() {
    if (!this.hookName) return;
    var hook = this.model.marker[this.hookName];
    var concept = hook.getConceptprops();

    this.element.select(".vzb-data-notes-body").classed("vzb-hidden", !concept.description).text(utils.replaceNumberSpacesToNonBreak(concept.description) || "");

    this.element.select(".vzb-data-notes-link").classed("vzb-hidden", !concept.sourceLink);

    if (concept.sourceLink) {
      var _source = this.translator("hints/source");
      var sourceName = concept.sourceName || "";
      this.element.select(".vzb-data-notes-link").html("<span>" + (sourceName ? _source + ": " : "") + '<a href="' + utils.normaliseLink(concept.sourceLink) + '" target="_blank">' + (sourceName ? sourceName : _source) + "</a></span>");
    }
    this.showNotes = concept.sourceLink || concept.description;
  },
  setPos: function setPos(_left, _top, force) {
    this.left = _left;
    this.top = _top;
    if (this.pinned && !force) return this;
    var parentHeight = this.parent.element.offsetHeight;
    var width = this.element.node().offsetWidth;
    var height = this.element.node().offsetHeight;
    var leftMove = void 0;
    var topMove = void 0;
    var leftPos = this.left - width;
    var topPos = this.top;
    if (leftPos < 10) {
      leftPos = 10;
      leftMove = true;
    }
    if (topPos + height + 10 > parentHeight) {
      topPos = parentHeight - height - 10;
      topMove = true;
    }

    if (leftMove && topMove) {
      topPos = this.top - height - 30;
    }

    this.element.style("top", topPos + "px");
    this.element.style("left", leftPos + "px");

    return this;
  },
  pin: function pin(arg) {
    if (this.hidden) return this;
    this.pinned = !this.pinned;
    if (arg != null) this.pinned = arg;
    this.element.select(".vzb-data-notes-close").classed("vzb-hidden", !this.pinned);
    this.element.classed("vzb-data-notes-pinned", this.pinned);
    if (this.hookName != this.newHookName) this.setHook(this.newHookName);
    this.element.select(".vzb-data-notes-body").node().scrollTop = 0;

    return this.showNotes ? this.setPos(this.left, this.top, true) : this.hide();
  },
  toggle: function toggle(arg) {
    if (this.pinned || !this.hookName) return this;
    if (arg == null) arg = !this.hidden;
    this.hidden = arg;
    this.element.classed("vzb-hidden", this.hidden || !this.showNotes);
    return this;
  },
  show: function show() {
    return this.toggle(false);
  },
  hide: function hide() {
    return this.toggle(true);
  }
});

exports.default = DataNotes;

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var hidden = true;

var DataWarning = _component2.default.extend({
  init: function init(config, context) {
    var _this = this;

    this.name = "gapminder-datawarning";

    this.model_expects = [{
      name: "locale",
      type: "locale"
    }];

    this.context = context;

    this.model_binds = {
      "translate:locale": function translateLocale(evt) {
        if (!_this._ready) return;
        _this.redraw();
      }
    };

    //contructor is the same as any component
    this._super(config, context);
  },
  ready: function ready() {
    this.redraw();
  },
  readyOnce: function readyOnce() {
    var _this = this;
    this.element = d3.select(this.placeholder);

    this.element.selectAll("div").remove();

    this.element.append("div").attr("class", "vzb-data-warning-background").on("click", function () {
      _this.toggle(true);
    });

    this.container = this.element.append("div").attr("class", "vzb-data-warning-box");

    this.container.append("div").html(_iconset.close).on("click", function () {
      _this.toggle();
    }).select("svg").attr("width", "0px").attr("height", "0px").attr("class", "vzb-data-warning-close");

    var icon = this.container.append("div").attr("class", "vzb-data-warning-link").html(_iconset.warn);

    icon.append("div");

    this.container.append("div").attr("class", "vzb-data-warning-title");

    this.container.append("div").attr("class", "vzb-data-warning-body vzb-dialog-scrollable");
  },
  redraw: function redraw() {
    this.translator = this.model.locale.getTFunction();

    this.container.select(".vzb-data-warning-link div").text(this.translator("hints/dataWarning"));

    var title = this.translator("datawarning/title/" + this.parent.name);
    this.container.select(".vzb-data-warning-title").html(title).classed("vzb-hidden", !title || title == "datawarning/title/" + this.parent.name);

    this.container.select(".vzb-data-warning-body").html(this.translator("datawarning/body/" + this.parent.name));
  },
  toggle: function toggle(arg) {
    if (arg == null) arg = !hidden;
    hidden = arg;
    this.element.classed("vzb-hidden", hidden);

    var _this = this;
    this.parent.components.forEach(function (c) {
      c.element.classed("vzb-blur", c != _this && !hidden);
    });
  }
});

exports.default = DataWarning;

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./about/about.html": 410,
	"./axes/axes.html": 411,
	"./colors/colors.html": 412,
	"./find/find.html": 413,
	"./find/show.html": 170,
	"./grouping/grouping.html": 414,
	"./label/label.html": 415,
	"./moreoptions/moreoptions.html": 416,
	"./opacity/opacity.html": 417,
	"./presentation/presentation.html": 418,
	"./side/side.html": 419,
	"./size/size.html": 420,
	"./speed/speed.html": 421,
	"./stack/stack.html": 422,
	"./technical/technical.html": 423,
	"./timedisplay/timedisplay.html": 424,
	"./zoom/zoom.html": 425
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 409;

/***/ }),
/* 410 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"buttons/about\") %>\n  </div>\n      \n  <div class=\"vzb-dialog-content\">\n      <p class=\"vzb-about-text0\"></p>\n      <p class=\"vzb-about-text1\"></p>\n      <br/>\n      <p class=\"vzb-about-version\"></p>\n      <p class=\"vzb-about-updated\"></p>\n      <br/>\n      <p class=\"vzb-about-report\"></p>\n      <br/>\n      <p class=\"vzb-about-credits\"></p>\n      <br/>\n      <p class=\"vzb-about-tool\"></p>\n      <br/>\n      <p class=\"vzb-about-datasets\"><span>Datasets:</span></p>\n      <br/>\n      <p class=\"vzb-about-readers\"><span>Readers:</span></p>\n  </div>\n      \n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n      \n\n</div>\n";

/***/ }),
/* 411 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n    <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"axes\" data-click=\"pinDialog\"></span>\n    <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"axes\" data-click=\"dragDialog\"></span>\n    <div class=\"vzb-dialog-title\"><%=t (\"buttons/axes\") %></div>\n    <div class=\"vzb-dialog-content\">\n      <p class=\"vzb-dialog-sublabel\"> <%=t (\"buttons/axis_x\") %> <span class=\"vzb-xaxis-selector\"></span> </p>\n      <div class=\"vzb-xaxis-minmax vzb-dialog-paragraph\"></div>\n      <p class=\"vzb-dialog-sublabel\"> <%=t (\"buttons/axis_y\") %> <span class=\"vzb-yaxis-selector\"></span> </p>\n      <div class=\"vzb-yaxis-minmax vzb-dialog-paragraph\"></div>\n    </div>\n    <div class=\"vzb-dialog-buttons\">\n      <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\"><%=t ( \"buttons/ok\") %></div>\n    </div>\n</div>";

/***/ }),
/* 412 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"colors\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"colors\" data-click=\"dragDialog\"></span>\n  \n  <div class=\"vzb-dialog-title\">\n      <%=t (\"buttons/colors\") %>\n      <span class=\"vzb-caxis-selector\"></span>\n  </div>\n  \n  \n  \n  <div class=\"vzb-dialog-content vzb-dialog-scrollable\">\n    <div class=\"vzb-clegend-container\"></div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n\n</div>\n";

/***/ }),
/* 413 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"find\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"find\" data-click=\"dragDialog\"></span>\n  <div class=\"vzb-dialog-title\">\n    <label class=\"vzb-dialog-title-switch\">\n      <input type=\"checkbox\">\n      <span class=\"vzb-switch-slider round\"></span>\n      <span class=\"vzb-switch-off\"><%=t (\"dialogs/find\") %></span>\n      <span class=\"vzb-switch-on\"><%=t (\"buttons/show\") %></span>\n    </label>\n    <span class=\"vzb-dialog-content vzb-find-filter\">\n      <form novalidate>\n        <input class=\"vzb-find-search\" type=\"search\" required/>\n        <button class=\"vzb-cancel-button\" type=\"reset\"></button>\n      </form>\n    </span>\n    <span class=\"vzb-find-filter-selector\"></span>\n  </div>\n  \n  <div class=\"vzb-dialog-content vzb-dialog-content-fixed vzb-dialog-scrollable\">\n      <div class=\"vzb-dialog-content vzb-dialog-scrollable vzb-dialog-panel vzb-dialog-panel-find vzb-active\">\n        <div class=\"vzb-find-list\">\n          <!-- list will be placed here -->\n        </div>\n      </div>\n\n      <div class=\"vzb-dialog-content vzb-dialog-scrollable vzb-dialog-panel vzb-dialog-panel-show\">\n      </div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div class=\"vzb-dialog-bubbleopacity vzb-dialog-control\" data-panel=\"find\"></div>\n    <div class=\"vzb-dialog-button vzb-find-deselect\" data-panel=\"find\">\n      <%=t (\"buttons/deselect\") %>\n    </div>\n    <div class=\"vzb-dialog-button vzb-show-deselect\" data-panel=\"show\">\n      <%=t (\"buttons/reset\") %>\n    </div>\n    <div class=\"vzb-dialog-button vzb-show-apply\" data-panel=\"show\">\n      <%=t (\"buttons/apply\") %>\n    </div>\n      \n    <div data-dialogtype=\"find\" data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>  \n\n</div>\n";

/***/ }),
/* 414 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"buttons/grouping\") %>\n  </div>\n      \n  <div class=\"vzb-dialog-content\">\n    <div class=\"vzb-dialog-groups\"></div>\n    <div class=\"vzb-dialog-placeholder\"></div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n</div>\n";

/***/ }),
/* 415 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"label\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"label\" data-click=\"dragDialog\"></span>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"buttons/label\") %>\n  </div>\n      \n      \n  <div class=\"vzb-dialog-content\">\n    <span class=\"vzb-saxis-selector\"></span>\n    <div class=\"vzb-dialog-sizeslider\"></div>\n    <div class=\"vzb-removelabelbox-switch\"></div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n\n</div>\n";

/***/ }),
/* 416 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"moreoptions\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"moreoptions\" data-click=\"dragDialog\"></span>\n\n\n  <div class=\"vzb-dialog-title\">\n    <%=t (\"buttons/more_options\") %>\n  </div>\n\n  <div class=\"vzb-dialog-content vzb-dialog-scrollable\">\n    <div class='vzb-dialog-options-buttonlist'>\n    </div>\n    <div class=\"vzb-accordion\">\n    </div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n\n</div>";

/***/ }),
/* 417 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"buttons/opacity\") %>\n  </div>\n      \n  <div class=\"vzb-dialog-content\">\n      <p class=\"vzb-dialog-sublabel\">\n        <%=t (\"buttons/opacityRegular\") %>\n      </p>\n      <div class=\"vzb-dialog-bubbleopacity-regular\"></div>\n\n      <p class=\"vzb-dialog-sublabel\">\n        <%=t (\"buttons/opacityNonselect\") %>\n      </p>\n      <div class=\"vzb-dialog-bubbleopacity-selectdim\"></div>\n    </div>\n  </div>\n\n</div>\n";

/***/ }),
/* 418 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"dialogs/presentation\") %>\n  </div>\n      \n  <div class=\"vzb-dialog-content\">\n      <div class=\"vzb-presentationmode-switch\"></div>\n      <div class=\"vzb-decorations-switch\"></div>\n  </div>\n\n</div>\n";

/***/ }),
/* 419 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"side\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"side\" data-click=\"dragDialog\"></span>\n  <div class=\"vzb-dialog-title\">\n    <%=t (\"buttons/side\") %>\n    <span class=\"vzb-side-selector\"></span>\n  </div>\n  \n  <div class=\"vzb-dialog-content vzb-dialog-scrollable\">\n    <div class=\"vzb-side-list vzb-side-list-left\">\n      <!-- list will be placed here -->\n    </div>\n    <div class=\"vzb-side-list vzb-side-list-right\">\n      <!-- list will be placed here -->\n    </div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div class=\"vzb-dialog-button vzb-label-primary vzb-side-switch-sides\">\n      <%=t (\"buttons/leftright\") %>\n    </div>\n\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n\n</div>\n";

/***/ }),
/* 420 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"size\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"size\" data-click=\"dragDialog\"></span>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"buttons/size\") %>\n      <span class=\"vzb-saxis-selector\"></span>\n  </div>\n      \n      \n  <div class=\"vzb-dialog-content\">\n    <div class=\"vzb-dialog-bubblesize\"></div>\n    <span class=\"vzb-dialog-subtitle\">teststs</span>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n\n</div>\n";

/***/ }),
/* 421 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"buttons/time\") %>\n  </div>\n      \n  <div class=\"vzb-dialog-content\">\n    <p class=\"vzb-dialog-sublabel\"><%=t (\"hints/speed\") %></p>\n      \n    <form class=\"vzb-dialog-paragraph\">\n      <div class=\"vzb-speed-slider\"></div>\n    </form>\n    \n    <p class=\"vzb-dialog-sublabel\"><%=t (\"hints/forecastoptions\") %></p>\n    <form class=\"vzb-dialog-paragraph\">\n      <div class=\"vzb-showforecast-switch\"></div>\n      <div class=\"vzb-pausebeforeforecast-switch\"></div>\n      <div class=\"vzb-showstripedpatternwhenforecast-switch\"></div>\n      <div>\n        <span><%=t (\"hints/endbeforeforecast\") %></span>\n        <input type=\"text\" class=\"vzb-endbeforeforecast-field\" name=\"endbeforeforecast\"/>\n      </div>\n      <div>\n        <span class=\"vzb-timeformatexample-hint\"><%=t (\"hints/timeformatexample\") %>:</span>\n        <span class=\"vzb-timeformatexample-label\"></span>\n      </div>\n    </form>\n  </div>\n</div>\n";

/***/ }),
/* 422 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n    <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"stack\" data-click=\"pinDialog\"></span>\n    <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"stack\" data-click=\"dragDialog\"></span>\n    <div class=\"vzb-dialog-title\"><%=t (\"buttons/stack\") %></div>\n        \n    <div class=\"vzb-dialog-content vzb-dialog-scrollable\">\n        \n        <!--p class=\"vzb-dialog-sublabel\"> <%=t ( \"hints/mount/howtostack\") %></p-->\n        <form class=\"vzb-howtostack vzb-dialog-paragraph\">\n            <label> <input type=\"radio\" name=\"stack\" value=\"none\"> <%=t (\"mount/stacking/none\") %> </label>\n            <label> <input type=\"radio\" name=\"stack\" value=\"bycolor\"> <%=t (\"mount/stacking/color\") %> </label>\n            <label> <input type=\"radio\" name=\"stack\" value=\"all\"> <%=t (\"mount/stacking/world\") %> </label>\n        </form>\n        \n        <form class=\"vzb-howtomerge vzb-dialog-paragraph\">\n            <p class=\"vzb-dialog-sublabel\"> <%=t (\"hints/mount/howtomerge\") %> </p>\n            <label> <input type=\"radio\" name=\"merge\" value=\"none\"> <%=t (\"mount/merging/none\") %> </label>\n            <label> <input type=\"radio\" name=\"merge\" value=\"grouped\"> <%=t (\"mount/merging/color\") %> </label>\n            <label> <input type=\"radio\" name=\"merge\" value=\"stacked\"> <%=t (\"mount/merging/world\") %> </label>\n        </form>\n        \n        <form class=\"vzb-manual-sorting\">\n            <p class=\"vzb-dialog-sublabel\"> <%=t (\"mount/manualSorting\") %> </p>\n            <div class=\"vzb-dialog-draggablelist vzb-dialog-control\"></div>\n        </form>\n                \n    </div>\n\n    <div class=\"vzb-dialog-buttons\">\n        <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\"><%=t (\"buttons/ok\") %></div>\n    </div>\n\n</div>";

/***/ }),
/* 423 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <div class=\"vzb-dialog-title\"> \n      <%=t (\"dialogs/technical\") %>\n  </div>\n      \n  <div class=\"vzb-dialog-content\">\n      <div class=\"vzb-advancedshowandselect-switch\"></div>\n  </div>\n\n</div>\n";

/***/ }),
/* 424 */
/***/ (function(module, exports) {

module.exports = "<div class=\"vzb-dialog-modal\">\n  <div class=\"vzb-dialog-content vzb-dialog-content-fixed\">\n    <svg>\n      <g class=\"vzb-timedisplay\"></g>\n    </svg>\n  </div>\n  <div class=\"vzb-dialog-buttons\"></div>\n</div>\n";

/***/ }),
/* 425 */
/***/ (function(module, exports) {

module.exports = "<div class='vzb-dialog-modal'>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-pin fa\" data-dialogtype=\"label\" data-click=\"pinDialog\"></span>\n  <span class=\"thumb-tack-class thumb-tack-class-ico-drag fa\" data-dialogtype=\"label\" data-click=\"dragDialog\"></span>\n  <div class=\"vzb-dialog-title\"> \n    <%=t (\"buttons/zoom\") %>\n    <div class=\"vzb-dialog-zoom-buttonlist\"></div>\n  </div>\n      \n      \n  <div class=\"vzb-dialog-content\">\n    <div class=\"vzb-panwitharrow-switch\"></div>\n    <div class=\"vzb-zoomonscrolling-switch\"></div>\n    <div class=\"vzb-adaptminmaxzoom-switch\"></div>\n  </div>\n\n  <div class=\"vzb-dialog-buttons\">\n    <div data-click=\"closeDialog\" class=\"vzb-dialog-button vzb-label-primary\">\n      <%=t (\"buttons/ok\") %>\n    </div>\n  </div>\n\n</div>\n";

/***/ }),
/* 426 */
/***/ (function(module, exports) {

module.exports = "<div class=\"vzb-mmi-holder\">\n\n    <span class=\"vzb-mmi-domainmin-label\"></span>\n    <input type=\"text\" class=\"vzb-mmi-domainmin\" name=\"min\">\n    <span class=\"vzb-mmi-domainmax-label\"></span>\n    <input type=\"text\" class=\"vzb-mmi-domainmax\" name=\"max\">\n\n    <br class=\"vzb-mmi-break\"/>\n\n    <span class=\"vzb-mmi-zoomedmin-label\"></span>\n    <input type=\"text\" class=\"vzb-mmi-zoomedmin\" name=\"min\">\n    <span class=\"vzb-mmi-zoomedmax-label\"></span>\n    <input type=\"text\" class=\"vzb-mmi-zoomedmax\" name=\"max\">\n    \n</div>";

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _utils = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SteppedSlider = _component2.default.extend({
  init: function init(config, context) {
    var _this = this;

    this.name = "steppedSpeedSlider";
    this.template = __webpack_require__(428);

    this.config = Object.assign({
      triangleWidth: 10,
      triangleHeight: 10,
      height: 31,
      lineWidth: 10,
      domain: [1, 2, 3, 4, 5, 6],
      range: [1200, 900, 450, 200, 150, 100]
    }, config);

    this.config.height -= this.config.triangleHeight / 2;

    this.model_expects = [{
      name: "time",
      type: "time"
    }, {
      name: "locale",
      type: "locale"
    }];

    this.model_binds = {
      "change:time.delay": function changeTimeDelay() {
        _this.redraw();
      }
    };

    this.setDelay = (0, _utils.throttle)(this.setDelay, 50);

    this._super(config, context);
  },
  readyOnce: function readyOnce() {
    var _config = this.config,
        domain = _config.domain,
        range = _config.range,
        height = _config.height;


    this.element = d3.select(this.element);
    this.svg = this.element.select("svg");

    this.axisScale = d3.scaleLog().domain(d3.extent(domain)).range([height, 0]);

    this.delayScale = d3.scaleLinear().domain(domain).range(range);

    this.initTriangle();
    this.initAxis();

    this.redraw();
  },
  initAxis: function initAxis() {
    var _this2 = this;

    var _config2 = this.config,
        lineWidth = _config2.lineWidth,
        triangleWidth = _config2.triangleWidth,
        triangleHeight = _config2.triangleHeight,
        height = _config2.height;


    var axis = d3.axisLeft().scale(this.axisScale).tickFormat(function () {
      return "";
    }).tickSizeInner(lineWidth).tickSizeOuter(0);

    var tx = triangleWidth + lineWidth / 2;
    var ty = triangleHeight / 2;
    this.svg.on("mousedown", function () {
      var offsetY = d3.event.offsetY;

      var y = Math.max(0, Math.min(offsetY - ty, height));

      _this2.setDelay(Math.round(_this2.delayScale(_this2.axisScale.invert(y))), true, true);
    }).select(".vzb-stepped-speed-slider-axis").attr("transform", "translate(" + tx + ", " + ty + ")").call(axis);

    this.drag = d3.drag().on("drag", function () {
      var dy = d3.event.dy;

      var _transform = (0, _utils.transform)(_this2.slide.node()),
          translateY = _transform.translateY;

      var y = Math.max(0, Math.min(dy + translateY, height));

      _this2.setDelay(Math.round(_this2.delayScale(_this2.axisScale.invert(y))));
      _this2.redraw(y);
    }).on("end", function () {
      _this2.setDelay(_this2.model.time.delay, true, true);
    });

    this.svg.call(this.drag);
  },
  initTriangle: function initTriangle() {
    var _config3 = this.config,
        triangleWidth = _config3.triangleWidth,
        triangleHeight = _config3.triangleHeight,
        lineWidth = _config3.lineWidth;


    this.slide = this.svg.select(".vzb-stepped-speed-slider-triangle");

    this.slide.append("g").append("path").attr("d", this.getTrianglePath());
  },
  getTrianglePath: function getTrianglePath() {
    var _config4 = this.config,
        triangleHeight = _config4.triangleHeight,
        triangleWidth = _config4.triangleWidth;


    return "M " + triangleWidth + "," + triangleHeight / 2 + " 0," + triangleHeight + " 0,0 z";
  },
  setDelay: function setDelay(value) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var persistent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    this.model.time.set("delay", value, force, persistent);
  },
  redraw: function redraw() {
    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.axisScale(this.delayScale.invert(this.model.time.delay));

    this.slide.attr("transform", "translate(0, " + y + ")");
  }
});

exports.default = SteppedSlider;

/***/ }),
/* 428 */
/***/ (function(module, exports) {

module.exports = "<div class=\"vzb-stepped-speed-slider\">\n  <svg>\n    <g class=\"vzb-stepped-speed-slider-triangle\"></g>\n    <g class=\"vzb-stepped-speed-slider-axis\"></g>\n  </svg>\n</div>\n";

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _d = __webpack_require__(114);

var _d2 = _interopRequireDefault(_d);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var precision = 1;

//constants
var class_playing = "vzb-playing";
var class_loading = "vzb-ts-loading";
var class_hide_play = "vzb-ts-hide-play-button";
var class_dragging = "vzb-ts-dragging";
var class_axis_aligned = "vzb-ts-axis-aligned";
var class_show_value = "vzb-ts-show-value";
var class_show_value_when_drag_play = "vzb-ts-show-value-when-drag-play";

//margins for slider
var profiles = {
  small: {
    margin: {
      top: 7,
      right: 15,
      bottom: 10,
      left: 60
    },
    radius: 8,
    label_spacing: 5
  },
  medium: {
    margin: {
      top: 0,
      right: 15,
      bottom: 10,
      left: 50
    },
    radius: 9,
    label_spacing: 5
  },
  large: {
    margin: {
      top: -5,
      right: 15,
      bottom: 10,
      left: 75
    },
    radius: 11,
    label_spacing: 8
  }
};

var presentationProfileChanges = {
  "medium": {
    margin: {
      top: 9
    }
  },
  "large": {
    margin: {}
  }
};

var TimeSlider = _component2.default.extend({
  /**
   * Initializes the timeslider.
   * Executed once before any template is rendered.
   * @param model The model passed to the component
   * @param context The component's parent
   */
  init: function init(model, context) {

    this.name = "gapminder-timeslider";
    this.template = this.template || __webpack_require__(430);
    this.prevPosition = null;
    //define expected models/hooks for this component
    this.model_expects = [{
      name: "time",
      type: "time"
    }, {
      name: "marker",
      type: "marker"
    }, {
      name: "ui",
      type: "ui"
    }];

    var _this = this;
    //binds methods to this model
    this.model_binds = {
      "change:time": function changeTime(evt, path) {
        if (_this.slide) {
          if (["time.start", "time.end"].indexOf(path) !== -1) {
            if (!_this.xScale) return;
            _this.changeLimits();
          }
          _this._optionClasses();
          //only set handle position if change is external
          if (!_this.model.time.dragging) _this._setHandle(_this.model.time.playing);
        }
      },
      "change:time.start": function changeTimeStart(evt, path) {
        if (_this.slide) {
          //only set handle position if change is external
          if (!_this.model.time.dragging) _this._setHandle(_this.model.time.playing);
          _this.ready();
        }
      },
      "change:time.end": function changeTimeEnd(evt, path) {
        if (_this.slide) {
          //only set handle position if change is external
          if (!_this.model.time.dragging) _this._setHandle(_this.model.time.playing);
          _this.ready();
        }
      },
      "change:time.offset": function changeTimeOffset(evt, path) {
        if (_this.slide) {
          _this._updateProgressBar();
          _this.model.marker.listenFramesQueue(null, function (time) {
            _this._updateProgressBar(time);
          });
        }
      },
      "change:time.startSelected": function changeTimeStartSelected(evt, path) {
        if (_this.slide) {
          _this.updateSelectedStartLimiter();
        }
      },
      "change:time.endSelected": function changeTimeEndSelected(evt, path) {
        if (_this.slide) {
          _this.updateSelectedEndLimiter();
        }
      },
      "change:marker.select": function changeMarkerSelect(evt, path) {
        _this.setSelectedLimits();
      }
    };

    // Same constructor as the superclass
    this._super(model, context);

    this.profiles = utils.deepClone(profiles);
    this.presentationProfileChanges = utils.deepClone(presentationProfileChanges);

    if ((this.model.ui.chart || {}).margin) {
      this.model.on("change:ui.chart.margin", function (evt, path) {
        var layoutProfile = _this.getLayoutProfile();
        if (layoutProfile !== "small") {
          var profile = _this.profiles[layoutProfile];
          profile.margin.left = _this.model.ui.chart.margin.left;
        }
        if (_this.slide) {
          _this.updateSize();
        }
      });
    }

    // Sort of defaults. Actually should be in ui default or bubblechart.
    // By not having "this.model.ui =" we prevent it from going to url (not defined in defaults)
    // Should be in defaults when we make components config part of external config (& every component gets own config)
    this.ui = utils.extend({
      show_ticks: false,
      show_value: false,
      show_value_when_drag_play: true,
      show_button: true,
      axis_aligned: false
    }, model.ui.getPlainObject(), this.ui);

    //defaults
    this.width = 0;
    this.height = 0;
    this.availableTimeFrames = [];
    this.completedTimeFrames = [];
    this.getValueWidth = utils.memoize(this.getValueWidth);
    this._setTime = utils.throttle(this._setTime, 50);
  },


  //template is ready
  readyOnce: function readyOnce() {

    var _this = this;

    //DOM to d3
    //TODO: remove this ugly hack
    this.element = utils.isArray(this.element) ? this.element : d3.select(this.element);

    //html elements
    this.slider_outer = this.element.select(".vzb-ts-slider");
    this.slider = this.slider_outer.select("g");
    this.axis = this.element.select(".vzb-ts-slider-axis");
    this.select = this.element.select(".vzb-ts-slider-select");
    this.progressBar = this.element.select(".vzb-ts-slider-progress");
    this.slide = this.element.select(".vzb-ts-slider-slide");
    this.forecastBoundary = this.element.select(".vzb-ts-slider-forecastboundary");
    this.handle = this.element.select(".vzb-ts-slider-handle");
    this.valueText = this.element.select(".vzb-ts-slider-value");
    this.playButtons = this.element.select(".vzb-ts-btns");

    this.element.select(".vzb-ts-btn-play").on("click", function () {
      _this.model.time.play();
    });

    this.element.select(".vzb-ts-btn-pause").on("click", function () {
      _this.model.time.pause("soft");
    });

    this.forecastBoundary.on("click", function () {
      _this._setTime(_this.model.time.endBeforeForecast);
    });

    //Scale
    this.xScale = d3.scaleUtc().clamp(true);

    //Axis
    this.xAxis = (0, _d2.default)("bottom");

    //Value
    this.valueText.classed("stroke", true);
    if (!this.slider.style("paint-order").length) {
      this.slider.insert("text", ".vzb-ts-slider-value").attr("class", "vzb-ts-slider-value stroke");

      this.valueText.classed("stroke", false);
    }
    this.valueText = this.element.selectAll(".vzb-ts-slider-value");
    this.valueText.attr("text-anchor", "middle").attr("dy", "-0.7em");

    var brushed = _this._getBrushed();
    var brushedEnd = _this._getBrushedEnd();

    //Brush for dragging
    // this.brush = d3.brushX()
    //   //.x(this.xScale)
    //   .extent([[0, 0], [0, 0]])
    //   .on("start brush", function () {
    //     brushed.call(this);
    //   })
    //   .on("end", function () {
    //     brushedEnd.call(this);
    //   });

    // //Slide
    // this.slide.call(this.brush);

    this.brush = d3.drag()
    //.on("start.interrupt", function() { _this.slide.interrupt(); })
    .on("start drag", function () {
      brushed.call(this);
    }).on("end", function () {
      brushedEnd.call(this);
    });

    //Slide
    this.slide.call(this.brush);

    this.slider_outer.on("mousewheel", function () {
      //do nothing and dont pass the event on if we are currently dragging the slider
      if (_this.model.time.dragging) {
        d3.event.stopPropagation();
        d3.event.preventDefault();
        d3.event.returnValue = false;
        return false;
      }
    });

    //this.slide.selectAll(".extent,.resize")
    //  .remove();

    this._setSelectedLimitsId = 0; //counter for setSelectedLimits

    if (this.model.time.startSelected > this.model.time.start) {
      _this.updateSelectedStartLimiter();
    }

    if (this.model.time.endSelected < this.model.time.end) {
      _this.updateSelectedEndLimiter();
    }

    // special for linechart: resize timeslider to match time x-axis length
    this.parent.on("myEvent", function (evt, params) {
      var layoutProfile = _this.getLayoutProfile();
      var profile = _this.profiles[layoutProfile];

      if (params.profile && params.profile.margin) {
        profile.margin = params.profile.margin;
      }

      // set the right margin that depends on longest label width
      _this.element.select(".vzb-ts-slider-wrapper").style("right", params.mRight - profile.margin.right + "px");

      _this.updateSize([0, params.rangeMax]);
    });

    this.on("resize", function () {
      _this.updateSize();
    });
  },


  //template and model are ready
  ready: function ready() {
    if (this.model.time.splash) return;

    if (!this.model.time._ready) return utils.warn("TODO timeslider is fired ready event while time model is not ready yet! how come?");

    var _this = this;

    this.element.classed(class_loading, false);

    this.changeLimits();
    this.changeTime();
    this.updateSize();

    _this._updateProgressBar();
    _this.model.marker.listenFramesQueue(null, function (time) {
      _this._updateProgressBar(time);
    });
    _this.setSelectedLimits(true);
  },
  changeLimits: function changeLimits() {
    var minValue = this.model.time.start;
    var maxValue = this.model.time.end;
    //scale
    this.xScale.domain([minValue, maxValue]);
    //axis
    this.xAxis.tickValues([minValue, maxValue]).tickFormat(this.model.time.getFormatter());
  },
  changeTime: function changeTime() {
    //time slider should always receive a time model
    var time = this.model.time.value;
    //special classes
    this._optionClasses();
  },


  /**
   * Executes everytime the container or vizabi is resized
   * Ideally,it contains only operations related to size
   */
  updateSize: function updateSize(range) {
    if (this.model.time.splash) return;

    this.model.time.pause();

    this.profile = this.getActiveProfile(this.profiles, this.presentationProfileChanges);

    var slider_w = parseInt(this.slider_outer.style("width"), 10) || 0;
    var slider_h = parseInt(this.slider_outer.style("height"), 10) || 0;

    if (!slider_h || !slider_w) return utils.warn("time slider resize() aborted because element is too small or has display:none");

    this.width = slider_w - this.profile.margin.left - this.profile.margin.right;
    this.height = slider_h - this.profile.margin.bottom - this.profile.margin.top;
    var _this = this;

    //translate according to margins
    this.slider.attr("transform", "translate(" + this.profile.margin.left + "," + this.profile.margin.top + ")");

    this.xScale.range(range || [0, this.width]);

    this.slide.attr("transform", "translate(0," + this.height / 2 + ")").attr("x1", this.xScale.range()[0]).attr("x2", this.xScale.range()[1]).style("stroke-width", this.profile.radius * 2 + "px");
    //.call(this.brush
    //.extent([[this.xScale.range()[0], 0], [this.xScale.range()[1], this.height]]));

    //adjust axis with scale
    this.xAxis = this.xAxis.scale(this.xScale).tickSizeInner(0).tickSizeOuter(0).tickPadding(this.profile.label_spacing).tickSizeMinor(0, 0);

    this.axis.attr("transform", "translate(0," + this.height / 2 + ")").call(this.xAxis);

    this.select.attr("transform", "translate(0," + this.height / 2 + ")");
    this.progressBar.attr("transform", "translate(0," + this.height / 2 + ")");

    this.slide.select(".background").attr("height", this.height);

    //size of handle
    this.handle.attr("transform", "translate(0," + this.height / 2 + ")").attr("r", this.profile.radius);

    this.sliderWidth = _this.slider.node().getBoundingClientRect().width;

    var forecastBoundaryIsOn = this.model.time.end > this.model.time.endBeforeForecast;
    this.forecastBoundary.classed("vzb-hidden", !forecastBoundaryIsOn);

    if (forecastBoundaryIsOn) {
      this.forecastBoundary.attr("transform", "translate(0," + this.height / 2 + ")").attr("x1", this.xScale(this.model.time.endBeforeForecast) - this.profile.radius / 2).attr("x2", this.xScale(this.model.time.endBeforeForecast) + this.profile.radius / 2).attr("y1", this.profile.radius).attr("y2", this.profile.radius);
    }

    this.resizeSelectedLimiters();
    this._resizeProgressBar();
    this._setHandle();

    this.playButtons.style("width", this.profile.margin.left + "px");
  },
  setSelectedLimits: function setSelectedLimits(force) {
    var _this = this;
    this._setSelectedLimitsId++;
    var _setSelectedLimitsId = this._setSelectedLimitsId;

    var select = _this.model.marker.select;
    if (select.length == 0) {
      if (_this.model.time.start != null && _this.model.time.end != null) {
        _this.model.time.set({
          startSelected: new Date(_this.model.time.start),
          endSelected: new Date(_this.model.time.end)
        }, null, false /*make change non-persistent for URL and history*/);
      }
      return;
    }
    var KEYS = utils.unique(this.model.marker._getAllDimensions({ exceptType: "time" }));
    var proms = [];
    utils.forEach(select, function (entity) {
      proms.push(_this.model.marker.getEntityLimits(utils.getKey(entity, KEYS)));
    });
    Promise.all(proms).then(function (limits) {
      if (_setSelectedLimitsId != _this._setSelectedLimitsId) return;
      var first = limits.shift();
      var min = first.min;
      var max = first.max;
      utils.forEach(limits, function (limit) {
        if (min - limit.min > 0) min = limit.min;
        if (max - limit.max < 0) max = limit.max;
      });
      _this.model.time.set({
        startSelected: d3.max([min, new Date(_this.model.time.start)]),
        endSelected: d3.min([max, new Date(_this.model.time.end)])
      }, force, false /*make change non-persistent for URL and history*/);
    });
  },
  updateSelectedStartLimiter: function updateSelectedStartLimiter() {
    var _this = this;
    this.select.select("#clip-start-" + _this._id).remove();
    this.select.select(".selected-start").remove();
    if (this.model.time.startSelected && this.model.time.startSelected > this.model.time.start) {
      this.select.append("clipPath").attr("id", "clip-start-" + _this._id).append("rect");
      this.select.append("path").attr("clip-path", "url(" + location.pathname + "#clip-start-" + _this._id + ")").classed("selected-start", true);
      this.resizeSelectedLimiters();
    }
  },
  updateSelectedEndLimiter: function updateSelectedEndLimiter() {
    var _this = this;
    this.select.select("#clip-end-" + _this._id).remove();
    this.select.select(".selected-end").remove();
    if (this.model.time.endSelected && this.model.time.endSelected < this.model.time.end) {
      this.select.append("clipPath").attr("id", "clip-end-" + _this._id).append("rect");
      this.select.append("path").attr("clip-path", "url(" + location.pathname + "#clip-end-" + _this._id + ")").classed("selected-end", true);
      this.resizeSelectedLimiters();
    }
  },
  resizeSelectedLimiters: function resizeSelectedLimiters() {
    var _this = this;
    this.select.select(".selected-start").attr("d", "M0,0H" + this.xScale(this.model.time.startSelected));
    this.select.select("#clip-start-" + _this._id).select("rect").attr("x", -this.height / 2).attr("y", -this.height / 2).attr("height", this.height).attr("width", this.xScale(this.model.time.startSelected) + this.height / 2);
    this.select.select(".selected-end").attr("d", "M" + this.xScale(this.model.time.endSelected) + ",0H" + this.xScale(this.model.time.end));
    this.select.select("#clip-end-" + _this._id).select("rect").attr("x", this.xScale(this.model.time.endSelected)).attr("y", -this.height / 2).attr("height", this.height).attr("width", this.xScale(this.model.time.end) - this.xScale(this.model.time.endSelected) + this.height / 2);
  },
  _resizeProgressBar: function _resizeProgressBar() {
    var _this = this;
    this.progressBar.selectAll("path").each(function (d) {
      d3.select(this).attr("d", "M" + _this.xScale(d[0]) + ",0H" + _this.xScale(d[1]));
    });
  },
  _updateProgressBar: function _updateProgressBar(time) {
    var _this = this;
    if (time) {
      if (_this.completedTimeFrames.indexOf(time) != -1) return;
      _this.completedTimeFrames.push(time);
      var next = _this.model.time.incrementTime(time);
      var prev = _this.model.time.decrementTime(time);
      if (next > _this.model.time.end) {
        if (time - _this.model.time.end == 0) {
          next = time;
          time = prev;
        } else {
          return;
        }
      }
      if (_this.availableTimeFrames.length == 0 || _this.availableTimeFrames[_this.availableTimeFrames.length - 1][1] < time) {
        _this.availableTimeFrames.push([time, next]);
      } else if (next < _this.availableTimeFrames[0][0]) {
        _this.availableTimeFrames.unshift([time, next]);
      } else {
        for (var i = 0; i < _this.availableTimeFrames.length; i++) {
          if (time - _this.availableTimeFrames[i][1] == 0) {
            if (i + 1 < _this.availableTimeFrames.length && next - _this.availableTimeFrames[i + 1][0] == 0) {
              _this.availableTimeFrames[i][1] = _this.availableTimeFrames[i + 1][1];
              _this.availableTimeFrames.splice(i + 1, 1);
            } else {
              _this.availableTimeFrames[i][1] = next;
            }
            break;
          }
          if (next - _this.availableTimeFrames[i][0] == 0) {
            _this.availableTimeFrames[i][0] = time;
            break;
          }
          if (time - _this.availableTimeFrames[i][1] > 0 && next - _this.availableTimeFrames[i + 1][0] < 0) {
            _this.availableTimeFrames.splice(i + 1, 0, [time, next]);
            break;
          }
        }
      }

      var lastIndex = void 0;
      if (_this.availableTimeFrames.some(function (range, index) {
        if (!(range[0] - _this.stepLimits[0]) && !(range[1] - _this.stepLimits[1])) {
          lastIndex = index;
          return true;
        }
      })) _this.availableTimeFrames = _this.availableTimeFrames.slice(lastIndex, 1);
    } else {
      var steps = _this.model.time.getAllSteps();
      _this.stepLimits = [steps[0], steps[steps.length - 1]];
      _this.availableTimeFrames = [];
      _this.completedTimeFrames = [];
    }

    var progress = this.progressBar.selectAll("path").data(_this.availableTimeFrames);
    progress.exit().remove();
    progress.enter().append("path").attr("class", "domain").merge(progress).each(function (d) {
      var element = d3.select(this);
      element.attr("d", "M" + _this.xScale(d[0]) + ",0H" + _this.xScale(d[1])).classed("rounded", _this.availableTimeFrames.length == 1);
    });
  },


  /**
   * Returns width of slider text value.
   * Parameters in this function needed for memoize function, so they are not redundant.
   */
  getValueWidth: function getValueWidth(layout, value) {
    return this.valueText.node().getBoundingClientRect().width;
  },


  /**
   * Gets brushed function to be executed when dragging
   * @returns {Function} brushed function
   */
  _getBrushed: function _getBrushed() {
    var _this = this;
    return function () {

      if (_this.model.time.playing) _this.model.time.set("playing", false, null, false);

      _this._optionClasses();
      _this.element.classed(class_dragging, true);

      var value = void 0; // = _this.brush.extent()[0];
      //var value = d3.brushSelection(_this.slide.node());

      //if(!value) return;

      //set brushed properties

      if (d3.event.sourceEvent) {
        // Prevent window scrolling on cursor drag in Chrome/Chromium.
        d3.event.sourceEvent.preventDefault();

        _this.model.time.dragStart();
        var posX = utils.roundStep(Math.round(d3.mouse(this)[0]), precision);
        var maxPosX = _this.width;

        var forecastBoundaryIsOn = _this.model.time.end > _this.model.time.endBeforeForecast;
        var forecastBoundaryPos = _this.xScale(_this.model.time.endBeforeForecast);
        var snappyMargin = 0.5 * _this.handle.attr("r");

        if (posX > maxPosX) {
          posX = maxPosX;
        } else if (posX < 0) {
          posX = 0;
        } else if (Math.abs(posX - forecastBoundaryPos) < snappyMargin && !d3.event.sourceEvent.shiftKey && forecastBoundaryIsOn) {
          posX = forecastBoundaryPos;
        }

        value = _this.xScale.invert(posX);
        //set handle position
        _this.handle.attr("cx", posX);
        _this.valueText.attr("transform", "translate(" + posX + "," + _this.height / 2 + ")");
        _this.valueText.text(_this.model.time.formatDate(value, "ui"));
      }

      //set time according to dragged position
      if (value - _this.model.time.value !== 0) {
        _this._setTime(value);
      }
    };
  },


  /**
   * Gets brushedEnd function to be executed when dragging ends
   * @returns {Function} brushedEnd function
   */
  _getBrushedEnd: function _getBrushedEnd() {
    var _this = this;
    return function () {
      _this._setTime.recallLast();
      _this.element.classed(class_dragging, false);
      _this.model.time.dragStop();
      _this.model.time.snap();
    };
  },


  /**
   * Sets the handle to the correct position
   * @param {Boolean} transition whether to use transition or not
   */
  _setHandle: function _setHandle(transition) {
    var _this = this;
    var value = this.model.time.value;
    //this.slide.call(this.brush.extent([value, value]));
    var new_pos = this.xScale(value);
    //this.brush.move(this.slide, [new_pos, new_pos])

    this.element.classed("vzb-ts-disabled", this.model.time.end <= this.model.time.start);
    //    this.valueText.text(this.model.time.formatDate(value));

    //    var old_pos = this.handle.attr("cx");
    //var new_pos = this.xScale(value);
    if (_this.prevPosition == null) _this.prevPosition = new_pos;
    var delayAnimations = new_pos > _this.prevPosition ? this.model.time.delayAnimations : 0;
    if (transition) {
      this.handle.attr("cx", _this.prevPosition).transition().duration(delayAnimations).ease(d3.easeLinear).attr("cx", new_pos);

      this.valueText.attr("transform", "translate(" + _this.prevPosition + "," + this.height / 2 + ")").transition("text").delay(delayAnimations).text(this.model.time.formatDate(value, "ui"));
      this.valueText.transition().duration(delayAnimations).ease(d3.easeLinear).attr("transform", "translate(" + new_pos + "," + this.height / 2 + ")");
    } else {
      this.handle
      //cancel active transition
      .interrupt().attr("cx", new_pos);

      this.valueText
      //cancel active transition
      .interrupt().interrupt("text").transition("text");
      this.valueText.attr("transform", "translate(" + new_pos + "," + this.height / 2 + ")").text(this.model.time.formatDate(value, "ui"));
    }
    _this.prevPosition = new_pos;
  },


  /**
   * Sets the current time model to time
   * @param {number} time The time
   */
  _setTime: function _setTime(time) {
    //update state
    var _this = this;
    //  frameRate = 50;

    //avoid updating more than once in "frameRate"
    //var now = new Date();
    //if (this._updTime != null && now - this._updTime < frameRate) return;
    //this._updTime = now;
    var persistent = !this.model.time.dragging && !this.model.time.playing;
    _this.model.time.getModelObject("value").set(time, false, persistent); // non persistent
  },


  /**
   * Applies some classes to the element according to options
   */
  _optionClasses: function _optionClasses() {
    //show/hide classes

    var show_ticks = this.ui.show_ticks;
    var show_value = this.ui.show_value;
    var show_value_when_drag_play = this.ui.show_value_when_drag_play;
    var axis_aligned = this.ui.axis_aligned;
    var show_play = this.ui.show_button && this.model.time.playable;

    this.xAxis.labelerOptions({
      scaleType: "time",
      removeAllLabels: !show_ticks,
      limitMaxTickNumber: 3,
      showOuter: false,
      toolMargin: {
        left: 10,
        right: 10,
        top: 0,
        bottom: 30
      },
      fitIntoScale: "optimistic"
    });

    this.element.classed(class_hide_play, !show_play);
    this.element.classed(class_playing, this.model.time.playing);
    this.element.classed(class_show_value, show_value);
    this.element.classed(class_show_value_when_drag_play, show_value_when_drag_play);
    this.element.classed(class_axis_aligned, axis_aligned);
  }
});

exports.default = TimeSlider;

/***/ }),
/* 430 */
/***/ (function(module, exports) {

module.exports = "<div class=\"vzb-timeslider vzb-ts-loading\">\n  <div class=\"vzb-ts-slider-wrapper\">\n    <svg class=\"vzb-ts-slider\">\n      <g>\n        <g class=\"vzb-ts-slider-axis\"></g>\n        <g class=\"vzb-ts-slider-progress\"></g>\n        <g class=\"vzb-ts-slider-select\"></g>\n        <line class=\"vzb-ts-slider-forecastboundary\"></line>\n        <circle class=\"vzb-ts-slider-handle\"></circle>\n        <text class=\"vzb-ts-slider-value\"></text>\n        <line class=\"vzb-ts-slider-slide\"></line>\n      </g>\n      </svg>\n  </div>\n\n  <!-- SVG VIZABI ICONS\n       source: https://github.com/encharm/Font-Awesome-SVG-PNG/ -->\n  <div class=\"vzb-ts-btns\">\n    <button class=\"vzb-ts-btn-loading vzb-ts-btn\">\n      <div class='vzb-loader'></div>\n    </button>\n    <button class=\"vzb-ts-btn-play vzb-ts-btn\">\n      <svg class=\"vzb-icon vzb-icon-play\" viewBox=\"3 3 42 42\"\n           xmlns=\"http://www.w3.org/2000/svg\">\n        <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm-4 29V15l12 9-12 9z\"/>\n      </svg>\n    </button>\n    <button class=\"vzb-ts-btn-pause vzb-ts-btn\">\n      <svg class=\"vzb-icon vzb-icon-pause\" viewBox=\"3 3 42 42\"\n           xmlns=\"http://www.w3.org/2000/svg\">\n        <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm-2 28h-4V16h4v16zm8 0h-4V16h4v16z\"/>\n      </svg>\n    </button>\n  </div>\n</div>\n";

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _component = __webpack_require__(5);

var _component2 = _interopRequireDefault(_component);

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

var _hook = __webpack_require__(32);

var _hook2 = _interopRequireDefault(_hook);

var _marker = __webpack_require__(78);

var _marker2 = _interopRequireDefault(_marker);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/*!
 * VIZABI INDICATOR PICKER
 * Reusable indicator picker component
 */

var INDICATOR = "which";
var SCALETYPE = "scaleType";
var MODELTYPE_COLOR = "color";
var MENU_HORIZONTAL = 1;
var MENU_VERTICAL = 2;

//css custom classes
var css = {
  wrapper: "vzb-treemenu-wrap",
  wrapper_outer: "vzb-treemenu-wrap-outer",
  background: "vzb-treemenu-background",
  close: "vzb-treemenu-close",
  search: "vzb-treemenu-search",
  list: "vzb-treemenu-list",
  list_outer: "vzb-treemenu-list-outer",
  list_item: "vzb-treemenu-list-item",
  list_item_leaf: "vzb-treemenu-list-item-leaf",
  leaf: "vzb-treemenu-leaf",
  leaf_content: "vzb-treemenu-leaf-content",
  leaf_content_item: "vzb-treemenu-leaf-content-item",
  leaf_content_item_title: "vzb-treemenu-leaf-content-item-title",
  leaf_content_item_descr: "vzb-treemenu-leaf-content-item-descr",
  leaf_content_item_helptranslate: "vzb-treemenu-leaf-content-item-helptranslate",
  hasChild: "vzb-treemenu-list-item-children",
  list_item_label: "vzb-treemenu-list-item-label",
  list_top_level: "vzb-treemenu-list-top",
  search_wrap: "vzb-treemenu-search-wrap",
  isSpecial: "vzb-treemenu-list-item-special",
  hidden: "vzb-hidden",
  title: "vzb-treemenu-title",
  scaletypes: "vzb-treemenu-scaletypes",
  scaletypesDisabled: "vzb-treemenu-scaletypes-disabled",
  scaletypesActive: "vzb-treemenu-scaletypes-active",
  alignYt: "vzb-align-y-top",
  alignYb: "vzb-align-y-bottom",
  alignXl: "vzb-align-x-left",
  alignXr: "vzb-align-x-right",
  alignXc: "vzb-align-x-center",
  menuHorizontal: "vzb-treemenu-horizontal",
  menuVertical: "vzb-treemenu-vertical",
  absPosVert: "vzb-treemenu-abs-pos-vert",
  absPosHoriz: "vzb-treemenu-abs-pos-horiz",
  menuOpenLeftSide: "vzb-treemenu-open-left-side",
  noTransition: "notransition"
};

//options and globals
var OPTIONS = {
  MOUSE_LOCS: [], //contains last locations of mouse
  MOUSE_LOCS_TRACKED: 3, //max number of locations of mouse
  DELAY: 200, //amazons multilevel delay
  TOLERANCE: 150, //this parameter is used for controlling the angle of multilevel dropdown
  LAST_DELAY_LOC: null, //this is cached location of mouse, when was a delay
  TIMEOUT: null, //timeout id
  SEARCH_PROPERTY: "id", //property in input data we we'll search by
  SUBMENUS: "children", //property for submenus (used by search)
  SEARCH_MIN_STR: 1, //minimal length of query string to start searching
  RESIZE_TIMEOUT: null, //container resize timeout
  MOBILE_BREAKPOINT: 400, //mobile breakpoint
  CURRENT_PATH: [], //current active path
  MIN_COL_WIDTH: 60, //minimal column size
  MENU_DIRECTION: MENU_HORIZONTAL,
  MAX_MENU_WIDTH: 320,
  MENU_OPEN_LEFTSIDE: false
};

var Menu = _class2.default.extend({
  init: function init(parent, menu, options) {
    var _this = this;
    this.parent = parent;
    this.entity = menu;
    this.OPTIONS = options;
    this.width = this.OPTIONS.MIN_COL_WIDTH;
    this.direction = this.OPTIONS.MENU_DIRECTION;
    this._setDirectionClass();
    this.menuItems = [];
    var menuItemsHolder = void 0;

    if (this.entity.empty()) return this;

    this.entity.each(function () {
      menuItemsHolder = d3.selectAll(this.childNodes).filter(function () {
        return d3.select(this).classed(css.list);
      });
    });
    if (menuItemsHolder.empty()) menuItemsHolder = this.entity;
    menu.selectAll("." + css.list_item).filter(function () {
      return this.parentNode == menuItemsHolder.node();
    }).each(function () {
      _this.addSubmenu(d3.select(this));
    });
    if (!this.menuItems.length && this.isActive()) {
      this.buildLeaf();
    }
    return this;
  },
  setWidth: function setWidth(width, recursive, immediate) {
    if (this.width != width && this.entity.node()) {
      this.width = width;
      if ((this.entity.classed(css.list_top_level) || this.entity.classed("active")) && this.direction == MENU_HORIZONTAL) {
        if (!immediate) {
          this.entity.transition().delay(0).duration(100).style("width", this.width + "px");
        } else {
          this.entity.style("width", this.width + "px");
        }
      }
      if (this.entity.classed(css.list_top_level)) {
        this.entity.selectAll("." + css.leaf).style("width", this.width - 1 + "px");
      }
      if (recursive) {
        for (var i = 0; i < this.menuItems.length; i++) {
          this.menuItems[i].setWidth(this.width, recursive, immediate);
        }
      }
      return this;
    }
  },

  /**
   * configure menu type (horizontal or vertical)
   * @param direction MENU_HORIZONTAL or MENU_VERTICAL
   * @param recursive change direction over menu sublevels
   * @returns {Menu}
   */
  setDirection: function setDirection(direction, recursive) {
    this.direction = direction;
    this.entity.style("width", "").style("height", "");
    if (recursive) {
      for (var i = 0; i < this.menuItems.length; i++) {
        this.menuItems[i].setDirection(this.direction, recursive);
      }
    }
    this._setDirectionClass();
    return this;
  },
  _setDirectionClass: function _setDirectionClass() {
    if (this.direction == MENU_HORIZONTAL) {
      this.entity.classed(css.menuVertical, false);
      this.entity.classed(css.menuHorizontal, true);
    } else {
      this.entity.classed(css.menuHorizontal, false);
      this.entity.classed(css.menuVertical, true);
    }
  },
  addSubmenu: function addSubmenu(item) {
    this.menuItems.push(new MenuItem(this, item, this.OPTIONS));
  },
  open: function open() {
    var _this2 = this;

    var _this = this;
    if (!this.isActive()) {
      _this.parent.parentMenu.openSubmenuNow = true;
      this.closeNeighbors(function () {
        if (_this.direction == MENU_HORIZONTAL) {
          if (!_this2.menuItems.length) _this.buildLeaf();
          _this._openHorizontal();
          _this.calculateMissingWidth(0);
        } else {
          _this._openVertical();
        }
      });
      _this.parent.parentMenu.openSubmenuNow = false;
    }
    return this;
  },

  /**
   * recursively calculate missed width for last menu level
   * @param width
   * @param cb
   */
  calculateMissingWidth: function calculateMissingWidth(width, cb) {
    var _this = this;
    if (this.entity.classed(css.list_top_level)) {
      if (width > this.OPTIONS.MAX_MENU_WIDTH) {
        if (typeof cb === "function") cb(width - this.OPTIONS.MAX_MENU_WIDTH);
      }
    } else {
      this.parent.parentMenu.calculateMissingWidth(width + this.width, function (widthToReduce) {
        if (widthToReduce > 0) {
          _this.reduceWidth(widthToReduce, function (newWidth) {
            if (typeof cb === "function") cb(newWidth); // callback is not defined if it is emitted from this level
          });
        } else if (typeof cb === "function") cb(widthToReduce);
      });
    }
  },

  /**
   * restore width (if it was reduced before)
   * @param width
   * @param isClosedElement (parameter for check if curent element emit this action)
   * @param cb
   */
  restoreWidth: function restoreWidth(width, isClosedElement, cb) {
    var _this = this;
    if (isClosedElement) {
      this.parent.parentMenu.restoreWidth(width, false, cb);
    } else if (width <= 0) {
      if (typeof cb === "function") cb();
    } else if (!this.entity.classed(css.list_top_level)) {
      var currentElementWidth = this.entity.node().offsetWidth;
      var newElementWidth = Math.min(width, _this.width);
      if (currentElementWidth < newElementWidth) {
        var duration = 250 * (currentElementWidth / newElementWidth);
        this.entity.transition().delay(0).duration(duration).style("width", newElementWidth + "px").on("end", function () {});
        _this.parent.parentMenu.restoreWidth(width - newElementWidth, false, cb);
      } else {
        this.parent.parentMenu.restoreWidth(width, false, cb);
      }
    } else {
      if (typeof cb === "function") cb();
    }
  },

  /**
   * made element narrower to free space for other element
   * @param width
   * @param cb
   */
  reduceWidth: function reduceWidth(width, cb) {
    var _this = this;
    var currWidth = this.entity.node().offsetWidth;

    if (currWidth <= this.OPTIONS.MIN_COL_WIDTH) {
      cb(width - _this.width + currWidth);
    } else {

      var newElementWidth = Math.max(this.OPTIONS.MIN_COL_WIDTH, _this.width - width);
      var duration = 250 / (_this.width / newElementWidth);
      this.entity.transition().delay(0).duration(duration).style("width", newElementWidth + "px").on("end", function () {
        cb(width - _this.width + newElementWidth);
      });
    }
  },
  _openHorizontal: function _openHorizontal() {
    var _this = this;
    _this.entity.classed("active", true).transition().delay(0).duration(250).style("width", _this.width + "px").on("end", function () {
      _this.marqueeToggle(true);
    });
  },
  _openVertical: function _openVertical() {
    var _this = this;
    _this.entity.style("height", "0px");
    _this.entity.transition().delay(0).duration(250).style("height", 36 * _this.menuItems.length + "px").on("end", function () {
      _this.entity.style("height", "auto");
      _this.marqueeToggle(true);
      _this.scrollToFitView();
    });
    _this.entity.classed("active", true);
  },
  closeAllChildren: function closeAllChildren(cb) {
    var callbacks = 0;
    for (var i = 0; i < this.menuItems.length; i++) {
      if (this.menuItems[i].isActive()) {
        ++callbacks;
        this.menuItems[i].submenu.close(function () {
          if (--callbacks == 0) {
            if (typeof cb === "function") cb();
          }
        });
      }
    }
    if (callbacks == 0) {
      if (typeof cb === "function") cb();
    }
  },
  closeNeighbors: function closeNeighbors(cb) {
    if (this.parent) {
      this.parent.closeNeighbors(cb);
    } else {
      cb();
    }
  },
  close: function close(cb) {
    var _this = this;
    this.closeAllChildren(function () {
      if (_this.direction == MENU_HORIZONTAL) {
        _this._closeHorizontal(cb);
      } else {
        _this._closeVertical(cb);
      }
    });
  },
  _closeHorizontal: function _closeHorizontal(cb) {
    var elementWidth = this.entity.node().offsetWidth;
    var _this = this;
    var openSubmenuNow = _this.parent.parentMenu.openSubmenuNow;
    _this.entity.transition().delay(0).duration(20).style("width", 0 + "px").on("end", function () {
      _this.marqueeToggle(false);
      _this.entity.classed("active", false);
      if (!openSubmenuNow) {
        _this.restoreWidth(_this.OPTIONS.MAX_MENU_WIDTH, true, function () {
          if (typeof cb === "function") cb();
        });
      } else {
        if (typeof cb === "function") cb();
      }
    });
  },
  _closeVertical: function _closeVertical(cb) {
    var _this = this;
    _this.entity.transition().delay(0).duration(100).style("height", 0 + "px").on("end", function () {
      _this.marqueeToggle(false);
      _this.entity.classed("active", false);
      if (typeof cb === "function") cb();
    });
  },
  isActive: function isActive() {
    return this.entity.classed("active");
  },
  hasActiveParentNeighbour: function hasActiveParentNeighbour() {
    return this.menuItems.filter(function (item) {
      return item.isActive();
    }).some(function (item) {
      return !!d3.select(item.entity).node().classed(css.hasChild);
    });
  },
  marqueeToggle: function marqueeToggle(toggle) {
    for (var i = 0; i < this.menuItems.length; i++) {
      this.menuItems[i].marqueeToggle(toggle);
    }
  },
  marqueeToggleAll: function marqueeToggleAll(toggle) {
    for (var i = 0; i < this.menuItems.length; i++) {
      this.menuItems[i].marqueeToggleAll(toggle);
    }
  },
  findItemById: function findItemById(id) {
    for (var i = 0; i < this.menuItems.length; i++) {
      if (this.menuItems[i].entity.data().id == id) {
        return this.menuItems[i];
      }
      if (this.menuItems[i].submenu) {
        var item = this.menuItems[i].submenu.findItemById(id);
        if (item) return item;
      }
    }
    return null;
  },
  getTopMenu: function getTopMenu() {
    return this.parent ? this.parent.parentMenu.getTopMenu() : this;
  },
  scrollToFitView: function scrollToFitView() {
    var treeMenuNode = this.getTopMenu().entity.node().parentNode;
    var parentItemNode = this.entity.node().parentNode;
    var menuRect = treeMenuNode.getBoundingClientRect();
    var itemRect = parentItemNode.getBoundingClientRect();
    var viewportItemTop = itemRect.top - menuRect.top;
    if (viewportItemTop + itemRect.height > menuRect.height) {
      var newItemTop = itemRect.height > menuRect.height ? menuRect.height - 10 : itemRect.height + 10;

      var newScrollTop = treeMenuNode.scrollTop + newItemTop - menuRect.height + viewportItemTop;

      var scrollTopTween = function scrollTopTween(scrollTop) {
        return function () {
          var i = d3.interpolateNumber(this.scrollTop, scrollTop);
          return function (t) {
            treeMenuNode.scrollTop = i(t);
          };
        };
      };

      d3.select(treeMenuNode).transition().duration(100).tween("scrolltoptween", scrollTopTween(newScrollTop));
    }
  },
  buildLeaf: function buildLeaf() {
    var leafDatum = this.entity.datum();

    this.entity.selectAll("div").data([leafDatum]).enter().append("div").classed(css.leaf + " " + css.leaf_content + " vzb-dialog-scrollable", true).style("width", this.width + "px").each(function (d) {
      var leafContent = d3.select(this);
      leafContent.append("span").classed(css.leaf_content_item + " " + css.leaf_content_item_title, true).text(utils.replaceNumberSpacesToNonBreak(d.name) || "");
      leafContent.append("span").classed(css.leaf_content_item + " " + css.leaf_content_item_descr, true).text(utils.replaceNumberSpacesToNonBreak(d.description) || "");
      leafContent.append("span").classed(css.leaf_content_item + " " + css.leaf_content_item_helptranslate, true).classed("vzb-invisible", !d.translateContributionLink).html("<a href=\"" + d.translateContributionLink + "\" target=\"_blank\">" + d.translateContributionText + "</a>");
    });
  }
});

var MenuItem = _class2.default.extend({
  init: function init(parent, item, options) {
    var _this = this;
    this.parentMenu = parent;
    this.entity = item;
    var submenu = item.select("." + css.list_outer);
    if (submenu.node()) {
      this.submenu = new Menu(this, submenu, options);
    }
    this.entity.select("." + css.list_item_label).call(function (select) {
      if (utils.isTouchDevice()) {
        select.onTap(function (evt) {
          d3.event.stopPropagation();
          if (_this.parentMenu.direction == MENU_VERTICAL) {
            var view = _this.entity.select("." + css.list_item_label);
            //only for leaf nodes
            if (!view.attr("children")) return;
          }
          _this.toggleSubmenu();
        });
      } else {
        select.on("mouseenter", function () {
          if (_this.parentMenu.direction == MENU_HORIZONTAL && !d3.select(this).attr("children")) {
            _this.openSubmenu();
          } else if (!_this.parentMenu.hasActiveParentNeighbour()) {
            _this.closeNeighbors();
          }
          _this.marqueeToggle(true);
        }).on("click.item", function () {
          d3.event.stopPropagation();
          if (_this.parentMenu.direction == MENU_HORIZONTAL) {
            _this.openSubmenu();
          } else {
            var view = d3.select(this);
            //only for leaf nodes
            if (!view.attr("children")) return;
            _this.toggleSubmenu();
          }
        });
      }
    });
    return this;
  },
  setWidth: function setWidth(width, recursive, immediate) {
    if (this.submenu && recursive) {
      this.submenu.setWidth(width, recursive, immediate);
    }
    return this;
  },
  setDirection: function setDirection(direction, recursive) {
    if (this.submenu && recursive) {
      this.submenu.setDirection(direction, recursive);
    }
    return this;
  },
  toggleSubmenu: function toggleSubmenu() {
    if (this.submenu) {
      if (this.submenu.isActive()) {
        this.submenu.close();
      } else {
        this.submenu.open();
      }
    }
  },
  openSubmenu: function openSubmenu() {
    if (this.submenu) {
      this.submenu.open();
    } else {
      this.closeNeighbors();
    }
  },
  closeNeighbors: function closeNeighbors(cb) {
    this.parentMenu.closeAllChildren(cb);
  },
  isActive: function isActive() {
    return this.submenu && this.submenu.isActive();
  },
  marqueeToggleAll: function marqueeToggleAll(toggle) {
    var _this = this;
    var labels = this.entity.selectAll("." + css.list_item_label);
    labels.each(function () {
      var label = d3.select(this).select("span");
      var parent = d3.select(this.parentNode);
      parent.classed("marquee", false);
      label.style("width", "");
      if (toggle) {
        if (label.node().scrollWidth > label.node().offsetWidth) {
          label.attr("data-content", label.text());
          var space = 30;
          var offset = space + label.node().scrollWidth;
          label.style("width", offset + "px");
          parent.classed("marquee", true);
        }
      }
    });
  },
  marqueeToggle: function marqueeToggle(toggle) {
    var label = this.entity.select("." + css.list_item_label).select("span");
    this.entity.classed("marquee", false);
    label.style("width", "");
    if (toggle) {
      if (label.node().scrollWidth > label.node().offsetWidth) {
        label.attr("data-content", label.text());
        var space = 30;
        var offset = space + label.node().scrollWidth;
        label.style("width", offset + "px");
        this.entity.classed("marquee", true);
      }
    }
  }
});

var TreeMenu = _component2.default.extend({

  //setters-getters
  indicatorsTree: function indicatorsTree(input) {
    if (!arguments.length) return this._indicatorsTree;
    this._indicatorsTree = input;
    return this;
  },
  callback: function callback(input) {
    if (!arguments.length) return this._callback;
    this._callback = input;
    return this;
  },
  markerID: function markerID(input) {
    if (!arguments.length) return this._markerID;
    this._markerID = input;
    this.targetModel(this.model.marker[this._markerID]);
    return this;
  },
  showWhenReady: function showWhenReady(input) {
    if (!arguments.length) return this._showWhenReady;
    this._showWhenReady = input;
    return this;
  },
  scaletypeSelectorDisabled: function scaletypeSelectorDisabled(input) {
    if (!arguments.length) return this._scaletypeSelectorDisabled;
    this._scaletypeSelectorDisabled = input;
    return this;
  },
  title: function title(input) {
    if (!arguments.length) return this._title;
    this._title = input;
    return this;
  },
  targetModel: function targetModel(input) {
    if (!arguments.length) return this._targetModel;
    if (this._targetModel) {
      this._targetModel.off("change", this.change);
    }
    this._targetModel = input;
    this._targetModel.on("change", this.change);
    if (this._targetModel.isHook()) {
      this._targetProp = "which";
    }
    if (this._targetModel instanceof _marker2.default) {
      this._targetProp = "space";
    }
    return this;
  },
  targetProp: function targetProp(input) {
    if (!arguments.length) return this._targetProp;
    this._targetProp = input;
    return this;
  },
  alignX: function alignX(input) {
    if (!arguments.length) return this._alignX;
    this._alignX = input;
    return this;
  },
  alignY: function alignY(input) {
    if (!arguments.length) return this._alignY;
    this._alignY = input;
    return this;
  },
  top: function top(input) {
    if (!arguments.length) return this._top;
    this._top = input;
    return this;
  },
  left: function left(input) {
    if (!arguments.length) return this._left;
    this._left = input;
    return this;
  },
  init: function init(config, context) {

    var _this = this;

    this.name = "gapminder-treemenu";
    this.model_expects = [{
      name: "marker",
      type: "marker"
    }, {
      name: "time",
      type: "time"
    }, {
      name: "locale",
      type: "locale"
    }, {
      name: "ui",
      type: "ui"
    }];

    this.context = context;
    // object for manipulation with menu representation level
    this.menuEntity = null;

    //contructor is the same as any component
    this._super(config, context);

    //default callback
    this._callback = function (indicator) {
      console.log("Indicator selector: stub callback fired. New indicator is ", indicator);
    };
    this._alignX = "center";
    this._alignY = "center";

    //options
    this.OPTIONS = utils.deepClone(OPTIONS);

    this.change = this.change.bind(this);
  },
  change: function change(evt, path) {
    if (path.indexOf("." + this._targetProp) == -1 && (!this._targetModel.isHook() || path.indexOf(".scaleType") == -1)) return;
    this.updateView();
  },
  ready: function ready() {
    this.model.marker._root.dataManager.getTags(this.model.locale.id).then(this._buildIndicatorsTree.bind(this)).then(this.updateView.bind(this));
  },
  readyOnce: function readyOnce() {
    //this function is only called once at start, when both DOM and this.model are ready
    //this.element contains the view where you can append the menu
    this.element = d3.select(this.placeholder);
    //menu class private
    var _this = this;

    this.element.selectAll("div").remove();

    //general markup

    this.element.append("div").attr("class", css.background).on("click", function () {
      d3.event.stopPropagation();
      _this.toggle();
    });

    this.wrapperOuter = this.element.append("div").classed(css.wrapper_outer, true).classed(css.noTransition, true);

    this.wrapper = this.wrapperOuter.append("div").classed(css.wrapper, true).classed(css.noTransition, true).classed("vzb-dialog-scrollable", true);

    this.wrapper.on("click", function () {
      d3.event.stopPropagation();
    });

    this.wrapper.append("div").attr("class", css.close).html(_iconset.close).on("click", function () {
      d3.event.stopPropagation();
      _this.toggle();
    }).select("svg").attr("width", "0px").attr("height", "0px").attr("class", css.close + "-icon");

    this.wrapper.append("div").classed(css.scaletypes, true).append("span");
    this.wrapper.append("div").classed(css.title, true).append("span");

    this.wrapper.append("div").classed(css.search_wrap, true).append("input").classed(css.search, true).attr("type", "search").attr("id", css.search);

    //init functions
    d3.select("body").on("mousemove", _this._mousemoveDocument);
    this.wrapper.on("mouseleave", function () {
      //if(_this.menuEntity.direction != MENU_VERTICAL) _this.menuEntity.closeAllChildren();
    });

    this.translator = this.model.locale.getTFunction();

    _this._enableSearch();

    _this.resize();
  },
  _buildIndicatorsTree: function _buildIndicatorsTree(tagsArray) {
    var _this3 = this;

    if (tagsArray === true || !tagsArray) tagsArray = [];

    var _this = this;

    var ROOT = "_root";
    var DEFAULT = "_default";
    var ADVANCED = "advanced";
    var OTHER_DATASETS = "other_datasets";

    var FOLDER_STRATEGY_SPREAD = "spread"; //spread indicatos over the root of treemeny
    var FOLDER_STRATEGY_ROOT = "root"; //put indicators in dataset's own folder under root of treemeny
    var FOLDER_STRATEGY_FOLDER = "folder"; //put indicators in dataset's own folder inside a specified folder. use notation like "folder:other_datasets"

    var dataModels = _this.model.marker._root.dataManager.getDataModels();
    var FOLDER_STRATEGY_DEFAULT = dataModels.size == 1 ? FOLDER_STRATEGY_SPREAD : FOLDER_STRATEGY_ROOT;

    //init the dictionary of tags and add default folders
    var tags = {};
    tags[ROOT] = { id: ROOT, children: [] };
    tags[ADVANCED] = { id: ADVANCED, name: this.translator("treemenu/advanced"), type: "folder", children: [] };
    tags[ROOT].children.push(tags[ADVANCED]);
    tags[OTHER_DATASETS] = { id: OTHER_DATASETS, name: this.translator("treemenu/other_datasets"), type: "folder", children: [] };
    tags[ROOT].children.push(tags[OTHER_DATASETS]);

    //populate the dictionary of tags
    tagsArray.forEach(function (tag) {
      tags[tag.tag] = { id: tag.tag, name: tag.name, type: "folder", children: [] };
    });

    //put the dataset folders where they should be: either in root or in specific folders or ==root in case of spreading
    var folderStrategies = {};
    dataModels.forEach(function (m) {

      //figure out the folder strategy
      var strategy = utils.getProp(_this3.model.ui, ["treemenu", "folderStrategyByDataset", m._name]);
      var folder = null;
      if (!strategy) strategy = FOLDER_STRATEGY_DEFAULT;

      if (strategy.includes(":")) {
        folder = strategy.split(":")[1];
        strategy = strategy.split(":")[0];
      }

      //add the dataset's folder to the tree
      tags[m._name] = { id: m._name, name: m.getDatasetName(), type: "dataset", children: [] };

      if (strategy == FOLDER_STRATEGY_FOLDER && tags[folder]) {
        tags[folder].children.push(tags[m._name]);
      } else if (strategy == FOLDER_STRATEGY_SPREAD) {
        tags[m._name] = tags[ROOT];
      } else {
        tags[ROOT].children.push(tags[m._name]);
      }

      folderStrategies[m._name] = strategy;
    });

    //init the tag tree
    var indicatorsTree = tags[ROOT];

    //populate the tag tree
    tagsArray.forEach(function (tag) {

      //if tag's parent is defined
      if (tag.parent && tags[tag.parent]) {

        //add tag to a branch
        tags[tag.parent].children.push(tags[tag.tag]);
      } else {

        //if parent is missing add a tag either to dataset's own folder or to the root if spreading them
        if (folderStrategies[tag.dataSourceName] == FOLDER_STRATEGY_SPREAD) {
          tags[ROOT].children.push(tags[tag.tag]);
        } else {
          tags[tag.dataSourceName].children.push(tags[tag.tag]);
        }
      }
    });

    var properties = this.model.marker.space.length > 1;
    this.model.marker.getAvailableData().forEach(function (kvPair) {
      var entry = kvPair.value;
      //if entry's tag are empty don't include it in the menu
      if (!entry || entry.tags == "_none") return;
      if (!entry.tags) entry.tags = kvPair.dataSource._name || ROOT;

      var use = entry.concept == "_default" ? "constant" : kvPair.key.length > 1 || entry.concept_type === "time" ? "indicator" : "property";
      var concept = {
        id: entry.concept,
        key: kvPair.key,
        name: entry.name,
        name_catalog: entry.name_catalog,
        description: entry.description,
        dataSource: kvPair.dataSource._name,
        translateContributionLink: kvPair.dataSource.translateContributionLink,
        use: use
      };

      if (properties && kvPair.key.length == 1 && entry.concept != "_default" && entry.concept_type != "time") {

        var folderName = kvPair.key[0].concept + "_properties";
        if (!tags[folderName]) {
          var dim = kvPair.key[0];
          tags[folderName] = { id: folderName, name: dim.name + " properties", type: "folder", children: [] };
          tags[ROOT].children.push(tags[folderName]);
        }
        tags[folderName].children.push(concept);
      } else {

        entry.tags.split(",").forEach(function (tag) {
          tag = tag.trim();
          if (tags[tag]) {
            tags[tag === "_root" && entry.concept != "_default" && entry.concept_type != "time" ? concept.dataSource : tag].children.push(concept);
          } else {
            //if entry's tag is not found in the tag dictionary
            if (!_this.consoleGroupOpen) {
              console.groupCollapsed("Some tags were not found, so indicators went under menu root");
              _this.consoleGroupOpen = true;
            }
            utils.warn("tag '" + tag + "' for indicator '" + concept.id + "'");
            tags[ROOT].children.push(concept);
          }
        });
      }
    });

    /**
     * KEY-AVAILABILITY (dimensions for space-menu)
     */
    this.model.marker.getAvailableSpaces().forEach(function (space, str) {
      indicatorsTree.children.push({
        id: str,
        name: space.map(function (dim) {
          return dim.name;
        }).join(", "),
        name_catalog: space.map(function (dim) {
          return dim.name;
        }).join(", "),
        description: "no description",
        dataSource: "All data sources",
        type: "space"
      });
    });

    if (_this.consoleGroupOpen) {
      console.groupEnd();
      delete _this.consoleGroupOpen;
    }
    this._sortChildren(indicatorsTree);
    this.indicatorsTree(indicatorsTree);

    return Promise.resolve();
  },
  _sortChildren: function _sortChildren(tree, isSubfolder) {
    var _this = this;
    if (!tree.children) return;
    tree.children.sort(utils
    //in each folder including root: put subfolders below loose items
    .firstBy()(function (a, b) {
      a = a.type === "dataset" ? 1 : 0;b = b.type === "dataset" ? 1 : 0;return b - a;
    }).thenBy(function (a, b) {
      a = a.children ? 1 : 0;b = b.children ? 1 : 0;return a - b;
    }).thenBy(function (a, b) {
      //in the root level put "time" on top and send "anvanced" to the bottom
      if (!isSubfolder) {
        if (a.id == "time") return -1;
        if (b.id == "time") return 1;
        if (a.id == "other_datasets") return 1;
        if (b.id == "other_datasets") return -1;
        if (a.id == "advanced") return 1;
        if (b.id == "advanced") return -1;
        if (a.id == "_default") return 1;
        if (b.id == "_default") return -1;
      }
      //sort items alphabetically. folders go down because of the emoji folder in the beginning of the name
      return (a.name_catalog || a.name) > (b.name_catalog || b.name) ? 1 : -1;
    }));

    //recursively sort items in subfolders too
    tree.children.forEach(function (d) {
      _this._sortChildren(d, true);
    });
  },


  //happens on resizing of the container
  resize: function resize() {
    var _this = this;

    this.profiles = {
      "small": {
        col_width: 200
      },
      "medium": {
        col_width: 200
      },
      "large": {
        col_width: 200
      }
    };

    var top = this._top;
    var left = this._left;

    if (!this.wrapper) return utils.warn("treemenu resize() abort because container is undefined");

    this.wrapper.classed(css.noTransition, true);
    this.wrapper.node().scrollTop = 0;

    this.activeProfile = this.profiles[this.getLayoutProfile()];
    this.OPTIONS.IS_MOBILE = this.getLayoutProfile() === "small";

    if (this.menuEntity) {
      this.menuEntity.setWidth(this.activeProfile.col_width, true, true);

      if (this.OPTIONS.IS_MOBILE) {
        if (this.menuEntity.direction != MENU_VERTICAL) {
          this.menuEntity.setDirection(MENU_VERTICAL, true);
          this.OPTIONS.MENU_DIRECTION = MENU_VERTICAL;
        }
      } else {
        if (this.menuEntity.direction != MENU_HORIZONTAL) {
          this.menuEntity.setDirection(MENU_HORIZONTAL, true);
          this.OPTIONS.MENU_DIRECTION = MENU_HORIZONTAL;
        }
      }
    }

    this.width = _this.element.node().offsetWidth;
    this.height = _this.element.node().offsetHeight;
    var rect = this.wrapperOuter.node().getBoundingClientRect();
    var containerWidth = rect.width;
    var containerHeight = rect.height;
    if (containerWidth) {
      if (this.OPTIONS.IS_MOBILE) {
        this.clearPos();
      } else {
        if (top || left) {
          if (this.wrapperOuter.node().offsetTop < 10) {
            this.wrapperOuter.style("top", "10px");
          }
          if (this.height - _this.wrapperOuter.node().offsetTop - containerHeight < 0) {
            if (containerHeight > this.height) {
              containerHeight = this.height - 20;
            }
            this.wrapperOuter.style("top", this.height - containerHeight - 10 + "px");
            this.wrapperOuter.style("bottom", "auto");
          }
          if (top) top = _this.wrapperOuter.node().offsetTop;
        }

        var maxHeight = void 0;
        if (this.wrapperOuter.classed(css.alignYb)) {
          maxHeight = this.wrapperOuter.node().offsetTop + this.wrapperOuter.node().offsetHeight;
        } else {
          maxHeight = this.height - this.wrapperOuter.node().offsetTop;
        }
        this.wrapper.style("max-height", maxHeight - 10 + "px");

        this.wrapperOuter.classed(css.alignXc, this._alignX === "center");
        this.wrapperOuter.style("margin-left", this._alignX === "center" ? "-" + containerWidth / 2 + "px" : null);
        if (this._alignX === "center") {
          this.OPTIONS.MAX_MENU_WIDTH = this.width / 2 - containerWidth * 0.5 - 10;
        } else {
          this.OPTIONS.MAX_MENU_WIDTH = this.width - this.wrapperOuter.node().offsetLeft - containerWidth - 10; // 10 - padding around wrapper
        }

        var minMenuWidth = this.activeProfile.col_width + this.OPTIONS.MIN_COL_WIDTH * 2;
        var leftPos = this.wrapperOuter.node().offsetLeft;
        this.OPTIONS.MENU_OPEN_LEFTSIDE = this.OPTIONS.MAX_MENU_WIDTH < minMenuWidth && leftPos > this.OPTIONS.MAX_MENU_WIDTH + 10;
        if (this.OPTIONS.MENU_OPEN_LEFTSIDE) {
          if (leftPos < minMenuWidth + 10) leftPos = minMenuWidth + 10;
          this.OPTIONS.MAX_MENU_WIDTH = leftPos - 10; // 10 - padding around wrapper
        } else {
          if (this.OPTIONS.MAX_MENU_WIDTH < minMenuWidth) {
            leftPos -= minMenuWidth - this.OPTIONS.MAX_MENU_WIDTH;
            this.OPTIONS.MAX_MENU_WIDTH = minMenuWidth;
          }
        }

        if (left) {
          left = leftPos;
        } else {
          if (leftPos != this.wrapperOuter.node().offsetLeft) {
            this.wrapperOuter.style("left", "auto");
            this.wrapperOuter.style("right", this.width - leftPos - rect.width + "px");
          }
        }

        this._top = top;
        this._left = left;

        if (left || top) this.setPos();

        this.wrapperOuter.classed("vzb-treemenu-open-left-side", !this.OPTIONS.IS_MOBILE && this.OPTIONS.MENU_OPEN_LEFTSIDE);
      }
    }

    this.wrapper.node().offsetHeight;
    this.wrapper.classed(css.noTransition, false);

    this.setHorizontalMenuHeight();

    return this;
  },
  toggle: function toggle() {
    this.setHiddenOrVisible(!this.element.classed(css.hidden));
  },
  setHiddenOrVisible: function setHiddenOrVisible(hidden) {
    var _this = this;

    this.element.classed(css.hidden, hidden);
    this.wrapper.classed(css.noTransition, hidden);

    if (hidden) {
      this.clearPos();
      this.menuEntity.marqueeToggle(false);
    } else {
      this.setPos();
      !utils.isTouchDevice() && this.focusSearch();
      this.resize();
      this.scrollToSelected();
    }

    this.parent.components.forEach(function (c) {
      if (c.name == "gapminder-dialogs") {
        d3.select(c.placeholder.parentNode).classed("vzb-blur", !hidden);
      } else if (c.element.classed) {
        c.element.classed("vzb-blur", c != _this && !hidden);
      } else {
        d3.select(c.element).classed("vzb-blur", c != _this && !hidden);
      }
    });

    this.width = _this.element.node().offsetWidth;

    return this;
  },
  scrollToSelected: function scrollToSelected() {
    if (!this.selectedNode) return;
    var _this = this;
    var scrollToItem = function scrollToItem(listNode, itemNode) {
      listNode.scrollTop = 0;
      var rect = listNode.getBoundingClientRect();
      var itemRect = itemNode.getBoundingClientRect();
      var scrollTop = itemRect.bottom - rect.top - listNode.offsetHeight + 10;
      listNode.scrollTop = scrollTop;
    };

    if (this.menuEntity.direction == MENU_VERTICAL) {
      scrollToItem(this.wrapper.node(), this.selectedNode);
      _this.menuEntity.marqueeToggleAll(true);
    } else {
      var selectedItem = this.menuEntity.findItemById(d3.select(this.selectedNode).data().id);
      selectedItem.submenu.calculateMissingWidth(0, function () {
        _this.menuEntity.marqueeToggleAll(true);
      });

      var parent = this.selectedNode;
      var listNode = void 0;
      while (!utils.hasClass(parent, css.list_top_level)) {
        if (parent.tagName == "LI") {
          listNode = utils.hasClass(parent.parentNode, css.list_top_level) ? parent.parentNode.parentNode : parent.parentNode;
          scrollToItem(listNode, parent);
        }
        parent = parent.parentNode;
      }
    }
  },
  setPos: function setPos() {
    var top = this._top;
    var left = this._left;
    var rect = this.wrapperOuter.node().getBoundingClientRect();

    if (top) {
      this.wrapperOuter.style("top", top + "px");
      this.wrapperOuter.style("bottom", "auto");
      this.wrapperOuter.classed(css.absPosVert, top);
    }
    if (left) {
      var right = this.element.node().offsetWidth - left - rect.width;
      right = right < 10 ? 10 : right;
      this.wrapperOuter.style("right", right + "px");
      this.wrapperOuter.style("left", "auto");
      this.wrapperOuter.classed(css.absPosHoriz, right);
    }
  },
  clearPos: function clearPos() {
    this._top = "";
    this._left = "";
    this.wrapperOuter.attr("style", "");
    this.wrapperOuter.classed(css.absPosVert, "");
    this.wrapperOuter.classed(css.absPosHoriz, "");
    this.wrapperOuter.classed(css.menuOpenLeftSide, "");
    this.wrapper.style("max-height", "");
  },
  setHorizontalMenuHeight: function setHorizontalMenuHeight() {
    var wrapperHeight = null;
    if (this.menuEntity && this.OPTIONS.MENU_DIRECTION == MENU_HORIZONTAL && this.menuEntity.menuItems.length) {
      var oneItemHeight = parseInt(this.menuEntity.menuItems[0].entity.style("height"), 10) || 0;
      var menuMaxHeight = oneItemHeight * this._maxChildCount;
      var rootMenuHeight = Math.max(this.menuEntity.menuItems.length, 3) * oneItemHeight + this.menuEntity.entity.node().offsetTop + parseInt(this.wrapper.style("padding-bottom"), 10);
      wrapperHeight = "" + Math.max(menuMaxHeight, rootMenuHeight) + "px";
    }
    this.wrapper.classed(css.noTransition, true);
    this.wrapper.node().offsetHeight;
    this.wrapper.style("height", wrapperHeight);
    this.wrapper.node().offsetHeight;
    this.wrapper.classed(css.noTransition, false);
  },

  //search listener
  _enableSearch: function _enableSearch() {
    var _this = this;

    var input = this.wrapper.select("." + css.search);

    //it forms the array of possible queries
    var getMatches = function getMatches(value) {
      var matches = {
        _id: "root",
        children: []
      };

      //translation integration
      var translationMatch = function translationMatch(value, data, i) {

        var translate = data[i].name;
        if (!translate && _this.translator) {
          var t1 = _this.translator("indicator" + "/" + data[i][_this.OPTIONS.SEARCH_PROPERTY] + "/" + _this._targetModel._type);
          translate = t1 || _this.translator("indicator/" + data[i][_this.OPTIONS.SEARCH_PROPERTY]);
        }
        return translate && translate.toLowerCase().indexOf(value.toLowerCase()) >= 0;
      };

      var matching = function matching(data) {
        var SUBMENUS = _this.OPTIONS.SUBMENUS;
        for (var i = 0; i < data.length; i++) {
          var match = false;
          match = translationMatch(value, data, i);
          if (match) {
            matches.children.push(data[i]);
          }
          if (!match && data[i][SUBMENUS]) {
            matching(data[i][SUBMENUS]);
          }
        }
      };
      matching(_this.dataFiltered.children);

      matches.children = utils.unique(matches.children, function (child) {
        return child.id;
      });
      return matches;
    };

    var searchValueNonEmpty = false;

    var searchIt = utils.debounce(function () {
      var value = input.node().value;

      //Protection from unwanted IE11 input events.
      //IE11 triggers an 'input' event when 'placeholder' attr is set to input element and
      //on 'focusin' and on 'focusout', if nothing has been entered into the input.
      if (!searchValueNonEmpty && value == "") return;
      searchValueNonEmpty = value != "";

      if (value.length >= _this.OPTIONS.SEARCH_MIN_STR) {
        _this.redraw(getMatches(value), true);
      } else {
        _this.redraw();
      }
    }, 250);

    input.on("input", searchIt);
  },
  _selectIndicator: function _selectIndicator(value) {
    this._callback(this._targetProp, value);
    this.toggle();
  },


  //function is redrawing data and built structure
  redraw: function redraw(data, useDataFiltered) {
    var _this = this;

    var isHook = _this._targetModel.isHook();

    var dataFiltered = void 0,
        allowedIDs = void 0;

    var indicatorsDB = {};
    utils.forEach(this.model.marker._root._data, function (m) {
      if (m._type === "data") utils.deepExtend(indicatorsDB, m.getConceptprops());
    });

    var targetModelType = _this._targetModel._type;

    if (useDataFiltered) {
      dataFiltered = data;
    } else {
      if (data == null) data = this._indicatorsTree;

      if (isHook) {
        allowedIDs = utils.keys(indicatorsDB).filter(function (f) {
          //check if indicator is denied to show with allow->names->!indicator
          if (_this._targetModel.allow && _this._targetModel.allow.names) {
            if (_this._targetModel.allow.names.indexOf("!" + f) != -1) return false;
            if (_this._targetModel.allow.names.indexOf(f) != -1) return true;
            if (_this._targetModel.allow.namesOnlyThese) return false;
          }
          //keep indicator if nothing is specified in tool properties
          if (!_this._targetModel.allow || !_this._targetModel.allow.scales) return true;
          //keep indicator if any scale is allowed in tool properties
          if (_this._targetModel.allow.scales[0] == "*") return true;

          // if no scales defined, all are allowed
          if (!indicatorsDB[f].scales) return true;

          //check if there is an intersection between the allowed tool scale types and the ones of indicator
          for (var i = indicatorsDB[f].scales.length - 1; i >= 0; i--) {
            if (_this._targetModel.allow.scales.indexOf(indicatorsDB[f].scales[i]) > -1) return true;
          }

          return false;
        });
        dataFiltered = utils.pruneTree(data, function (f) {
          return allowedIDs.indexOf(f.id) > -1;
        });
      } else if (_this._targetModel instanceof _marker2.default) {
        allowedIDs = data.children.map(function (child) {
          return child.id;
        });
        dataFiltered = utils.pruneTree(data, function (f) {
          return f.type == "space";
        });
      } else {
        allowedIDs = utils.keys(indicatorsDB);
        dataFiltered = utils.pruneTree(data, function (f) {
          return allowedIDs.indexOf(f.id) > -1;
        });
      }

      this.dataFiltered = dataFiltered;
    }

    this.wrapper.select("ul").remove();

    var title = "";
    if (this._title || this._title === "") {
      title = this._title;
    } else {
      title = this.translator(_this._targetModel instanceof _marker2.default ? _this._targetModel._root._name + "/" + _this._targetModel._name : "buttons/" + (isHook ? _this._targetModel._name : targetModelType + "/" + _this._targetProp));
    }
    this.element.select("." + css.title).select("span").text(title);

    this.element.select("." + css.search).attr("placeholder", this.translator("placeholder/search") + "...");

    this._maxChildCount = 0;

    var noDescription = _this.translator("hints/nodescr");

    function createSubmeny(select, data, toplevel) {
      if (!data.children) return;
      _this._maxChildCount = Math.max(_this._maxChildCount, data.children.length);
      var _select = toplevel ? select : select.append("div").classed(css.list_outer, true);

      var li = _select.append("ul").classed(css.list, !toplevel).classed(css.list_top_level, toplevel).classed("vzb-dialog-scrollable", true).selectAll("li").data(data.children, function (d) {
        return d["id"];
      }).enter().append("li");

      li.append("span").classed(css.list_item_label, true)
      // .attr("info", function(d) {
      //   return d.id;
      // })
      .attr("children", function (d) {
        return d.children ? "true" : null;
      }).attr("type", function (d) {
        return d.type ? d.type : null;
      }).on("click", function (d) {
        var view = d3.select(this);
        //only for leaf nodes
        if (view.attr("children")) return;
        d3.event.stopPropagation();
        _this._selectIndicator({ concept: d.id, key: d.key, dataSource: d.dataSource, use: d.use });
      }).append("span").text(function (d) {
        //Let the indicator "_default" in tree menu be translated differnetly for every hook type
        var translated = d.id === "_default" ? _this.translator("indicator/_default/" + targetModelType) : d.name_catalog || d.name || d.id;
        if (!translated && translated !== "") utils.warn("translation missing: NAME of " + d.id);
        return translated || "";
      });

      li.classed(css.list_item, true).classed(css.hasChild, function (d) {
        return d["children"];
      }).classed(css.isSpecial, function (d) {
        return d["special"];
      }).each(function (d) {
        var view = d3.select(this);

        //deepLeaf
        if (!d.children) {
          if (d.id === "_default") {
            d.name = _this.translator("indicator/_default/" + targetModelType);
            d.description = _this.translator("description/_default/" + targetModelType);
          }
          if (!d.description) d.description = noDescription;
          d.translateContributionText = _this.translator("dialogs/helptranslate");
          var deepLeaf = view.append("div").attr("class", css.menuHorizontal + " " + css.list_outer + " " + css.list_item_leaf);
          deepLeaf.on("click", function (d) {
            _this._selectIndicator({ concept: d.id, key: d.key, dataSource: d.dataSource, use: d.use });
          });
        }

        if (d.id == _this._targetModel[_this._targetProp]) {
          var parent = void 0;
          if (_this.selectedNode && toplevel) {
            parent = _this.selectedNode.parentNode;
            d3.select(_this.selectedNode).select("." + css.list_item_leaf).classed("active", false);
            while (!utils.hasClass(parent, css.list_top_level)) {
              if (parent.tagName == "UL") {
                d3.select(parent.parentNode).classed("active", false);
              }
              parent = parent.parentNode;
            }
          }
          if (!_this.selectedNode || toplevel) {
            parent = this.parentNode;
            d3.select(this).classed("item-active", true).select("." + css.list_item_leaf).classed("active", true);
            while (!utils.hasClass(parent, css.list_top_level)) {
              if (parent.tagName == "UL") {
                d3.select(parent.parentNode).classed("active", true);
              }
              if (parent.tagName == "LI") {
                d3.select(parent).classed("item-active", true);
              }
              parent = parent.parentNode;
            }
            _this.selectedNode = this;
          }
        }
        createSubmeny(view, d);
      });
    }

    if (this.OPTIONS.IS_MOBILE) {
      this.OPTIONS.MENU_DIRECTION = MENU_VERTICAL;
    } else {
      this.OPTIONS.MENU_DIRECTION = MENU_HORIZONTAL;
    }
    this.selectedNode = null;
    createSubmeny(this.wrapper, dataFiltered, true);
    this.menuEntity = new Menu(null, this.wrapper.selectAll("." + css.list_top_level), this.OPTIONS);
    if (this.menuEntity) this.menuEntity.setDirection(this.OPTIONS.MENU_DIRECTION);
    if (this.menuEntity) this.menuEntity.setWidth(this.activeProfile.col_width, true, true);

    this.setHorizontalMenuHeight();

    if (!useDataFiltered) {
      var pointer = "_default";
      if (allowedIDs.indexOf(this._targetModel[_this._targetProp]) > -1) pointer = this._targetModel[_this._targetProp];
      if (!indicatorsDB[pointer]) utils.error("Concept properties of " + pointer + " are missing from the set, or the set is empty. Put a breakpoint here and check what you have in indicatorsDB");

      if (!indicatorsDB[pointer].scales) {
        this.element.select("." + css.scaletypes).classed(css.hidden, true);
        return true;
      }
      var scaleTypesData = isHook ? indicatorsDB[pointer].scales.filter(function (f) {
        if (!_this._targetModel.allow || !_this._targetModel.allow.scales) return true;
        if (_this._targetModel.allow.scales[0] == "*") return true;
        return _this._targetModel.allow.scales.indexOf(f) > -1;
      }) : [];
      if (scaleTypesData.length == 0) {
        this.element.select("." + css.scaletypes).classed(css.hidden, true);
      } else {

        var scaleTypes = this.element.select("." + css.scaletypes).classed(css.hidden, false).selectAll("span").data(scaleTypesData, function (d) {
          return d;
        });

        scaleTypes.exit().remove();

        scaleTypes = scaleTypes.enter().append("span").on("click", function (d) {
          d3.event.stopPropagation();
          _this._setModel("scaleType", d);
        }).merge(scaleTypes);

        var mdlScaleType = _this._targetModel.scaleType;

        scaleTypes.classed(css.scaletypesDisabled, scaleTypesData.length < 2 || _this._scaletypeSelectorDisabled).classed(css.scaletypesActive, function (d) {
          return (d == mdlScaleType || d === "log" && mdlScaleType === "genericLog") && scaleTypesData.length > 1;
        }).text(function (d) {
          return _this.translator("scaletype/" + d);
        });
      }
    }

    return this;
  },
  updateView: function updateView() {
    var _this = this;

    if (!this._targetModel) return;

    this.wrapperOuter.classed(css.absPosVert, this._top);
    this.wrapperOuter.classed(css.alignYt, this._alignY === "top");
    this.wrapperOuter.classed(css.alignYb, this._alignY === "bottom");
    this.wrapperOuter.classed(css.absPosHoriz, this._left);
    this.wrapperOuter.classed(css.alignXl, this._alignX === "left");
    this.wrapperOuter.classed(css.alignXr, this._alignX === "right");

    var setModel = this._setModel.bind(this);
    this.callback(setModel).redraw();

    if (this._ready && this._showWhenReady) this.setHiddenOrVisible(false).showWhenReady(false);

    this.wrapper.select("." + css.search).node().value = "";

    return this;
  },
  focusSearch: function focusSearch() {
    var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var searchInput = this.wrapper.select("." + css.search).node();

    if (focus) {
      searchInput.focus();
    } else {
      searchInput.blur();
    }
  },
  _setModel: function _setModel(what, value) {

    var mdl = this._targetModel;
    if (what == "which") mdl.setWhich(value);
    if (what == "scaleType") mdl.setScaleType(value);
    if (what == "space") mdl.setSpace(value.concept.split(","));
  }
});

exports.default = TreeMenu;

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./_dialog.js": 12,
	"./about/about.js": 171,
	"./axes/axes.js": 172,
	"./colors/colors.js": 174,
	"./dialogs.js": 175,
	"./find/find.js": 176,
	"./find/show.js": 115,
	"./grouping/grouping.js": 177,
	"./label/label.js": 178,
	"./moreoptions/moreoptions.js": 179,
	"./opacity/opacity.js": 180,
	"./presentation/presentation.js": 181,
	"./side/side.js": 182,
	"./size/size.js": 183,
	"./speed/speed.js": 184,
	"./stack/stack.js": 185,
	"./technical/technical.js": 187,
	"./timedisplay/timedisplay.js": 188,
	"./zoom/zoom.js": 190
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 432;

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./d3.axisWithLabelPicker.js": 114,
	"./d3.collisionResolver.js": 434,
	"./d3.colorPicker.js": 169,
	"./d3.dynamicBackground.js": 189,
	"./d3.genericLogScale.js": 162,
	"./d3.geoProjection.js": 435,
	"./d3.touchEvents.js": 163,
	"./labels.js": 436,
	"./requireAll.js": 108,
	"./svgexport.js": 438,
	"./textEllipsis.js": 439,
	"./topojson.js": 440
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 433;

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = collisionResolver;
//d3.svg.collisionResolver

function collisionResolver() {
  return function collision_resolver() {
    var DURATION = 300;
    var labelHeight = 0;
    // MAINN FUNCTION. RUN COLLISION RESOLVER ON A GROUP g
    function resolver(g) {
      if (selector == null) {
        console.warn("D3 collision resolver stopped: missing a CSS slector");
        return;
      }
      if (height == null) {
        console.warn("D3 collision resolver stopped: missing height of the canvas");
        return;
      }
      if (value == null) {
        console.warn("D3 collision resolver stopped: missing pointer within data objects. Example: value = 'valueY' ");
        return;
      }
      if (KEY == null) {
        console.warn("D3 collision resolver stopped: missing a key for data. Example: key = 'geo' ");
        return;
      }
      labelHeight = g.node().getBBox().height * 0.8;
      //actually reposition the labels
      var data = g.filter(function (d) {
        return filter(d, time);
      }).sort(function (x, y) {
        return d3.ascending(x.valueY, y.valueY);
      }).data();
      var keys = {};
      for (var i = 0; i < data.length - 1; i++) {
        var first = data[i];
        var second = data[i + 1];
        if (!first.shiftY) first.shiftY = 0;
        second.shiftY = 0;
        if (second.valueY - first.valueY - first.shiftY >= labelHeight) continue;
        var upperAvailable = 0;
        // calculate available space above first element
        if (first.valueY > labelHeight) {
          if (i == 0) {
            upperAvailable = Math.min(labelHeight, first.valueY);
          } else if (first.valueY - data[i - 1].valueY + data[i - 1].shiftY > labelHeight) {
            upperAvailable = Math.min(labelHeight, first.valueY - data[i - 1].valueY + data[i - 1].shiftY);
          }
        }
        first.upperAvailable = upperAvailable;
        var underAvailable = 0;
        // calculate available space under second element
        if (second.valueY < height) {
          if (i == data.length - 2) {
            underAvailable = Math.min(labelHeight, height - second.valueY);
          } else if (data[i + 2].valueY - second.valueY > labelHeight) {
            underAvailable = Math.min(labelHeight, data[i + 2].valueY - second.valueY);
          }
        }
        second.underAvailable = underAvailable;
        var neededSpace = labelHeight - (second.valueY - first.valueY - first.shiftY);
        keys[first[KEY]] = {};
        keys[second[KEY]] = {};
        if (upperAvailable >= neededSpace / 2 && underAvailable >= neededSpace / 2) {
          first.shiftY = -neededSpace / 2;
          second.shiftY = neededSpace / 2;
        } else if (upperAvailable >= neededSpace / 2) {
          second.shiftY = underAvailable;
          first.shiftY = -Math.min(upperAvailable, neededSpace - underAvailable);
        } else if (underAvailable >= neededSpace / 2) {
          first.shiftY -= upperAvailable;
          second.shiftY = Math.min(underAvailable, neededSpace - upperAvailable);
        } else {
          first.shiftY = -upperAvailable;
          second.shiftY = underAvailable;
        }
        keys[first[KEY]].valueY = first.valueY + first.shiftY;
        keys[second[KEY]].valueY = second.valueY + second.shiftY;
      }
      g.each(function (d, i) {
        if (keys[d[KEY]] && keys[d[KEY]].valueY) {
          d3.select(this).selectAll(selector).transition().duration(DURATION).attr("transform", "translate(0," + keys[d[KEY]].valueY + ")");
        }
      });
    }

    // GETTERS AND SETTERS

    var selector = null;
    resolver.selector = function (arg) {
      if (!arguments.length) return selector;
      selector = arg;
      return resolver;
    };
    var height = null;
    resolver.height = function (arg) {
      if (!arguments.length) return height;
      height = arg;
      return resolver;
    };
    var scale = d3.scaleLinear().domain([0, 1]).range([0, 1]);
    resolver.scale = function (arg) {
      if (!arguments.length) return scale;
      scale = arg;
      return resolver;
    };
    var value = null;
    resolver.value = function (arg) {
      if (!arguments.length) return value;
      value = arg;
      return resolver;
    };
    var time = null;
    resolver.time = function (arg) {
      if (!arguments.length) return time;
      time = arg;
      return resolver;
    };
    var filter = function filter() {
      return true;
    };
    resolver.filter = function (arg) {
      if (!arguments.length) return filter;
      filter = arg;
      return resolver;
    };
    var fixed = null;
    resolver.fixed = function (arg) {
      if (!arguments.length) return fixed;
      fixed = arg;
      return resolver;
    };
    var handleResult = null;
    resolver.handleResult = function (arg) {
      if (!arguments.length) return handleResult;
      handleResult = arg;
      return resolver;
    };
    var KEY = null;
    resolver.KEY = function (arg) {
      if (!arguments.length) return KEY;
      KEY = arg;
      return resolver;
    };
    return resolver;
  }();
}

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  d3.geoProject = function (object, projection) {
    var stream = projection.stream;
    if (!stream) throw new Error("not yet supported");
    return (object && d3_geo_projectObjectType.hasOwnProperty(object.type) ? d3_geo_projectObjectType[object.type] : d3_geo_projectGeometry)(object, stream);
  };
  function d3_geo_projectFeature(object, stream) {
    return {
      type: "Feature",
      id: object.id,
      properties: object.properties,
      geometry: d3_geo_projectGeometry(object.geometry, stream)
    };
  }
  function d3_geo_projectGeometry(geometry, stream) {
    if (!geometry) return null;
    if (geometry.type === "GeometryCollection") return {
      type: "GeometryCollection",
      geometries: object.geometries.map(function (geometry) {
        return d3_geo_projectGeometry(geometry, stream);
      })
    };
    if (!d3_geo_projectGeometryType.hasOwnProperty(geometry.type)) return null;
    var sink = d3_geo_projectGeometryType[geometry.type];
    d3.geoUstream(geometry, stream(sink));
    return sink.result();
  }
  var d3_geo_projectObjectType = {
    Feature: d3_geo_projectFeature,
    FeatureCollection: function FeatureCollection(object, stream) {
      return {
        type: "FeatureCollection",
        features: object.features.map(function (feature) {
          return d3_geo_projectFeature(feature, stream);
        })
      };
    }
  };
  var d3_geo_projectPoints = [],
      d3_geo_projectLines = [];
  var d3_geo_projectPoint = {
    point: function point(x, y) {
      d3_geo_projectPoints.push([x, y]);
    },
    result: function result() {
      var result = !d3_geo_projectPoints.length ? null : d3_geo_projectPoints.length < 2 ? {
        type: "Point",
        coordinates: d3_geo_projectPoints[0]
      } : {
        type: "MultiPoint",
        coordinates: d3_geo_projectPoints
      };
      d3_geo_projectPoints = [];
      return result;
    }
  };
  var d3_geo_projectLine = {
    lineStart: d3_geo_projectNoop,
    point: function point(x, y) {
      d3_geo_projectPoints.push([x, y]);
    },
    lineEnd: function lineEnd() {
      if (d3_geo_projectPoints.length) d3_geo_projectLines.push(d3_geo_projectPoints), d3_geo_projectPoints = [];
    },
    result: function result() {
      var result = !d3_geo_projectLines.length ? null : d3_geo_projectLines.length < 2 ? {
        type: "LineString",
        coordinates: d3_geo_projectLines[0]
      } : {
        type: "MultiLineString",
        coordinates: d3_geo_projectLines
      };
      d3_geo_projectLines = [];
      return result;
    }
  };
  var d3_geo_projectPolygon = {
    polygonStart: d3_geo_projectNoop,
    lineStart: d3_geo_projectNoop,
    point: function point(x, y) {
      d3_geo_projectPoints.push([x, y]);
    },
    lineEnd: function lineEnd() {
      var n = d3_geo_projectPoints.length;
      if (n) {
        do {
          d3_geo_projectPoints.push(d3_geo_projectPoints[0].slice());
        } while (++n < 4);
        d3_geo_projectLines.push(d3_geo_projectPoints), d3_geo_projectPoints = [];
      }
    },
    polygonEnd: d3_geo_projectNoop,
    result: function result() {
      if (!d3_geo_projectLines.length) return null;
      var polygons = [],
          holes = [];
      d3_geo_projectLines.forEach(function (ring) {
        if (d3_geo_projectClockwise(ring)) polygons.push([ring]);else holes.push(ring);
      });
      holes.forEach(function (hole) {
        var point = hole[0];
        polygons.some(function (polygon) {
          if (d3_geo_projectContains(polygon[0], point)) {
            polygon.push(hole);
            return true;
          }
          return false;
        }) || polygons.push([hole]);
      });
      d3_geo_projectLines = [];
      return !polygons.length ? null : polygons.length > 1 ? {
        type: "MultiPolygon",
        coordinates: polygons
      } : {
        type: "Polygon",
        coordinates: polygons[0]
      };
    }
  };
  var d3_geo_projectGeometryType = {
    Point: d3_geo_projectPoint,
    MultiPoint: d3_geo_projectPoint,
    LineString: d3_geo_projectLine,
    MultiLineString: d3_geo_projectLine,
    Polygon: d3_geo_projectPolygon,
    MultiPolygon: d3_geo_projectPolygon,
    Sphere: d3_geo_projectPolygon
  };
  function d3_geo_projectNoop() {}
  function d3_geo_projectClockwise(ring) {
    if ((n = ring.length) < 4) return false;
    var i = 0,
        n,
        area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
    while (++i < n) {
      area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
    }return area <= 0;
  }
  function d3_geo_projectContains(ring, point) {
    var x = point[0],
        y = point[1],
        contains = false;
    for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      var pi = ring[i],
          xi = pi[0],
          yi = pi[1],
          pj = ring[j],
          xj = pj[0],
          yj = pj[1];
      if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;
    }
    return contains;
  }
  var ε = 1e-6,
      ε2 = ε * ε,
      π = Math.PI,
      halfπ = π / 2,
      sqrtπ = Math.sqrt(π),
      radians = π / 180,
      degrees = 180 / π;
  function sinci(x) {
    return x ? x / Math.sin(x) : 1;
  }
  function sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function asqrt(x) {
    return x > 0 ? Math.sqrt(x) : 0;
  }
  var projection = d3.geoProjection,
      projectionMutator = d3.geoProjectionMutator;
  d3.geoInterrupt = function (project) {
    var lobes = [[[[-π, 0], [0, halfπ], [π, 0]]], [[[-π, 0], [0, -halfπ], [π, 0]]]];
    var bounds;
    function forward(λ, φ) {
      var sign = φ < 0 ? -1 : +1,
          hemilobes = lobes[+(φ < 0)];
      for (var i = 0, n = hemilobes.length - 1; i < n && λ > hemilobes[i][2][0]; ++i) {}
      var coordinates = project(λ - hemilobes[i][1][0], φ);
      coordinates[0] += project(hemilobes[i][1][0], sign * φ > sign * hemilobes[i][0][1] ? hemilobes[i][0][1] : φ)[0];
      return coordinates;
    }
    function reset() {
      bounds = lobes.map(function (hemilobes) {
        return hemilobes.map(function (lobe) {
          var x0 = project(lobe[0][0], lobe[0][1])[0],
              x1 = project(lobe[2][0], lobe[2][1])[0],
              y0 = project(lobe[1][0], lobe[0][1])[1],
              y1 = project(lobe[1][0], lobe[1][1])[1],
              t;
          if (y0 > y1) t = y0, y0 = y1, y1 = t;
          return [[x0, y0], [x1, y1]];
        });
      });
    }
    if (project.invert) forward.invert = function (x, y) {
      var hemibounds = bounds[+(y < 0)],
          hemilobes = lobes[+(y < 0)];
      for (var i = 0, n = hemibounds.length; i < n; ++i) {
        var b = hemibounds[i];
        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {
          var coordinates = project.invert(x - project(hemilobes[i][1][0], 0)[0], y);
          coordinates[0] += hemilobes[i][1][0];
          return pointEqual(forward(coordinates[0], coordinates[1]), [x, y]) ? coordinates : null;
        }
      }
    };
    var projection = d3.geoProjection(forward),
        stream_ = projection.stream;
    projection.stream = function (stream) {
      var rotate = projection.rotate(),
          rotateStream = stream_(stream),
          sphereStream = (projection.rotate([0, 0]), stream_(stream));
      projection.rotate(rotate);
      rotateStream.sphere = function () {
        d3.geoStream(sphere(), sphereStream);
      };
      return rotateStream;
    };
    projection.lobes = function (_) {
      if (!arguments.length) return lobes.map(function (lobes) {
        return lobes.map(function (lobe) {
          return [[lobe[0][0] * 180 / π, lobe[0][1] * 180 / π], [lobe[1][0] * 180 / π, lobe[1][1] * 180 / π], [lobe[2][0] * 180 / π, lobe[2][1] * 180 / π]];
        });
      });
      lobes = _.map(function (lobes) {
        return lobes.map(function (lobe) {
          return [[lobe[0][0] * π / 180, lobe[0][1] * π / 180], [lobe[1][0] * π / 180, lobe[1][1] * π / 180], [lobe[2][0] * π / 180, lobe[2][1] * π / 180]];
        });
      });
      reset();
      return projection;
    };
    function sphere() {
      var ε = 1e-6,
          coordinates = [];
      for (var i = 0, n = lobes[0].length; i < n; ++i) {
        var lobe = lobes[0][i],
            λ0 = lobe[0][0] * 180 / π,
            φ0 = lobe[0][1] * 180 / π,
            φ1 = lobe[1][1] * 180 / π,
            λ2 = lobe[2][0] * 180 / π,
            φ2 = lobe[2][1] * 180 / π;
        coordinates.push(resample([[λ0 + ε, φ0 + ε], [λ0 + ε, φ1 - ε], [λ2 - ε, φ1 - ε], [λ2 - ε, φ2 + ε]], 30));
      }
      for (var i = lobes[1].length - 1; i >= 0; --i) {
        var lobe = lobes[1][i],
            λ0 = lobe[0][0] * 180 / π,
            φ0 = lobe[0][1] * 180 / π,
            φ1 = lobe[1][1] * 180 / π,
            λ2 = lobe[2][0] * 180 / π,
            φ2 = lobe[2][1] * 180 / π;
        coordinates.push(resample([[λ2 - ε, φ2 - ε], [λ2 - ε, φ1 + ε], [λ0 + ε, φ1 + ε], [λ0 + ε, φ0 - ε]], 30));
      }
      return {
        type: "Polygon",
        coordinates: [d3.merge(coordinates)]
      };
    }
    function resample(coordinates, m) {
      var i = -1,
          n = coordinates.length,
          p0 = coordinates[0],
          p1,
          dx,
          dy,
          resampled = [];
      while (++i < n) {
        p1 = coordinates[i];
        dx = (p1[0] - p0[0]) / m;
        dy = (p1[1] - p0[1]) / m;
        for (var j = 0; j < m; ++j) {
          resampled.push([p0[0] + j * dx, p0[1] + j * dy]);
        }p0 = p1;
      }
      resampled.push(p1);
      return resampled;
    }
    function pointEqual(a, b) {
      return Math.abs(a[0] - b[0]) < ε && Math.abs(a[1] - b[1]) < ε;
    }
    return projection;
  };
  function airy(β) {
    var tanβ_2 = Math.tan(.5 * β),
        B = 2 * Math.log(Math.cos(.5 * β)) / (tanβ_2 * tanβ_2);
    function forward(λ, φ) {
      var cosλ = Math.cos(λ),
          cosφ = Math.cos(φ),
          sinφ = Math.sin(φ),
          cosz = cosφ * cosλ,
          K = -((1 - cosz ? Math.log(.5 * (1 + cosz)) / (1 - cosz) : -.5) + B / (1 + cosz));
      return [K * cosφ * Math.sin(λ), K * sinφ];
    }
    forward.invert = function (x, y) {
      var ρ = Math.sqrt(x * x + y * y),
          z = β * -.5,
          i = 50,
          δ;
      if (!ρ) return [0, 0];
      do {
        var z_2 = .5 * z,
            cosz_2 = Math.cos(z_2),
            sinz_2 = Math.sin(z_2),
            tanz_2 = Math.tan(z_2),
            lnsecz_2 = Math.log(1 / cosz_2);
        z -= δ = (2 / tanz_2 * lnsecz_2 - B * tanz_2 - ρ) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - B / (2 * cosz_2 * cosz_2));
      } while (Math.abs(δ) > ε && --i > 0);
      var sinz = Math.sin(z);
      return [Math.atan2(x * sinz, ρ * Math.cos(z)), asin(y * sinz / ρ)];
    };
    return forward;
  }
  function airyProjection() {
    var β = halfπ,
        m = projectionMutator(airy),
        p = m(β);
    p.radius = function (_) {
      if (!arguments.length) return β / π * 180;
      return m(β = _ * π / 180);
    };
    return p;
  }
  (d3.geoAiry = airyProjection).raw = airy;
  function aitoff(λ, φ) {
    var cosφ = Math.cos(φ),
        sinciα = sinci(acos(cosφ * Math.cos(λ /= 2)));
    return [2 * cosφ * Math.sin(λ) * sinciα, Math.sin(φ) * sinciα];
  }
  aitoff.invert = function (x, y) {
    if (x * x + 4 * y * y > π * π + ε) return;
    var λ = x,
        φ = y,
        i = 25;
    do {
      var sinλ = Math.sin(λ),
          sinλ_2 = Math.sin(λ / 2),
          cosλ_2 = Math.cos(λ / 2),
          sinφ = Math.sin(φ),
          cosφ = Math.cos(φ),
          sin_2φ = Math.sin(2 * φ),
          sin2φ = sinφ * sinφ,
          cos2φ = cosφ * cosφ,
          sin2λ_2 = sinλ_2 * sinλ_2,
          C = 1 - cos2φ * cosλ_2 * cosλ_2,
          E = C ? acos(cosφ * cosλ_2) * Math.sqrt(F = 1 / C) : F = 0,
          F,
          fx = 2 * E * cosφ * sinλ_2 - x,
          fy = E * sinφ - y,
          δxδλ = F * (cos2φ * sin2λ_2 + E * cosφ * cosλ_2 * sin2φ),
          δxδφ = F * (.5 * sinλ * sin_2φ - E * 2 * sinφ * sinλ_2),
          δyδλ = F * .25 * (sin_2φ * sinλ_2 - E * sinφ * cos2φ * sinλ),
          δyδφ = F * (sin2φ * cosλ_2 + E * sin2λ_2 * cosφ),
          denominator = δxδφ * δyδλ - δyδφ * δxδλ;
      if (!denominator) break;
      var δλ = (fy * δxδφ - fx * δyδφ) / denominator,
          δφ = (fx * δyδλ - fy * δxδλ) / denominator;
      λ -= δλ, φ -= δφ;
    } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
    return [λ, φ];
  };
  (d3.geoAitoff = function () {
    return projection(aitoff);
  }).raw = aitoff;
  function armadillo(φ0) {
    var sinφ0 = Math.sin(φ0),
        cosφ0 = Math.cos(φ0),
        sφ0 = φ0 > 0 ? 1 : -1,
        tanφ0 = Math.tan(sφ0 * φ0),
        k = (1 + sinφ0 - cosφ0) / 2;
    function forward(λ, φ) {
      var cosφ = Math.cos(φ),
          cosλ = Math.cos(λ /= 2);
      return [(1 + cosφ) * Math.sin(λ), (sφ0 * φ > -Math.atan2(cosλ, tanφ0) - .001 ? 0 : -sφ0 * 10) + k + Math.sin(φ) * cosφ0 - (1 + cosφ) * sinφ0 * cosλ];
    }
    forward.invert = function (x, y) {
      var λ = 0,
          φ = 0,
          i = 50;
      do {
        var cosλ = Math.cos(λ),
            sinλ = Math.sin(λ),
            cosφ = Math.cos(φ),
            sinφ = Math.sin(φ),
            A = 1 + cosφ,
            fx = A * sinλ - x,
            fy = k + sinφ * cosφ0 - A * sinφ0 * cosλ - y,
            δxδλ = .5 * A * cosλ,
            δxδφ = -sinλ * sinφ,
            δyδλ = .5 * sinφ0 * A * sinλ,
            δyδφ = cosφ0 * cosφ + sinφ0 * cosλ * sinφ,
            denominator = δxδφ * δyδλ - δyδφ * δxδλ,
            δλ = .5 * (fy * δxδφ - fx * δyδφ) / denominator,
            δφ = (fx * δyδλ - fy * δxδλ) / denominator;
        λ -= δλ, φ -= δφ;
      } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
      return sφ0 * φ > -Math.atan2(Math.cos(λ), tanφ0) - .001 ? [λ * 2, φ] : null;
    };
    return forward;
  }
  function armadilloProjection() {
    var φ0 = π / 9,
        sφ0 = φ0 > 0 ? 1 : -1,
        tanφ0 = Math.tan(sφ0 * φ0),
        m = projectionMutator(armadillo),
        p = m(φ0),
        stream_ = p.stream;
    p.parallel = function (_) {
      if (!arguments.length) return φ0 / π * 180;
      tanφ0 = Math.tan((sφ0 = (φ0 = _ * π / 180) > 0 ? 1 : -1) * φ0);
      return m(φ0);
    };
    p.stream = function (stream) {
      var rotate = p.rotate(),
          rotateStream = stream_(stream),
          sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        sphereStream.polygonStart(), sphereStream.lineStart();
        for (var λ = sφ0 * -180; sφ0 * λ < 180; λ += sφ0 * 90) {
          sphereStream.point(λ, sφ0 * 90);
        }while (sφ0 * (λ -= φ0) >= -180) {
          sphereStream.point(λ, sφ0 * -Math.atan2(Math.cos(λ * radians / 2), tanφ0) * degrees);
        }
        sphereStream.lineEnd(), sphereStream.polygonEnd();
      };
      return rotateStream;
    };
    return p;
  }
  (d3.geoArmadillo = armadilloProjection).raw = armadillo;
  function tanh(x) {
    x = Math.exp(2 * x);
    return (x - 1) / (x + 1);
  }
  function sinh(x) {
    return .5 * (Math.exp(x) - Math.exp(-x));
  }
  function cosh(x) {
    return .5 * (Math.exp(x) + Math.exp(-x));
  }
  function arsinh(x) {
    return Math.log(x + asqrt(x * x + 1));
  }
  function arcosh(x) {
    return Math.log(x + asqrt(x * x - 1));
  }
  function august(λ, φ) {
    var tanφ = Math.tan(φ / 2),
        k = asqrt(1 - tanφ * tanφ),
        c = 1 + k * Math.cos(λ /= 2),
        x = Math.sin(λ) * k / c,
        y = tanφ / c,
        x2 = x * x,
        y2 = y * y;
    return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];
  }
  august.invert = function (x, y) {
    x *= 3 / 8, y *= 3 / 8;
    if (!x && Math.abs(y) > 1) return null;
    var x2 = x * x,
        y2 = y * y,
        s = 1 + x2 + y2,
        sin3η = Math.sqrt(.5 * (s - Math.sqrt(s * s - 4 * y * y))),
        η = asin(sin3η) / 3,
        ξ = sin3η ? arcosh(Math.abs(y / sin3η)) / 3 : arsinh(Math.abs(x)) / 3,
        cosη = Math.cos(η),
        coshξ = cosh(ξ),
        d = coshξ * coshξ - cosη * cosη;
    return [sgn(x) * 2 * Math.atan2(sinh(ξ) * cosη, .25 - d), sgn(y) * 2 * Math.atan2(coshξ * Math.sin(η), .25 + d)];
  };
  (d3.geoAugust = function () {
    return projection(august);
  }).raw = august;
  var bakerφ = Math.log(1 + Math.SQRT2);
  function baker(λ, φ) {
    var φ0 = Math.abs(φ);
    return φ0 < π / 4 ? [λ, Math.log(Math.tan(π / 4 + φ / 2))] : [λ * Math.cos(φ0) * (2 * Math.SQRT2 - 1 / Math.sin(φ0)), sgn(φ) * (2 * Math.SQRT2 * (φ0 - π / 4) - Math.log(Math.tan(φ0 / 2)))];
  }
  baker.invert = function (x, y) {
    if ((y0 = Math.abs(y)) < bakerφ) return [x, 2 * Math.atan(Math.exp(y)) - halfπ];
    var sqrt8 = Math.sqrt(8),
        φ = π / 4,
        i = 25,
        δ,
        y0;
    do {
      var cosφ_2 = Math.cos(φ / 2),
          tanφ_2 = Math.tan(φ / 2);
      φ -= δ = (sqrt8 * (φ - π / 4) - Math.log(tanφ_2) - y0) / (sqrt8 - .5 * cosφ_2 * cosφ_2 / tanφ_2);
    } while (Math.abs(δ) > ε2 && --i > 0);
    return [x / (Math.cos(φ) * (sqrt8 - 1 / Math.sin(φ))), sgn(y) * φ];
  };
  (d3.geoBaker = function () {
    return projection(baker);
  }).raw = baker;
  var berghausAzimuthalEquidistant = d3.geoAzimuthalEquidistant.raw;
  function berghaus(n) {
    var k = 2 * π / n;
    function forward(λ, φ) {
      var p = berghausAzimuthalEquidistant(λ, φ);
      if (Math.abs(λ) > halfπ) {
        var θ = Math.atan2(p[1], p[0]),
            r = Math.sqrt(p[0] * p[0] + p[1] * p[1]),
            θ0 = k * Math.round((θ - halfπ) / k) + halfπ,
            α = Math.atan2(Math.sin(θ -= θ0), 2 - Math.cos(θ));
        θ = θ0 + asin(π / r * Math.sin(α)) - α;
        p[0] = r * Math.cos(θ);
        p[1] = r * Math.sin(θ);
      }
      return p;
    }
    forward.invert = function (x, y) {
      var r = Math.sqrt(x * x + y * y);
      if (r > halfπ) {
        var θ = Math.atan2(y, x),
            θ0 = k * Math.round((θ - halfπ) / k) + halfπ,
            s = θ > θ0 ? -1 : 1,
            A = r * Math.cos(θ0 - θ),
            cotα = 1 / Math.tan(s * Math.acos((A - π) / Math.sqrt(π * (π - 2 * A) + r * r)));
        θ = θ0 + 2 * Math.atan((cotα + s * Math.sqrt(cotα * cotα - 3)) / 3);
        x = r * Math.cos(θ), y = r * Math.sin(θ);
      }
      return berghausAzimuthalEquidistant.invert(x, y);
    };
    return forward;
  }
  function berghausProjection() {
    var n = 5,
        m = projectionMutator(berghaus),
        p = m(n),
        stream_ = p.stream,
        ε = .01,
        cr = -Math.cos(ε * radians),
        sr = Math.sin(ε * radians);
    p.lobes = function (_) {
      if (!arguments.length) return n;
      return m(n = +_);
    };
    p.stream = function (stream) {
      var rotate = p.rotate(),
          rotateStream = stream_(stream),
          sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        sphereStream.polygonStart(), sphereStream.lineStart();
        for (var i = 0, δ = 360 / n, δ0 = 2 * π / n, φ = 90 - 180 / n, φ0 = halfπ; i < n; ++i, φ -= δ, φ0 -= δ0) {
          sphereStream.point(Math.atan2(sr * Math.cos(φ0), cr) * degrees, asin(sr * Math.sin(φ0)) * degrees);
          if (φ < -90) {
            sphereStream.point(-90, -180 - φ - ε);
            sphereStream.point(-90, -180 - φ + ε);
          } else {
            sphereStream.point(90, φ + ε);
            sphereStream.point(90, φ - ε);
          }
        }
        sphereStream.lineEnd(), sphereStream.polygonEnd();
      };
      return rotateStream;
    };
    return p;
  }
  (d3.geoBerghaus = berghausProjection).raw = berghaus;
  function mollweideBromleyθ(Cp) {
    return function (θ) {
      var Cpsinθ = Cp * Math.sin(θ),
          i = 30,
          δ;
      do {
        θ -= δ = (θ + Math.sin(θ) - Cpsinθ) / (1 + Math.cos(θ));
      } while (Math.abs(δ) > ε && --i > 0);
      return θ / 2;
    };
  }
  function mollweideBromley(Cx, Cy, Cp) {
    var θ = mollweideBromleyθ(Cp);
    function forward(λ, φ) {
      return [Cx * λ * Math.cos(φ = θ(φ)), Cy * Math.sin(φ)];
    }
    forward.invert = function (x, y) {
      var θ = asin(y / Cy);
      return [x / (Cx * Math.cos(θ)), asin((2 * θ + Math.sin(2 * θ)) / Cp)];
    };
    return forward;
  }
  var mollweideθ = mollweideBromleyθ(π),
      mollweide = mollweideBromley(Math.SQRT2 / halfπ, Math.SQRT2, π);
  (d3.geoMollweide = function () {
    return projection(mollweide);
  }).raw = mollweide;
  function boggs(λ, φ) {
    var k = 2.00276,
        θ = mollweideθ(φ);
    return [k * λ / (1 / Math.cos(φ) + 1.11072 / Math.cos(θ)), (φ + Math.SQRT2 * Math.sin(θ)) / k];
  }
  boggs.invert = function (x, y) {
    var k = 2.00276,
        ky = k * y,
        θ = y < 0 ? -π / 4 : π / 4,
        i = 25,
        δ,
        φ;
    do {
      φ = ky - Math.SQRT2 * Math.sin(θ);
      θ -= δ = (Math.sin(2 * θ) + 2 * θ - π * Math.sin(φ)) / (2 * Math.cos(2 * θ) + 2 + π * Math.cos(φ) * Math.SQRT2 * Math.cos(θ));
    } while (Math.abs(δ) > ε && --i > 0);
    φ = ky - Math.SQRT2 * Math.sin(θ);
    return [x * (1 / Math.cos(φ) + 1.11072 / Math.cos(θ)) / k, φ];
  };
  (d3.geoBoggs = function () {
    return projection(boggs);
  }).raw = boggs;
  function parallel1Projection(projectAt) {
    var φ0 = 0,
        m = projectionMutator(projectAt),
        p = m(φ0);
    p.parallel = function (_) {
      if (!arguments.length) return φ0 / π * 180;
      return m(φ0 = _ * π / 180);
    };
    return p;
  }
  function sinusoidal(λ, φ) {
    return [λ * Math.cos(φ), φ];
  }
  sinusoidal.invert = function (x, y) {
    return [x / Math.cos(y), y];
  };
  (d3.geoSinusoidal = function () {
    return projection(sinusoidal);
  }).raw = sinusoidal;
  function bonne(φ0) {
    if (!φ0) return sinusoidal;
    var cotφ0 = 1 / Math.tan(φ0);
    function forward(λ, φ) {
      var ρ = cotφ0 + φ0 - φ,
          E = ρ ? λ * Math.cos(φ) / ρ : ρ;
      return [ρ * Math.sin(E), cotφ0 - ρ * Math.cos(E)];
    }
    forward.invert = function (x, y) {
      var ρ = Math.sqrt(x * x + (y = cotφ0 - y) * y),
          φ = cotφ0 + φ0 - ρ;
      return [ρ / Math.cos(φ) * Math.atan2(x, y), φ];
    };
    return forward;
  }
  (d3.geoBonne = function () {
    return parallel1Projection(bonne).parallel(45);
  }).raw = bonne;
  var bromley = mollweideBromley(1, 4 / π, π);
  (d3.geoBromley = function () {
    return projection(bromley);
  }).raw = bromley;
  function chamberlin(points) {
    points = points.map(function (p) {
      return [p[0], p[1], Math.sin(p[1]), Math.cos(p[1])];
    });
    for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {
      b = points[i];
      a.v = chamberlinDistanceAzimuth(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);
      a.point = [0, 0];
    }
    var β0 = chamberlinAngle(points[0].v[0], points[2].v[0], points[1].v[0]),
        β1 = chamberlinAngle(points[0].v[0], points[1].v[0], points[2].v[0]),
        β2 = π - β0;
    points[2].point[1] = 0;
    points[0].point[0] = -(points[1].point[0] = .5 * points[0].v[0]);
    var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * Math.cos(β0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * Math.sin(β0))];
    function forward(λ, φ) {
      var sinφ = Math.sin(φ),
          cosφ = Math.cos(φ),
          v = new Array(3);
      for (var i = 0; i < 3; ++i) {
        var p = points[i];
        v[i] = chamberlinDistanceAzimuth(φ - p[1], p[3], p[2], cosφ, sinφ, λ - p[0]);
        if (!v[i][0]) return p.point;
        v[i][1] = chamberlinLongitude(v[i][1] - p.v[1]);
      }
      var point = mean.slice();
      for (var i = 0; i < 3; ++i) {
        var j = i == 2 ? 0 : i + 1;
        var a = chamberlinAngle(points[i].v[0], v[i][0], v[j][0]);
        if (v[i][1] < 0) a = -a;
        if (!i) {
          point[0] += v[i][0] * Math.cos(a);
          point[1] -= v[i][0] * Math.sin(a);
        } else if (i == 1) {
          a = β1 - a;
          point[0] -= v[i][0] * Math.cos(a);
          point[1] -= v[i][0] * Math.sin(a);
        } else {
          a = β2 - a;
          point[0] += v[i][0] * Math.cos(a);
          point[1] += v[i][0] * Math.sin(a);
        }
      }
      point[0] /= 3, point[1] /= 3;
      return point;
    }
    return forward;
  }
  function chamberlinProjection() {
    var points = [[0, 0], [0, 0], [0, 0]],
        m = projectionMutator(chamberlin),
        p = m(points),
        rotate = p.rotate;
    delete p.rotate;
    p.points = function (_) {
      if (!arguments.length) return points;
      points = _;
      var origin = d3.geoCentroid({
        type: "MultiPoint",
        coordinates: points
      }),
          r = [-origin[0], -origin[1]];
      rotate.call(p, r);
      return m(points.map(d3.geoRotation(r)).map(chamberlinRadians));
    };
    return p.points([[-150, 55], [-35, 55], [-92.5, 10]]);
  }
  function chamberlinDistanceAzimuth(dφ, c1, s1, c2, s2, dλ) {
    var cosdλ = Math.cos(dλ),
        r;
    if (Math.abs(dφ) > 1 || Math.abs(dλ) > 1) {
      r = acos(s1 * s2 + c1 * c2 * cosdλ);
    } else {
      var sindφ = Math.sin(.5 * dφ),
          sindλ = Math.sin(.5 * dλ);
      r = 2 * asin(Math.sqrt(sindφ * sindφ + c1 * c2 * sindλ * sindλ));
    }
    if (Math.abs(r) > ε) {
      return [r, Math.atan2(c2 * Math.sin(dλ), c1 * s2 - s1 * c2 * cosdλ)];
    }
    return [0, 0];
  }
  function chamberlinAngle(b, c, a) {
    return acos(.5 * (b * b + c * c - a * a) / (b * c));
  }
  function chamberlinLongitude(λ) {
    return λ - 2 * π * Math.floor((λ + π) / (2 * π));
  }
  function chamberlinRadians(point) {
    return [point[0] * radians, point[1] * radians];
  }
  (d3.geoChamberlin = chamberlinProjection).raw = chamberlin;
  function collignon(λ, φ) {
    var α = asqrt(1 - Math.sin(φ));
    return [2 / sqrtπ * λ * α, sqrtπ * (1 - α)];
  }
  collignon.invert = function (x, y) {
    var λ = (λ = y / sqrtπ - 1) * λ;
    return [λ > 0 ? x * Math.sqrt(π / λ) / 2 : 0, asin(1 - λ)];
  };
  (d3.geoCollignon = function () {
    return projection(collignon);
  }).raw = collignon;
  function craig(φ0) {
    var tanφ0 = Math.tan(φ0);
    function forward(λ, φ) {
      return [λ, (λ ? λ / Math.sin(λ) : 1) * (Math.sin(φ) * Math.cos(λ) - tanφ0 * Math.cos(φ))];
    }
    forward.invert = tanφ0 ? function (x, y) {
      if (x) y *= Math.sin(x) / x;
      var cosλ = Math.cos(x);
      return [x, 2 * Math.atan2(Math.sqrt(cosλ * cosλ + tanφ0 * tanφ0 - y * y) - cosλ, tanφ0 - y)];
    } : function (x, y) {
      return [x, asin(x ? y * Math.tan(x) / x : y)];
    };
    return forward;
  }
  (d3.geoCraig = function () {
    return parallel1Projection(craig);
  }).raw = craig;
  function craster(λ, φ) {
    var sqrt3 = Math.sqrt(3);
    return [sqrt3 * λ * (2 * Math.cos(2 * φ / 3) - 1) / sqrtπ, sqrt3 * sqrtπ * Math.sin(φ / 3)];
  }
  craster.invert = function (x, y) {
    var sqrt3 = Math.sqrt(3),
        φ = 3 * asin(y / (sqrt3 * sqrtπ));
    return [sqrtπ * x / (sqrt3 * (2 * Math.cos(2 * φ / 3) - 1)), φ];
  };
  (d3.geoCraster = function () {
    return projection(craster);
  }).raw = craster;
  function cylindricalEqualArea(φ0) {
    var cosφ0 = Math.cos(φ0);
    function forward(λ, φ) {
      return [λ * cosφ0, Math.sin(φ) / cosφ0];
    }
    forward.invert = function (x, y) {
      return [x / cosφ0, asin(y * cosφ0)];
    };
    return forward;
  }
  (d3.geoCylindricalEqualArea = function () {
    return parallel1Projection(cylindricalEqualArea);
  }).raw = cylindricalEqualArea;
  function cylindricalStereographic(φ0) {
    var cosφ0 = Math.cos(φ0);
    function forward(λ, φ) {
      return [λ * cosφ0, (1 + cosφ0) * Math.tan(φ * .5)];
    }
    forward.invert = function (x, y) {
      return [x / cosφ0, Math.atan(y / (1 + cosφ0)) * 2];
    };
    return forward;
  }
  (d3.geoCylindricalStereographic = function () {
    return parallel1Projection(cylindricalStereographic);
  }).raw = cylindricalStereographic;
  function eckert1(λ, φ) {
    var α = Math.sqrt(8 / (3 * π));
    return [α * λ * (1 - Math.abs(φ) / π), α * φ];
  }
  eckert1.invert = function (x, y) {
    var α = Math.sqrt(8 / (3 * π)),
        φ = y / α;
    return [x / (α * (1 - Math.abs(φ) / π)), φ];
  };
  (d3.geoEckert1 = function () {
    return projection(eckert1);
  }).raw = eckert1;
  function eckert2(λ, φ) {
    var α = Math.sqrt(4 - 3 * Math.sin(Math.abs(φ)));
    return [2 / Math.sqrt(6 * π) * λ * α, sgn(φ) * Math.sqrt(2 * π / 3) * (2 - α)];
  }
  eckert2.invert = function (x, y) {
    var α = 2 - Math.abs(y) / Math.sqrt(2 * π / 3);
    return [x * Math.sqrt(6 * π) / (2 * α), sgn(y) * asin((4 - α * α) / 3)];
  };
  (d3.geoEckert2 = function () {
    return projection(eckert2);
  }).raw = eckert2;
  function eckert3(λ, φ) {
    var k = Math.sqrt(π * (4 + π));
    return [2 / k * λ * (1 + Math.sqrt(1 - 4 * φ * φ / (π * π))), 4 / k * φ];
  }
  eckert3.invert = function (x, y) {
    var k = Math.sqrt(π * (4 + π)) / 2;
    return [x * k / (1 + asqrt(1 - y * y * (4 + π) / (4 * π))), y * k / 2];
  };
  (d3.geoEckert3 = function () {
    return projection(eckert3);
  }).raw = eckert3;
  function eckert4(λ, φ) {
    var k = (2 + halfπ) * Math.sin(φ);
    φ /= 2;
    for (var i = 0, δ = Infinity; i < 10 && Math.abs(δ) > ε; i++) {
      var cosφ = Math.cos(φ);
      φ -= δ = (φ + Math.sin(φ) * (cosφ + 2) - k) / (2 * cosφ * (1 + cosφ));
    }
    return [2 / Math.sqrt(π * (4 + π)) * λ * (1 + Math.cos(φ)), 2 * Math.sqrt(π / (4 + π)) * Math.sin(φ)];
  }
  eckert4.invert = function (x, y) {
    var A = .5 * y * Math.sqrt((4 + π) / π),
        k = asin(A),
        c = Math.cos(k);
    return [x / (2 / Math.sqrt(π * (4 + π)) * (1 + c)), asin((k + A * (c + 2)) / (2 + halfπ))];
  };
  (d3.geoEckert4 = function () {
    return projection(eckert4);
  }).raw = eckert4;
  function eckert5(λ, φ) {
    return [λ * (1 + Math.cos(φ)) / Math.sqrt(2 + π), 2 * φ / Math.sqrt(2 + π)];
  }
  eckert5.invert = function (x, y) {
    var k = Math.sqrt(2 + π),
        φ = y * k / 2;
    return [k * x / (1 + Math.cos(φ)), φ];
  };
  (d3.geoEckert5 = function () {
    return projection(eckert5);
  }).raw = eckert5;
  function eckert6(λ, φ) {
    var k = (1 + halfπ) * Math.sin(φ);
    for (var i = 0, δ = Infinity; i < 10 && Math.abs(δ) > ε; i++) {
      φ -= δ = (φ + Math.sin(φ) - k) / (1 + Math.cos(φ));
    }
    k = Math.sqrt(2 + π);
    return [λ * (1 + Math.cos(φ)) / k, 2 * φ / k];
  }
  eckert6.invert = function (x, y) {
    var j = 1 + halfπ,
        k = Math.sqrt(j / 2);
    return [x * 2 * k / (1 + Math.cos(y *= k)), asin((y + Math.sin(y)) / j)];
  };
  (d3.geoEckert6 = function () {
    return projection(eckert6);
  }).raw = eckert6;
  function eisenlohr(λ, φ) {
    var s0 = Math.sin(λ /= 2),
        c0 = Math.cos(λ),
        k = Math.sqrt(Math.cos(φ)),
        c1 = Math.cos(φ /= 2),
        t = Math.sin(φ) / (c1 + Math.SQRT2 * c0 * k),
        c = Math.sqrt(2 / (1 + t * t)),
        v = Math.sqrt((Math.SQRT2 * c1 + (c0 + s0) * k) / (Math.SQRT2 * c1 + (c0 - s0) * k));
    return [eisenlohrK * (c * (v - 1 / v) - 2 * Math.log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * Math.atan(t))];
  }
  eisenlohr.invert = function (x, y) {
    var p = d3.geoAugust.raw.invert(x / 1.2, y * 1.065);
    if (!p) return null;
    var λ = p[0],
        φ = p[1],
        i = 20;
    x /= eisenlohrK, y /= eisenlohrK;
    do {
      var _0 = λ / 2,
          _1 = φ / 2,
          s0 = Math.sin(_0),
          c0 = Math.cos(_0),
          s1 = Math.sin(_1),
          c1 = Math.cos(_1),
          cos1 = Math.cos(φ),
          k = Math.sqrt(cos1),
          t = s1 / (c1 + Math.SQRT2 * c0 * k),
          t2 = t * t,
          c = Math.sqrt(2 / (1 + t2)),
          v0 = Math.SQRT2 * c1 + (c0 + s0) * k,
          v1 = Math.SQRT2 * c1 + (c0 - s0) * k,
          v2 = v0 / v1,
          v = Math.sqrt(v2),
          vm1v = v - 1 / v,
          vp1v = v + 1 / v,
          fx = c * vm1v - 2 * Math.log(v) - x,
          fy = c * t * vp1v - 2 * Math.atan(t) - y,
          δtδλ = s1 && Math.SQRT1_2 * k * s0 * t2 / s1,
          δtδφ = (Math.SQRT2 * c0 * c1 + k) / (2 * (c1 + Math.SQRT2 * c0 * k) * (c1 + Math.SQRT2 * c0 * k) * k),
          δcδt = -.5 * t * c * c * c,
          δcδλ = δcδt * δtδλ,
          δcδφ = δcδt * δtδφ,
          A = (A = 2 * c1 + Math.SQRT2 * k * (c0 - s0)) * A * v,
          δvδλ = (Math.SQRT2 * c0 * c1 * k + cos1) / A,
          δvδφ = -(Math.SQRT2 * s0 * s1) / (k * A),
          δxδλ = vm1v * δcδλ - 2 * δvδλ / v + c * (δvδλ + δvδλ / v2),
          δxδφ = vm1v * δcδφ - 2 * δvδφ / v + c * (δvδφ + δvδφ / v2),
          δyδλ = t * vp1v * δcδλ - 2 * δtδλ / (1 + t2) + c * vp1v * δtδλ + c * t * (δvδλ - δvδλ / v2),
          δyδφ = t * vp1v * δcδφ - 2 * δtδφ / (1 + t2) + c * vp1v * δtδφ + c * t * (δvδφ - δvδφ / v2),
          denominator = δxδφ * δyδλ - δyδφ * δxδλ;
      if (!denominator) break;
      var δλ = (fy * δxδφ - fx * δyδφ) / denominator,
          δφ = (fx * δyδλ - fy * δxδλ) / denominator;
      λ -= δλ;
      φ = Math.max(-halfπ, Math.min(halfπ, φ - δφ));
    } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
    return Math.abs(Math.abs(φ) - halfπ) < ε ? [0, φ] : i && [λ, φ];
  };
  var eisenlohrK = 3 + 2 * Math.SQRT2;
  (d3.geoEisenlohr = function () {
    return projection(eisenlohr);
  }).raw = eisenlohr;
  function fahey(λ, φ) {
    var t = Math.tan(φ / 2);
    return [λ * faheyK * asqrt(1 - t * t), (1 + faheyK) * t];
  }
  fahey.invert = function (x, y) {
    var t = y / (1 + faheyK);
    return [x ? x / (faheyK * asqrt(1 - t * t)) : 0, 2 * Math.atan(t)];
  };
  var faheyK = Math.cos(35 * radians);
  (d3.geoFahey = function () {
    return projection(fahey);
  }).raw = fahey;
  function foucaut(λ, φ) {
    var k = φ / 2,
        cosk = Math.cos(k);
    return [2 * λ / sqrtπ * Math.cos(φ) * cosk * cosk, sqrtπ * Math.tan(k)];
  }
  foucaut.invert = function (x, y) {
    var k = Math.atan(y / sqrtπ),
        cosk = Math.cos(k),
        φ = 2 * k;
    return [x * sqrtπ * .5 / (Math.cos(φ) * cosk * cosk), φ];
  };
  (d3.geoFoucaut = function () {
    return projection(foucaut);
  }).raw = foucaut;
  d3.geoGilbert = function (projection) {
    var e = d3.geoEquirectangular().scale(degrees).translate([0, 0]);
    function gilbert(coordinates) {
      return projection([coordinates[0] * .5, asin(Math.tan(coordinates[1] * .5 * radians)) * degrees]);
    }
    if (projection.invert) gilbert.invert = function (coordinates) {
      coordinates = projection.invert(coordinates);
      coordinates[0] *= 2;
      coordinates[1] = 2 * Math.atan(Math.sin(coordinates[1] * radians)) * degrees;
      return coordinates;
    };
    gilbert.stream = function (stream) {
      stream = projection.stream(stream);
      var s = e.stream({
        point: function point(λ, φ) {
          stream.point(λ * .5, asin(Math.tan(-φ * .5 * radians)) * degrees);
        },
        lineStart: function lineStart() {
          stream.lineStart();
        },
        lineEnd: function lineEnd() {
          stream.lineEnd();
        },
        polygonStart: function polygonStart() {
          stream.polygonStart();
        },
        polygonEnd: function polygonEnd() {
          stream.polygonEnd();
        }
      });
      s.sphere = function () {
        stream.sphere();
      };
      s.valid = false;
      return s;
    };
    return gilbert;
  };
  var gingeryAzimuthalEquidistant = d3.geoAzimuthalEquidistant.raw;
  function gingery(ρ, n) {
    var k = 2 * π / n,
        ρ2 = ρ * ρ;
    function forward(λ, φ) {
      var p = gingeryAzimuthalEquidistant(λ, φ),
          x = p[0],
          y = p[1],
          r2 = x * x + y * y;
      if (r2 > ρ2) {
        var r = Math.sqrt(r2),
            θ = Math.atan2(y, x),
            θ0 = k * Math.round(θ / k),
            α = θ - θ0,
            ρcosα = ρ * Math.cos(α),
            k_ = (ρ * Math.sin(α) - α * Math.sin(ρcosα)) / (halfπ - ρcosα),
            s_ = arcLength_(α, k_),
            e = (π - ρ) / gingeryIntegrate(s_, ρcosα, π);
        x = r;
        var i = 50,
            δ;
        do {
          x -= δ = (ρ + gingeryIntegrate(s_, ρcosα, x) * e - r) / (s_(x) * e);
        } while (Math.abs(δ) > ε && --i > 0);
        y = α * Math.sin(x);
        if (x < halfπ) y -= k_ * (x - halfπ);
        var s = Math.sin(θ0),
            c = Math.cos(θ0);
        p[0] = x * c - y * s;
        p[1] = x * s + y * c;
      }
      return p;
    }
    forward.invert = function (x, y) {
      var r2 = x * x + y * y;
      if (r2 > ρ2) {
        var r = Math.sqrt(r2),
            θ = Math.atan2(y, x),
            θ0 = k * Math.round(θ / k),
            dθ = θ - θ0,
            x = r * Math.cos(dθ);
        y = r * Math.sin(dθ);
        var x_halfπ = x - halfπ,
            sinx = Math.sin(x),
            α = y / sinx,
            δ = x < halfπ ? Infinity : 0,
            i = 10;
        while (true) {
          var ρsinα = ρ * Math.sin(α),
              ρcosα = ρ * Math.cos(α),
              sinρcosα = Math.sin(ρcosα),
              halfπ_ρcosα = halfπ - ρcosα,
              k_ = (ρsinα - α * sinρcosα) / halfπ_ρcosα,
              s_ = arcLength_(α, k_);
          if (Math.abs(δ) < ε2 || ! --i) break;
          α -= δ = (α * sinx - k_ * x_halfπ - y) / (sinx - x_halfπ * 2 * (halfπ_ρcosα * (ρcosα + α * ρsinα * Math.cos(ρcosα) - sinρcosα) - ρsinα * (ρsinα - α * sinρcosα)) / (halfπ_ρcosα * halfπ_ρcosα));
        }
        r = ρ + gingeryIntegrate(s_, ρcosα, x) * (π - ρ) / gingeryIntegrate(s_, ρcosα, π);
        θ = θ0 + α;
        x = r * Math.cos(θ);
        y = r * Math.sin(θ);
      }
      return gingeryAzimuthalEquidistant.invert(x, y);
    };
    return forward;
  }
  function arcLength_(α, k) {
    return function (x) {
      var y_ = α * Math.cos(x);
      if (x < halfπ) y_ -= k;
      return Math.sqrt(1 + y_ * y_);
    };
  }
  function gingeryProjection() {
    var n = 6,
        ρ = 30 * radians,
        cρ = Math.cos(ρ),
        sρ = Math.sin(ρ),
        m = projectionMutator(gingery),
        p = m(ρ, n),
        stream_ = p.stream,
        ε = .01,
        cr = -Math.cos(ε * radians),
        sr = Math.sin(ε * radians);
    p.radius = function (_) {
      if (!arguments.length) return ρ * degrees;
      cρ = Math.cos(ρ = _ * radians);
      sρ = Math.sin(ρ);
      return m(ρ, n);
    };
    p.lobes = function (_) {
      if (!arguments.length) return n;
      return m(ρ, n = +_);
    };
    p.stream = function (stream) {
      var rotate = p.rotate(),
          rotateStream = stream_(stream),
          sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        sphereStream.polygonStart(), sphereStream.lineStart();
        for (var i = 0, δ = 2 * π / n, φ = 0; i < n; ++i, φ -= δ) {
          sphereStream.point(Math.atan2(sr * Math.cos(φ), cr) * degrees, Math.asin(sr * Math.sin(φ)) * degrees);
          sphereStream.point(Math.atan2(sρ * Math.cos(φ - δ / 2), cρ) * degrees, Math.asin(sρ * Math.sin(φ - δ / 2)) * degrees);
        }
        sphereStream.lineEnd(), sphereStream.polygonEnd();
      };
      return rotateStream;
    };
    return p;
  }
  function gingeryIntegrate(f, a, b) {
    var n = 50,
        h = (b - a) / n,
        s = f(a) + f(b);
    for (var i = 1, x = a; i < n; ++i) {
      s += 2 * f(x += h);
    }return s * .5 * h;
  }
  (d3.geoGingery = gingeryProjection).raw = gingery;
  function ginzburgPolyconic(a, b, c, d, e, f, g, h) {
    if (arguments.length < 8) h = 0;
    function forward(λ, φ) {
      if (!φ) return [a * λ / π, 0];
      var φ2 = φ * φ,
          xB = a + φ2 * (b + φ2 * (c + φ2 * d)),
          yB = φ * (e - 1 + φ2 * (f - h + φ2 * g)),
          m = (xB * xB + yB * yB) / (2 * yB),
          α = λ * Math.asin(xB / m) / π;
      return [m * Math.sin(α), φ * (1 + φ2 * h) + m * (1 - Math.cos(α))];
    }
    forward.invert = function (x, y) {
      var λ = π * x / a,
          φ = y,
          δλ,
          δφ,
          i = 50;
      do {
        var φ2 = φ * φ,
            xB = a + φ2 * (b + φ2 * (c + φ2 * d)),
            yB = φ * (e - 1 + φ2 * (f - h + φ2 * g)),
            p = xB * xB + yB * yB,
            q = 2 * yB,
            m = p / q,
            m2 = m * m,
            dαdλ = Math.asin(xB / m) / π,
            α = λ * dαdλ;
        xB2 = xB * xB, dxBdφ = (2 * b + φ2 * (4 * c + φ2 * 6 * d)) * φ, dyBdφ = e + φ2 * (3 * f + φ2 * 5 * g), dpdφ = 2 * (xB * dxBdφ + yB * (dyBdφ - 1)), dqdφ = 2 * (dyBdφ - 1), dmdφ = (dpdφ * q - p * dqdφ) / (q * q), cosα = Math.cos(α), sinα = Math.sin(α), mcosα = m * cosα, msinα = m * sinα, dαdφ = λ / π * (1 / asqrt(1 - xB2 / m2)) * (dxBdφ * m - xB * dmdφ) / m2, fx = msinα - x, fy = φ * (1 + φ2 * h) + m - mcosα - y, δxδφ = dmdφ * sinα + mcosα * dαdφ, δxδλ = mcosα * dαdλ, δyδφ = 1 + dmdφ - (dmdφ * cosα - msinα * dαdφ), δyδλ = msinα * dαdλ, denominator = δxδφ * δyδλ - δyδφ * δxδλ;
        if (!denominator) break;
        λ -= δλ = (fy * δxδφ - fx * δyδφ) / denominator;
        φ -= δφ = (fx * δyδλ - fy * δxδλ) / denominator;
      } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
      return [λ, φ];
    };
    return forward;
  }
  var ginzburg4 = ginzburgPolyconic(2.8284, -1.6988, .75432, -.18071, 1.76003, -.38914, .042555);
  (d3.geoGinzburg4 = function () {
    return projection(ginzburg4);
  }).raw = ginzburg4;
  var ginzburg5 = ginzburgPolyconic(2.583819, -.835827, .170354, -.038094, 1.543313, -.411435, .082742);
  (d3.geoGinzburg5 = function () {
    return projection(ginzburg5);
  }).raw = ginzburg5;
  var ginzburg6 = ginzburgPolyconic(5 / 6 * π, -.62636, -.0344, 0, 1.3493, -.05524, 0, .045);
  (d3.geoGinzburg6 = function () {
    return projection(ginzburg6);
  }).raw = ginzburg6;
  function ginzburg8(λ, φ) {
    var λ2 = λ * λ,
        φ2 = φ * φ;
    return [λ * (1 - .162388 * φ2) * (.87 - 952426e-9 * λ2 * λ2), φ * (1 + φ2 / 12)];
  }
  ginzburg8.invert = function (x, y) {
    var λ = x,
        φ = y,
        i = 50,
        δ;
    do {
      var φ2 = φ * φ;
      φ -= δ = (φ * (1 + φ2 / 12) - y) / (1 + φ2 / 4);
    } while (Math.abs(δ) > ε && --i > 0);
    i = 50;
    x /= 1 - .162388 * φ2;
    do {
      var λ4 = (λ4 = λ * λ) * λ4;
      λ -= δ = (λ * (.87 - 952426e-9 * λ4) - x) / (.87 - .00476213 * λ4);
    } while (Math.abs(δ) > ε && --i > 0);
    return [λ, φ];
  };
  (d3.geoGinzburg8 = function () {
    return projection(ginzburg8);
  }).raw = ginzburg8;
  var ginzburg9 = ginzburgPolyconic(2.6516, -.76534, .19123, -.047094, 1.36289, -.13965, .031762);
  (d3.geoGinzburg9 = function () {
    return projection(ginzburg9);
  }).raw = ginzburg9;
  function quincuncialProjection(projectHemisphere) {
    var dx = projectHemisphere(halfπ, 0)[0] - projectHemisphere(-halfπ, 0)[0];
    function projection() {
      var quincuncial = false,
          m = projectionMutator(projectAt),
          p = m(quincuncial);
      p.quincuncial = function (_) {
        if (!arguments.length) return quincuncial;
        return m(quincuncial = !!_);
      };
      return p;
    }
    function projectAt(quincuncial) {
      var forward = quincuncial ? function (λ, φ) {
        var t = Math.abs(λ) < halfπ,
            p = projectHemisphere(t ? λ : λ > 0 ? λ - π : λ + π, φ);
        var x = (p[0] - p[1]) * Math.SQRT1_2,
            y = (p[0] + p[1]) * Math.SQRT1_2;
        if (t) return [x, y];
        var d = dx * Math.SQRT1_2,
            s = x > 0 ^ y > 0 ? -1 : 1;
        return [s * x - sgn(y) * d, s * y - sgn(x) * d];
      } : function (λ, φ) {
        var s = λ > 0 ? -.5 : .5,
            point = projectHemisphere(λ + s * π, φ);
        point[0] -= s * dx;
        return point;
      };
      if (projectHemisphere.invert) forward.invert = quincuncial ? function (x0, y0) {
        var x = (x0 + y0) * Math.SQRT1_2,
            y = (y0 - x0) * Math.SQRT1_2,
            t = Math.abs(x) < .5 * dx && Math.abs(y) < .5 * dx;
        if (!t) {
          var d = dx * Math.SQRT1_2,
              s = x > 0 ^ y > 0 ? -1 : 1,
              x1 = -s * (x0 + (y > 0 ? 1 : -1) * d),
              y1 = -s * (y0 + (x > 0 ? 1 : -1) * d);
          x = (-x1 - y1) * Math.SQRT1_2;
          y = (x1 - y1) * Math.SQRT1_2;
        }
        var p = projectHemisphere.invert(x, y);
        if (!t) p[0] += x > 0 ? π : -π;
        return p;
      } : function (x, y) {
        var s = x > 0 ? -.5 : .5,
            location = projectHemisphere.invert(x + s * dx, y),
            λ = location[0] - s * π;
        if (λ < -π) λ += 2 * π;else if (λ > π) λ -= 2 * π;
        location[0] = λ;
        return location;
      };
      return forward;
    }
    projection.raw = projectAt;
    return projection;
  }
  function gringorten(λ, φ) {
    var sλ = sgn(λ),
        sφ = sgn(φ),
        cosφ = Math.cos(φ),
        x = Math.cos(λ) * cosφ,
        y = Math.sin(λ) * cosφ,
        z = Math.sin(sφ * φ);
    λ = Math.abs(Math.atan2(y, z));
    φ = asin(x);
    if (Math.abs(λ - halfπ) > ε) λ %= halfπ;
    var point = gringortenHexadecant(λ > π / 4 ? halfπ - λ : λ, φ);
    if (λ > π / 4) z = point[0], point[0] = -point[1], point[1] = -z;
    return point[0] *= sλ, point[1] *= -sφ, point;
  }
  gringorten.invert = function (x, y) {
    var sx = sgn(x),
        sy = sgn(y),
        x0 = -sx * x,
        y0 = -sy * y,
        t = y0 / x0 < 1,
        p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),
        λ = p[0],
        φ = p[1];
    if (t) λ = -halfπ - λ;
    var cosφ = Math.cos(φ),
        x = Math.cos(λ) * cosφ,
        y = Math.sin(λ) * cosφ,
        z = Math.sin(φ);
    return [sx * (Math.atan2(y, -z) + π), sy * asin(x)];
  };
  function gringortenHexadecant(λ, φ) {
    if (φ === halfπ) return [0, 0];
    var sinφ = Math.sin(φ),
        r = sinφ * sinφ,
        r2 = r * r,
        j = 1 + r2,
        k = 1 + 3 * r2,
        q = 1 - r2,
        z = asin(1 / Math.sqrt(j)),
        v = q + r * j * z,
        p2 = (1 - sinφ) / v,
        p = Math.sqrt(p2),
        a2 = p2 * j,
        a = Math.sqrt(a2),
        h = p * q;
    if (λ === 0) return [0, -(h + r * a)];
    var cosφ = Math.cos(φ),
        secφ = 1 / cosφ,
        drdφ = 2 * sinφ * cosφ,
        dvdφ = (-3 * r + z * k) * drdφ,
        dp2dφ = (-v * cosφ - (1 - sinφ) * dvdφ) / (v * v),
        dpdφ = .5 * dp2dφ / p,
        dhdφ = q * dpdφ - 2 * r * p * drdφ,
        dra2dφ = r * j * dp2dφ + p2 * k * drdφ,
        μ = -secφ * drdφ,
        ν = -secφ * dra2dφ,
        ζ = -2 * secφ * dhdφ,
        Λ = 4 * λ / π;
    if (λ > .222 * π || φ < π / 4 && λ > .175 * π) {
      var x = (h + r * asqrt(a2 * (1 + r2) - h * h)) / (1 + r2);
      if (λ > π / 4) return [x, x];
      var x1 = x,
          x0 = .5 * x,
          i = 50;
      x = .5 * (x0 + x1);
      do {
        var g = Math.sqrt(a2 - x * x),
            f = x * (ζ + μ * g) + ν * asin(x / a) - Λ;
        if (!f) break;
        if (f < 0) x0 = x;else x1 = x;
        x = .5 * (x0 + x1);
      } while (Math.abs(x1 - x0) > ε && --i > 0);
    } else {
      var x = ε,
          i = 25,
          δ;
      do {
        var x2 = x * x,
            g = asqrt(a2 - x2),
            ζμg = ζ + μ * g,
            f = x * ζμg + ν * asin(x / a) - Λ,
            df = ζμg + (ν - μ * x2) / g;
        x -= δ = g ? f / df : 0;
      } while (Math.abs(δ) > ε && --i > 0);
    }
    return [x, -h - r * asqrt(a2 - x * x)];
  }
  function gringortenHexadecantInvert(x, y) {
    var x0 = 0,
        x1 = 1,
        r = .5,
        i = 50;
    while (true) {
      var r2 = r * r,
          sinφ = Math.sqrt(r),
          z = Math.asin(1 / Math.sqrt(1 + r2)),
          v = 1 - r2 + r * (1 + r2) * z,
          p2 = (1 - sinφ) / v,
          p = Math.sqrt(p2),
          a2 = p2 * (1 + r2),
          h = p * (1 - r2),
          g2 = a2 - x * x,
          g = Math.sqrt(g2),
          y0 = y + h + r * g;
      if (Math.abs(x1 - x0) < ε2 || --i === 0 || y0 === 0) break;
      if (y0 > 0) x0 = r;else x1 = r;
      r = .5 * (x0 + x1);
    }
    if (!i) return null;
    var φ = Math.asin(sinφ),
        cosφ = Math.cos(φ),
        secφ = 1 / cosφ,
        drdφ = 2 * sinφ * cosφ,
        dvdφ = (-3 * r + z * (1 + 3 * r2)) * drdφ,
        dp2dφ = (-v * cosφ - (1 - sinφ) * dvdφ) / (v * v),
        dpdφ = .5 * dp2dφ / p,
        dhdφ = (1 - r2) * dpdφ - 2 * r * p * drdφ,
        ζ = -2 * secφ * dhdφ,
        μ = -secφ * drdφ,
        ν = -secφ * (r * (1 + r2) * dp2dφ + p2 * (1 + 3 * r2) * drdφ);
    return [π / 4 * (x * (ζ + μ * g) + ν * Math.asin(x / Math.sqrt(a2))), φ];
  }
  d3.geoGringorten = quincuncialProjection(gringorten);
  function ellipticJi(u, v, m) {
    if (!u) {
      var b = ellipticJ(v, 1 - m);
      return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];
    }
    var a = ellipticJ(u, m);
    if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];
    var b = ellipticJ(v, 1 - m),
        denominator = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];
    return [[a[0] * b[2] / denominator, a[1] * a[2] * b[0] * b[1] / denominator], [a[1] * b[1] / denominator, -a[0] * a[2] * b[0] * b[2] / denominator], [a[2] * b[1] * b[2] / denominator, -m * a[0] * a[1] * b[0] / denominator]];
  }
  function ellipticJ(u, m) {
    var ai, b, φ, t, twon;
    if (m < ε) {
      t = Math.sin(u);
      b = Math.cos(u);
      ai = .25 * m * (u - t * b);
      return [t - ai * b, b + ai * t, 1 - .5 * m * t * t, u - ai];
    }
    if (m >= 1 - ε) {
      ai = .25 * (1 - m);
      b = cosh(u);
      t = tanh(u);
      φ = 1 / b;
      twon = b * sinh(u);
      return [t + ai * (twon - u) / (b * b), φ - ai * t * φ * (twon - u), φ + ai * t * φ * (twon + u), 2 * Math.atan(Math.exp(u)) - halfπ + ai * (twon - u) / b];
    }
    var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],
        c = [Math.sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],
        i = 0;
    b = Math.sqrt(1 - m);
    twon = 1;
    while (Math.abs(c[i] / a[i]) > ε && i < 8) {
      ai = a[i++];
      c[i] = .5 * (ai - b);
      a[i] = .5 * (ai + b);
      b = asqrt(ai * b);
      twon *= 2;
    }
    φ = twon * a[i] * u;
    do {
      t = c[i] * Math.sin(b = φ) / a[i];
      φ = .5 * (asin(t) + φ);
    } while (--i);
    return [Math.sin(φ), t = Math.cos(φ), t / Math.cos(φ - b), φ];
  }
  function ellipticFi(φ, ψ, m) {
    var r = Math.abs(φ),
        i = Math.abs(ψ),
        sinhψ = sinh(i);
    if (r) {
      var cscφ = 1 / Math.sin(r),
          cotφ2 = 1 / (Math.tan(r) * Math.tan(r)),
          b = -(cotφ2 + m * sinhψ * sinhψ * cscφ * cscφ - 1 + m),
          c = (m - 1) * cotφ2,
          cotλ2 = .5 * (-b + Math.sqrt(b * b - 4 * c));
      return [ellipticF(Math.atan(1 / Math.sqrt(cotλ2)), m) * sgn(φ), ellipticF(Math.atan(asqrt((cotλ2 / cotφ2 - 1) / m)), 1 - m) * sgn(ψ)];
    }
    return [0, ellipticF(Math.atan(sinhψ), 1 - m) * sgn(ψ)];
  }
  function ellipticF(φ, m) {
    if (!m) return φ;
    if (m === 1) return Math.log(Math.tan(φ / 2 + π / 4));
    var a = 1,
        b = Math.sqrt(1 - m),
        c = Math.sqrt(m);
    for (var i = 0; Math.abs(c) > ε; i++) {
      if (φ % π) {
        var dφ = Math.atan(b * Math.tan(φ) / a);
        if (dφ < 0) dφ += π;
        φ += dφ + ~~(φ / π) * π;
      } else φ += φ;
      c = (a + b) / 2;
      b = Math.sqrt(a * b);
      c = ((a = c) - b) / 2;
    }
    return φ / (Math.pow(2, i) * a);
  }
  function guyou(λ, φ) {
    var k_ = (Math.SQRT2 - 1) / (Math.SQRT2 + 1),
        k = Math.sqrt(1 - k_ * k_),
        K = ellipticF(halfπ, k * k),
        f = -1;
    var ψ = Math.log(Math.tan(π / 4 + Math.abs(φ) / 2)),
        r = Math.exp(f * ψ) / Math.sqrt(k_),
        at = guyouComplexAtan(r * Math.cos(f * λ), r * Math.sin(f * λ)),
        t = ellipticFi(at[0], at[1], k * k);
    return [-t[1], (φ >= 0 ? 1 : -1) * (.5 * K - t[0])];
  }
  function guyouComplexAtan(x, y) {
    var x2 = x * x,
        y_1 = y + 1,
        t = 1 - x2 - y * y;
    return [.5 * ((x >= 0 ? halfπ : -halfπ) - Math.atan2(t, 2 * x)), -.25 * Math.log(t * t + 4 * x2) + .5 * Math.log(y_1 * y_1 + x2)];
  }
  function guyouComplexDivide(a, b) {
    var denominator = b[0] * b[0] + b[1] * b[1];
    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
  }
  guyou.invert = function (x, y) {
    var k_ = (Math.SQRT2 - 1) / (Math.SQRT2 + 1),
        k = Math.sqrt(1 - k_ * k_),
        K = ellipticF(halfπ, k * k),
        f = -1;
    var j = ellipticJi(.5 * K - y, -x, k * k),
        tn = guyouComplexDivide(j[0], j[1]),
        λ = Math.atan2(tn[1], tn[0]) / f;
    return [λ, 2 * Math.atan(Math.exp(.5 / f * Math.log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfπ];
  };
  d3.geoGuyou = quincuncialProjection(guyou);
  function hammerRetroazimuthal(φ0) {
    var sinφ0 = Math.sin(φ0),
        cosφ0 = Math.cos(φ0),
        rotate = hammerRetroazimuthalRotation(φ0);
    rotate.invert = hammerRetroazimuthalRotation(-φ0);
    function forward(λ, φ) {
      var p = rotate(λ, φ);
      λ = p[0], φ = p[1];
      var sinφ = Math.sin(φ),
          cosφ = Math.cos(φ),
          cosλ = Math.cos(λ),
          z = acos(sinφ0 * sinφ + cosφ0 * cosφ * cosλ),
          sinz = Math.sin(z),
          K = Math.abs(sinz) > ε ? z / sinz : 1;
      return [K * cosφ0 * Math.sin(λ), (Math.abs(λ) > halfπ ? K : -K) * (sinφ0 * cosφ - cosφ0 * sinφ * cosλ)];
    }
    forward.invert = function (x, y) {
      var ρ = Math.sqrt(x * x + y * y),
          sinz = -Math.sin(ρ),
          cosz = Math.cos(ρ),
          a = ρ * cosz,
          b = -y * sinz,
          c = ρ * sinφ0,
          d = asqrt(a * a + b * b - c * c),
          φ = Math.atan2(a * c + b * d, b * c - a * d),
          λ = (ρ > halfπ ? -1 : 1) * Math.atan2(x * sinz, ρ * Math.cos(φ) * cosz + y * Math.sin(φ) * sinz);
      return rotate.invert(λ, φ);
    };
    return forward;
  }
  function hammerRetroazimuthalRotation(φ0) {
    var sinφ0 = Math.sin(φ0),
        cosφ0 = Math.cos(φ0);
    return function (λ, φ) {
      var cosφ = Math.cos(φ),
          x = Math.cos(λ) * cosφ,
          y = Math.sin(λ) * cosφ,
          z = Math.sin(φ);
      return [Math.atan2(y, x * cosφ0 - z * sinφ0), asin(z * cosφ0 + x * sinφ0)];
    };
  }
  function hammerRetroazimuthalProjection() {
    var φ0 = 0,
        m = projectionMutator(hammerRetroazimuthal),
        p = m(φ0),
        rotate_ = p.rotate,
        stream_ = p.stream,
        circle = d3.geoCircle();
    p.parallel = function (_) {
      if (!arguments.length) return φ0 / π * 180;
      var r = p.rotate();
      return m(φ0 = _ * π / 180).rotate(r);
    };
    p.rotate = function (_) {
      if (!arguments.length) return _ = rotate_.call(p), _[1] += φ0 / π * 180, _;
      rotate_.call(p, [_[0], _[1] - φ0 / π * 180]);
      circle.center([-_[0], -_[1]]);
      return p;
    };
    p.stream = function (stream) {
      stream = stream_(stream);
      stream.sphere = function () {
        stream.polygonStart();
        var ε = .01,
            ring = circle.radius(90 - ε)().coordinates[0],
            n = ring.length - 1,
            i = -1,
            p;
        stream.lineStart();
        while (++i < n) {
          stream.point((p = ring[i])[0], p[1]);
        }stream.lineEnd();
        ring = circle.radius(90 + ε)().coordinates[0];
        n = ring.length - 1;
        stream.lineStart();
        while (--i >= 0) {
          stream.point((p = ring[i])[0], p[1]);
        }stream.lineEnd();
        stream.polygonEnd();
      };
      return stream;
    };
    return p;
  }
  (d3.geoHammerRetroazimuthal = hammerRetroazimuthalProjection).raw = hammerRetroazimuthal;
  var hammerAzimuthalEqualArea = d3.geoAzimuthalEqualArea.raw;
  function hammer(A, B) {
    if (arguments.length < 2) B = A;
    if (B === 1) return hammerAzimuthalEqualArea;
    if (B === Infinity) return hammerQuarticAuthalic;
    function forward(λ, φ) {
      var coordinates = hammerAzimuthalEqualArea(λ / B, φ);
      coordinates[0] *= A;
      return coordinates;
    }
    forward.invert = function (x, y) {
      var coordinates = hammerAzimuthalEqualArea.invert(x / A, y);
      coordinates[0] *= B;
      return coordinates;
    };
    return forward;
  }
  function hammerProjection() {
    var B = 2,
        m = projectionMutator(hammer),
        p = m(B);
    p.coefficient = function (_) {
      if (!arguments.length) return B;
      return m(B = +_);
    };
    return p;
  }
  function hammerQuarticAuthalic(λ, φ) {
    return [λ * Math.cos(φ) / Math.cos(φ /= 2), 2 * Math.sin(φ)];
  }
  hammerQuarticAuthalic.invert = function (x, y) {
    var φ = 2 * asin(y / 2);
    return [x * Math.cos(φ / 2) / Math.cos(φ), φ];
  };
  (d3.geoHammer = hammerProjection).raw = hammer;
  function hatano(λ, φ) {
    var c = Math.sin(φ) * (φ < 0 ? 2.43763 : 2.67595);
    for (var i = 0, δ; i < 20; i++) {
      φ -= δ = (φ + Math.sin(φ) - c) / (1 + Math.cos(φ));
      if (Math.abs(δ) < ε) break;
    }
    return [.85 * λ * Math.cos(φ *= .5), Math.sin(φ) * (φ < 0 ? 1.93052 : 1.75859)];
  }
  hatano.invert = function (x, y) {
    var θ = Math.abs(θ = y * (y < 0 ? .5179951515653813 : .5686373742600607)) > 1 - ε ? θ > 0 ? halfπ : -halfπ : asin(θ);
    return [1.1764705882352942 * x / Math.cos(θ), Math.abs(θ = ((θ += θ) + Math.sin(θ)) * (y < 0 ? .4102345310814193 : .3736990601468637)) > 1 - ε ? θ > 0 ? halfπ : -halfπ : asin(θ)];
  };
  (d3.geoHatano = function () {
    return projection(hatano);
  }).raw = hatano;
  var healpixParallel = 41 + 48 / 36 + 37 / 3600;
  function healpix(h) {
    var lambert = d3.geoCylindricalEqualArea.raw(0),
        φ0 = healpixParallel * π / 180,
        dx0 = 2 * π,
        dx1 = d3.geoCollignon.raw(π, φ0)[0] - d3.geoCollignon.raw(-π, φ0)[0],
        y0 = lambert(0, φ0)[1],
        y1 = d3.geoCollignon.raw(0, φ0)[1],
        dy1 = d3.geoCollignon.raw(0, halfπ)[1] - y1,
        k = 2 * π / h;
    function forward(λ, φ) {
      var point,
          φ2 = Math.abs(φ);
      if (φ2 > φ0) {
        var i = Math.min(h - 1, Math.max(0, Math.floor((λ + π) / k)));
        λ += π * (h - 1) / h - i * k;
        point = d3.geoCollignon.raw(λ, φ2);
        point[0] = point[0] * dx0 / dx1 - dx0 * (h - 1) / (2 * h) + i * dx0 / h;
        point[1] = y0 + (point[1] - y1) * 4 * dy1 / dx0;
        if (φ < 0) point[1] = -point[1];
      } else {
        point = lambert(λ, φ);
      }
      point[0] /= 2;
      return point;
    }
    forward.invert = function (x, y) {
      x *= 2;
      var y2 = Math.abs(y);
      if (y2 > y0) {
        var i = Math.min(h - 1, Math.max(0, Math.floor((x + π) / k)));
        x = (x + π * (h - 1) / h - i * k) * dx1 / dx0;
        var point = d3.geoCollignon.raw.invert(x, .25 * (y2 - y0) * dx0 / dy1 + y1);
        point[0] -= π * (h - 1) / h - i * k;
        if (y < 0) point[1] = -point[1];
        return point;
      }
      return lambert.invert(x, y);
    };
    return forward;
  }
  function healpixProjection() {
    var n = 2,
        m = projectionMutator(healpix),
        p = m(n),
        stream_ = p.stream;
    p.lobes = function (_) {
      if (!arguments.length) return n;
      return m(n = +_);
    };
    p.stream = function (stream) {
      var rotate = p.rotate(),
          rotateStream = stream_(stream),
          sphereStream = (p.rotate([0, 0]), stream_(stream));
      p.rotate(rotate);
      rotateStream.sphere = function () {
        d3.geoStream(sphere(), sphereStream);
      };
      return rotateStream;
    };
    function sphere() {
      var step = 180 / n;
      return {
        type: "Polygon",
        coordinates: [d3.range(-180, 180 + step / 2, step).map(function (x, i) {
          return [x, i & 1 ? 90 - 1e-6 : healpixParallel];
        }).concat(d3.range(180, -180 - step / 2, -step).map(function (x, i) {
          return [x, i & 1 ? -90 + 1e-6 : -healpixParallel];
        }))]
      };
    }
    return p;
  }
  (d3.geoHealpix = healpixProjection).raw = healpix;
  function hill(K) {
    var L = 1 + K,
        sinβ = Math.sin(1 / L),
        β = asin(sinβ),
        A = 2 * Math.sqrt(π / (B = π + 4 * β * L)),
        B,
        ρ0 = .5 * A * (L + Math.sqrt(K * (2 + K))),
        K2 = K * K,
        L2 = L * L;
    function forward(λ, φ) {
      var t = 1 - Math.sin(φ),
          ρ,
          ω;
      if (t && t < 2) {
        var θ = halfπ - φ,
            i = 25,
            δ;
        do {
          var sinθ = Math.sin(θ),
              cosθ = Math.cos(θ),
              β_β1 = β + Math.atan2(sinθ, L - cosθ),
              C = 1 + L2 - 2 * L * cosθ;
          θ -= δ = (θ - K2 * β - L * sinθ + C * β_β1 - .5 * t * B) / (2 * L * sinθ * β_β1);
        } while (Math.abs(δ) > ε2 && --i > 0);
        ρ = A * Math.sqrt(C);
        ω = λ * β_β1 / π;
      } else {
        ρ = A * (K + t);
        ω = λ * β / π;
      }
      return [ρ * Math.sin(ω), ρ0 - ρ * Math.cos(ω)];
    }
    forward.invert = function (x, y) {
      var ρ2 = x * x + (y -= ρ0) * y,
          cosθ = (1 + L2 - ρ2 / (A * A)) / (2 * L),
          θ = acos(cosθ),
          sinθ = Math.sin(θ),
          β_β1 = β + Math.atan2(sinθ, L - cosθ);
      return [asin(x / Math.sqrt(ρ2)) * π / β_β1, asin(1 - 2 * (θ - K2 * β - L * sinθ + (1 + L2 - 2 * L * cosθ) * β_β1) / B)];
    };
    return forward;
  }
  function hillProjection() {
    var K = 1,
        m = projectionMutator(hill),
        p = m(K);
    p.ratio = function (_) {
      if (!arguments.length) return K;
      return m(K = +_);
    };
    return p;
  }
  (d3.geoHill = hillProjection).raw = hill;
  var sinuMollweideφ = .7109889596207567,
      sinuMollweideY = .0528035274542;
  function sinuMollweide(λ, φ) {
    return φ > -sinuMollweideφ ? (λ = mollweide(λ, φ), λ[1] += sinuMollweideY, λ) : sinusoidal(λ, φ);
  }
  sinuMollweide.invert = function (x, y) {
    return y > -sinuMollweideφ ? mollweide.invert(x, y - sinuMollweideY) : sinusoidal.invert(x, y);
  };
  (d3.geoSinuMollweide = function () {
    return projection(sinuMollweide).rotate([-20, -55]);
  }).raw = sinuMollweide;
  function homolosine(λ, φ) {
    return Math.abs(φ) > sinuMollweideφ ? (λ = mollweide(λ, φ), λ[1] -= φ > 0 ? sinuMollweideY : -sinuMollweideY, λ) : sinusoidal(λ, φ);
  }
  homolosine.invert = function (x, y) {
    return Math.abs(y) > sinuMollweideφ ? mollweide.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidal.invert(x, y);
  };
  (d3.geoHomolosine = function () {
    return projection(homolosine);
  }).raw = homolosine;
  function kavrayskiy7(λ, φ) {
    return [3 * λ / (2 * π) * Math.sqrt(π * π / 3 - φ * φ), φ];
  }
  kavrayskiy7.invert = function (x, y) {
    return [2 / 3 * π * x / Math.sqrt(π * π / 3 - y * y), y];
  };
  (d3.geoKavrayskiy7 = function () {
    return projection(kavrayskiy7);
  }).raw = kavrayskiy7;
  function lagrange(n) {
    function forward(λ, φ) {
      if (Math.abs(Math.abs(φ) - halfπ) < ε) return [0, φ < 0 ? -2 : 2];
      var sinφ = Math.sin(φ),
          v = Math.pow((1 + sinφ) / (1 - sinφ), n / 2),
          c = .5 * (v + 1 / v) + Math.cos(λ *= n);
      return [2 * Math.sin(λ) / c, (v - 1 / v) / c];
    }
    forward.invert = function (x, y) {
      var y0 = Math.abs(y);
      if (Math.abs(y0 - 2) < ε) return x ? null : [0, sgn(y) * halfπ];
      if (y0 > 2) return null;
      x /= 2, y /= 2;
      var x2 = x * x,
          y2 = y * y,
          t = 2 * y / (1 + x2 + y2);
      t = Math.pow((1 + t) / (1 - t), 1 / n);
      return [Math.atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1))];
    };
    return forward;
  }
  function lagrangeProjection() {
    var n = .5,
        m = projectionMutator(lagrange),
        p = m(n);
    p.spacing = function (_) {
      if (!arguments.length) return n;
      return m(n = +_);
    };
    return p;
  }
  (d3.geoLagrange = lagrangeProjection).raw = lagrange;
  function larrivee(λ, φ) {
    return [λ * (1 + Math.sqrt(Math.cos(φ))) / 2, φ / (Math.cos(φ / 2) * Math.cos(λ / 6))];
  }
  larrivee.invert = function (x, y) {
    var x0 = Math.abs(x),
        y0 = Math.abs(y),
        π_sqrt2 = π / Math.SQRT2,
        λ = ε,
        φ = halfπ;
    if (y0 < π_sqrt2) φ *= y0 / π_sqrt2;else λ += 6 * acos(π_sqrt2 / y0);
    for (var i = 0; i < 25; i++) {
      var sinφ = Math.sin(φ),
          sqrtcosφ = asqrt(Math.cos(φ)),
          sinφ_2 = Math.sin(φ / 2),
          cosφ_2 = Math.cos(φ / 2),
          sinλ_6 = Math.sin(λ / 6),
          cosλ_6 = Math.cos(λ / 6),
          f0 = .5 * λ * (1 + sqrtcosφ) - x0,
          f1 = φ / (cosφ_2 * cosλ_6) - y0,
          df0dφ = sqrtcosφ ? -.25 * λ * sinφ / sqrtcosφ : 0,
          df0dλ = .5 * (1 + sqrtcosφ),
          df1dφ = (1 + .5 * φ * sinφ_2 / cosφ_2) / (cosφ_2 * cosλ_6),
          df1dλ = φ / cosφ_2 * (sinλ_6 / 6) / (cosλ_6 * cosλ_6),
          denom = df0dφ * df1dλ - df1dφ * df0dλ,
          dφ = (f0 * df1dλ - f1 * df0dλ) / denom,
          dλ = (f1 * df0dφ - f0 * df1dφ) / denom;
      φ -= dφ;
      λ -= dλ;
      if (Math.abs(dφ) < ε && Math.abs(dλ) < ε) break;
    }
    return [x < 0 ? -λ : λ, y < 0 ? -φ : φ];
  };
  (d3.geoLarrivee = function () {
    return projection(larrivee);
  }).raw = larrivee;
  function laskowski(λ, φ) {
    var λ2 = λ * λ,
        φ2 = φ * φ;
    return [λ * (.975534 + φ2 * (-.119161 + λ2 * -.0143059 + φ2 * -.0547009)), φ * (1.00384 + λ2 * (.0802894 + φ2 * -.02855 + λ2 * 199025e-9) + φ2 * (.0998909 + φ2 * -.0491032))];
  }
  laskowski.invert = function (x, y) {
    var λ = sgn(x) * π,
        φ = y / 2,
        i = 50;
    do {
      var λ2 = λ * λ,
          φ2 = φ * φ,
          λφ = λ * φ,
          fx = λ * (.975534 + φ2 * (-.119161 + λ2 * -.0143059 + φ2 * -.0547009)) - x,
          fy = φ * (1.00384 + λ2 * (.0802894 + φ2 * -.02855 + λ2 * 199025e-9) + φ2 * (.0998909 + φ2 * -.0491032)) - y,
          δxδλ = .975534 - φ2 * (.119161 + 3 * λ2 * .0143059 + φ2 * .0547009),
          δxδφ = -λφ * (2 * .119161 + 4 * .0547009 * φ2 + 2 * .0143059 * λ2),
          δyδλ = λφ * (2 * .0802894 + 4 * 199025e-9 * λ2 + 2 * -.02855 * φ2),
          δyδφ = 1.00384 + λ2 * (.0802894 + 199025e-9 * λ2) + φ2 * (3 * (.0998909 - .02855 * λ2) - 5 * .0491032 * φ2),
          denominator = δxδφ * δyδλ - δyδφ * δxδλ,
          δλ = (fy * δxδφ - fx * δyδφ) / denominator,
          δφ = (fx * δyδλ - fy * δxδλ) / denominator;
      λ -= δλ, φ -= δφ;
    } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
    return i && [λ, φ];
  };
  (d3.geoLaskowski = function () {
    return projection(laskowski);
  }).raw = laskowski;
  function littrow(λ, φ) {
    return [Math.sin(λ) / Math.cos(φ), Math.tan(φ) * Math.cos(λ)];
  }
  littrow.invert = function (x, y) {
    var x2 = x * x,
        y2 = y * y,
        y2_1 = y2 + 1,
        cosφ = x ? Math.SQRT1_2 * Math.sqrt((y2_1 - Math.sqrt(x2 * x2 + 2 * x2 * (y2 - 1) + y2_1 * y2_1)) / x2 + 1) : 1 / Math.sqrt(y2_1);
    return [asin(x * cosφ), sgn(y) * acos(cosφ)];
  };
  (d3.geoLittrow = function () {
    return projection(littrow);
  }).raw = littrow;
  function loximuthal(φ0) {
    var cosφ0 = Math.cos(φ0),
        tanφ0 = Math.tan(π / 4 + φ0 / 2);
    function forward(λ, φ) {
      var y = φ - φ0,
          x = Math.abs(y) < ε ? λ * cosφ0 : Math.abs(x = π / 4 + φ / 2) < ε || Math.abs(Math.abs(x) - halfπ) < ε ? 0 : λ * y / Math.log(Math.tan(x) / tanφ0);
      return [x, y];
    }
    forward.invert = function (x, y) {
      var λ,
          φ = y + φ0;
      return [Math.abs(y) < ε ? x / cosφ0 : Math.abs(λ = π / 4 + φ / 2) < ε || Math.abs(Math.abs(λ) - halfπ) < ε ? 0 : x * Math.log(Math.tan(λ) / tanφ0) / y, φ];
    };
    return forward;
  }
  (d3.geoLoximuthal = function () {
    return parallel1Projection(loximuthal).parallel(40);
  }).raw = loximuthal;
  function miller(λ, φ) {
    return [λ, 1.25 * Math.log(Math.tan(π / 4 + .4 * φ))];
  }
  miller.invert = function (x, y) {
    return [x, 2.5 * Math.atan(Math.exp(.8 * y)) - .625 * π];
  };
  (d3.geoMiller = function () {
    return projection(miller);
  }).raw = miller;
  function modifiedStereographic(C) {
    var m = C.length - 1;
    function forward(λ, φ) {
      var cosφ = Math.cos(φ),
          k = 2 / (1 + cosφ * Math.cos(λ)),
          zr = k * cosφ * Math.sin(λ),
          zi = k * Math.sin(φ),
          i = m,
          w = C[i],
          ar = w[0],
          ai = w[1],
          t;
      while (--i >= 0) {
        w = C[i];
        ar = w[0] + zr * (t = ar) - zi * ai;
        ai = w[1] + zr * ai + zi * t;
      }
      ar = zr * (t = ar) - zi * ai;
      ai = zr * ai + zi * t;
      return [ar, ai];
    }
    forward.invert = function (x, y) {
      var i = 20,
          zr = x,
          zi = y;
      do {
        var j = m,
            w = C[j],
            ar = w[0],
            ai = w[1],
            br = 0,
            bi = 0,
            t;
        while (--j >= 0) {
          w = C[j];
          br = ar + zr * (t = br) - zi * bi;
          bi = ai + zr * bi + zi * t;
          ar = w[0] + zr * (t = ar) - zi * ai;
          ai = w[1] + zr * ai + zi * t;
        }
        br = ar + zr * (t = br) - zi * bi;
        bi = ai + zr * bi + zi * t;
        ar = zr * (t = ar) - zi * ai - x;
        ai = zr * ai + zi * t - y;
        var denominator = br * br + bi * bi,
            δr,
            δi;
        zr -= δr = (ar * br + ai * bi) / denominator;
        zi -= δi = (ai * br - ar * bi) / denominator;
      } while (Math.abs(δr) + Math.abs(δi) > ε * ε && --i > 0);
      if (i) {
        var ρ = Math.sqrt(zr * zr + zi * zi),
            c = 2 * Math.atan(ρ * .5),
            sinc = Math.sin(c);
        return [Math.atan2(zr * sinc, ρ * Math.cos(c)), ρ ? asin(zi * sinc / ρ) : 0];
      }
    };
    return forward;
  }
  var modifiedStereographicCoefficients = {
    alaska: [[.9972523, 0], [.0052513, -.0041175], [.0074606, .0048125], [-.0153783, -.1968253], [.0636871, -.1408027], [.3660976, -.2937382]],
    gs48: [[.98879, 0], [0, 0], [-.050909, 0], [0, 0], [.075528, 0]],
    gs50: [[.984299, 0], [.0211642, .0037608], [-.1036018, -.0575102], [-.0329095, -.0320119], [.0499471, .1223335], [.026046, .0899805], [7388e-7, -.1435792], [.0075848, -.1334108], [-.0216473, .0776645], [-.0225161, .0853673]],
    miller: [[.9245, 0], [0, 0], [.01943, 0]],
    lee: [[.721316, 0], [0, 0], [-.00881625, -.00617325]]
  };
  function modifiedStereographicProjection() {
    var coefficients = modifiedStereographicCoefficients.miller,
        m = projectionMutator(modifiedStereographic),
        p = m(coefficients);
    p.coefficients = function (_) {
      if (!arguments.length) return coefficients;
      return m(coefficients = typeof _ === "string" ? modifiedStereographicCoefficients[_] : _);
    };
    return p;
  }
  (d3.geoModifiedStereographic = modifiedStereographicProjection).raw = modifiedStereographic;
  function mtFlatPolarParabolic(λ, φ) {
    var sqrt6 = Math.sqrt(6),
        sqrt7 = Math.sqrt(7),
        θ = Math.asin(7 * Math.sin(φ) / (3 * sqrt6));
    return [sqrt6 * λ * (2 * Math.cos(2 * θ / 3) - 1) / sqrt7, 9 * Math.sin(θ / 3) / sqrt7];
  }
  mtFlatPolarParabolic.invert = function (x, y) {
    var sqrt6 = Math.sqrt(6),
        sqrt7 = Math.sqrt(7),
        θ = 3 * asin(y * sqrt7 / 9);
    return [x * sqrt7 / (sqrt6 * (2 * Math.cos(2 * θ / 3) - 1)), asin(Math.sin(θ) * 3 * sqrt6 / 7)];
  };
  (d3.geoMtFlatPolarParabolic = function () {
    return projection(mtFlatPolarParabolic);
  }).raw = mtFlatPolarParabolic;
  function mtFlatPolarQuartic(λ, φ) {
    var k = (1 + Math.SQRT1_2) * Math.sin(φ),
        θ = φ;
    for (var i = 0, δ; i < 25; i++) {
      θ -= δ = (Math.sin(θ / 2) + Math.sin(θ) - k) / (.5 * Math.cos(θ / 2) + Math.cos(θ));
      if (Math.abs(δ) < ε) break;
    }
    return [λ * (1 + 2 * Math.cos(θ) / Math.cos(θ / 2)) / (3 * Math.SQRT2), 2 * Math.sqrt(3) * Math.sin(θ / 2) / Math.sqrt(2 + Math.SQRT2)];
  }
  mtFlatPolarQuartic.invert = function (x, y) {
    var sinθ_2 = y * Math.sqrt(2 + Math.SQRT2) / (2 * Math.sqrt(3)),
        θ = 2 * asin(sinθ_2);
    return [3 * Math.SQRT2 * x / (1 + 2 * Math.cos(θ) / Math.cos(θ / 2)), asin((sinθ_2 + Math.sin(θ)) / (1 + Math.SQRT1_2))];
  };
  (d3.geoMtFlatPolarQuartic = function () {
    return projection(mtFlatPolarQuartic);
  }).raw = mtFlatPolarQuartic;
  function mtFlatPolarSinusoidal(λ, φ) {
    var A = Math.sqrt(6 / (4 + π)),
        k = (1 + π / 4) * Math.sin(φ),
        θ = φ / 2;
    for (var i = 0, δ; i < 25; i++) {
      θ -= δ = (θ / 2 + Math.sin(θ) - k) / (.5 + Math.cos(θ));
      if (Math.abs(δ) < ε) break;
    }
    return [A * (.5 + Math.cos(θ)) * λ / 1.5, A * θ];
  }
  mtFlatPolarSinusoidal.invert = function (x, y) {
    var A = Math.sqrt(6 / (4 + π)),
        θ = y / A;
    if (Math.abs(Math.abs(θ) - halfπ) < ε) θ = θ < 0 ? -halfπ : halfπ;
    return [1.5 * x / (A * (.5 + Math.cos(θ))), asin((θ / 2 + Math.sin(θ)) / (1 + π / 4))];
  };
  (d3.geoMtFlatPolarSinusoidal = function () {
    return projection(mtFlatPolarSinusoidal);
  }).raw = mtFlatPolarSinusoidal;
  function naturalEarth(λ, φ) {
    var φ2 = φ * φ,
        φ4 = φ2 * φ2;
    return [λ * (.8707 - .131979 * φ2 + φ4 * (-.013791 + φ4 * (.003971 * φ2 - .001529 * φ4))), φ * (1.007226 + φ2 * (.015085 + φ4 * (-.044475 + .028874 * φ2 - .005916 * φ4)))];
  }
  naturalEarth.invert = function (x, y) {
    var φ = y,
        i = 25,
        δ;
    do {
      var φ2 = φ * φ,
          φ4 = φ2 * φ2;
      φ -= δ = (φ * (1.007226 + φ2 * (.015085 + φ4 * (-.044475 + .028874 * φ2 - .005916 * φ4))) - y) / (1.007226 + φ2 * (.015085 * 3 + φ4 * (-.044475 * 7 + .028874 * 9 * φ2 - .005916 * 11 * φ4)));
    } while (Math.abs(δ) > ε && --i > 0);
    return [x / (.8707 + (φ2 = φ * φ) * (-.131979 + φ2 * (-.013791 + φ2 * φ2 * φ2 * (.003971 - .001529 * φ2)))), φ];
  };
  (d3.geoNaturalEarth = function () {
    return projection(naturalEarth);
  }).raw = naturalEarth;
  function nellHammer(λ, φ) {
    return [λ * (1 + Math.cos(φ)) / 2, 2 * (φ - Math.tan(φ / 2))];
  }
  nellHammer.invert = function (x, y) {
    var p = y / 2;
    for (var i = 0, δ = Infinity; i < 10 && Math.abs(δ) > ε; i++) {
      var c = Math.cos(y / 2);
      y -= δ = (y - Math.tan(y / 2) - p) / (1 - .5 / (c * c));
    }
    return [2 * x / (1 + Math.cos(y)), y];
  };
  (d3.geoNellHammer = function () {
    return projection(nellHammer);
  }).raw = nellHammer;
  var pattersonK1 = 1.0148,
      pattersonK2 = .23185,
      pattersonK3 = -.14499,
      pattersonK4 = .02406,
      pattersonC1 = pattersonK1,
      pattersonC2 = 5 * pattersonK2,
      pattersonC3 = 7 * pattersonK3,
      pattersonC4 = 9 * pattersonK4,
      pattersonYmax = 1.790857183;
  function patterson(λ, φ) {
    var φ2 = φ * φ;
    return [λ, φ * (pattersonK1 + φ2 * φ2 * (pattersonK2 + φ2 * (pattersonK3 + pattersonK4 * φ2)))];
  }
  patterson.invert = function (x, y) {
    if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;
    var yc = y,
        δ;
    do {
      var y2 = yc * yc;
      yc -= δ = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));
    } while (Math.abs(δ) > ε);
    return [x, yc];
  };
  (d3.geoPatterson = function () {
    return projection(patterson);
  }).raw = patterson;
  var peirceQuincuncialProjection = quincuncialProjection(guyou);
  (d3.geoPeirceQuincuncial = function () {
    return peirceQuincuncialProjection().quincuncial(true).rotate([-90, -90, 45]).clipAngle(180 - 1e-6);
  }).raw = peirceQuincuncialProjection.raw;
  function polyconic(λ, φ) {
    if (Math.abs(φ) < ε) return [λ, 0];
    var tanφ = Math.tan(φ),
        k = λ * Math.sin(φ);
    return [Math.sin(k) / tanφ, φ + (1 - Math.cos(k)) / tanφ];
  }
  polyconic.invert = function (x, y) {
    if (Math.abs(y) < ε) return [x, 0];
    var k = x * x + y * y,
        φ = y * .5,
        i = 10,
        δ;
    do {
      var tanφ = Math.tan(φ),
          secφ = 1 / Math.cos(φ),
          j = k - 2 * y * φ + φ * φ;
      φ -= δ = (tanφ * j + 2 * (φ - y)) / (2 + j * secφ * secφ + 2 * (φ - y) * tanφ);
    } while (Math.abs(δ) > ε && --i > 0);
    tanφ = Math.tan(φ);
    return [(Math.abs(y) < Math.abs(φ + 1 / tanφ) ? asin(x * tanφ) : sgn(x) * (acos(Math.abs(x * tanφ)) + halfπ)) / Math.sin(φ), φ];
  };
  (d3.geoPolyconic = function () {
    return projection(polyconic);
  }).raw = polyconic;
  function rectangularPolyconic(φ0) {
    var sinφ0 = Math.sin(φ0);
    function forward(λ, φ) {
      var A = sinφ0 ? Math.tan(λ * sinφ0 / 2) / sinφ0 : λ / 2;
      if (!φ) return [2 * A, -φ0];
      var E = 2 * Math.atan(A * Math.sin(φ)),
          cotφ = 1 / Math.tan(φ);
      return [Math.sin(E) * cotφ, φ + (1 - Math.cos(E)) * cotφ - φ0];
    }
    forward.invert = function (x, y) {
      if (Math.abs(y += φ0) < ε) return [sinφ0 ? 2 * Math.atan(sinφ0 * x / 2) / sinφ0 : x, 0];
      var k = x * x + y * y,
          φ = 0,
          i = 10,
          δ;
      do {
        var tanφ = Math.tan(φ),
            secφ = 1 / Math.cos(φ),
            j = k - 2 * y * φ + φ * φ;
        φ -= δ = (tanφ * j + 2 * (φ - y)) / (2 + j * secφ * secφ + 2 * (φ - y) * tanφ);
      } while (Math.abs(δ) > ε && --i > 0);
      var E = x * (tanφ = Math.tan(φ)),
          A = Math.tan(Math.abs(y) < Math.abs(φ + 1 / tanφ) ? asin(E) * .5 : acos(E) * .5 + π / 4) / Math.sin(φ);
      return [sinφ0 ? 2 * Math.atan(sinφ0 * A) / sinφ0 : 2 * A, φ];
    };
    return forward;
  }
  (d3.geoRectangularPolyconic = function () {
    return parallel1Projection(rectangularPolyconic);
  }).raw = rectangularPolyconic;
  var robinsonConstants = [[.9986, -.062], [1, 0], [.9986, .062], [.9954, .124], [.99, .186], [.9822, .248], [.973, .31], [.96, .372], [.9427, .434], [.9216, .4958], [.8962, .5571], [.8679, .6176], [.835, .6769], [.7986, .7346], [.7597, .7903], [.7186, .8435], [.6732, .8936], [.6213, .9394], [.5722, .9761], [.5322, 1]];
  robinsonConstants.forEach(function (d) {
    d[1] *= 1.0144;
  });
  function robinson(λ, φ) {
    var i = Math.min(18, Math.abs(φ) * 36 / π),
        i0 = Math.floor(i),
        di = i - i0,
        ax = (k = robinsonConstants[i0])[0],
        ay = k[1],
        bx = (k = robinsonConstants[++i0])[0],
        by = k[1],
        cx = (k = robinsonConstants[Math.min(19, ++i0)])[0],
        cy = k[1],
        k;
    return [λ * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (φ > 0 ? halfπ : -halfπ) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];
  }
  robinson.invert = function (x, y) {
    var yy = y / halfπ,
        φ = yy * 90,
        i = Math.min(18, Math.abs(φ / 5)),
        i0 = Math.max(0, Math.floor(i));
    do {
      var ay = robinsonConstants[i0][1],
          by = robinsonConstants[i0 + 1][1],
          cy = robinsonConstants[Math.min(19, i0 + 2)][1],
          u = cy - ay,
          v = cy - 2 * by + ay,
          t = 2 * (Math.abs(yy) - by) / u,
          c = v / u,
          di = t * (1 - c * t * (1 - 2 * c * t));
      if (di >= 0 || i0 === 1) {
        φ = (y >= 0 ? 5 : -5) * (di + i);
        var j = 50,
            δ;
        do {
          i = Math.min(18, Math.abs(φ) / 5);
          i0 = Math.floor(i);
          di = i - i0;
          ay = robinsonConstants[i0][1];
          by = robinsonConstants[i0 + 1][1];
          cy = robinsonConstants[Math.min(19, i0 + 2)][1];
          φ -= (δ = (y >= 0 ? halfπ : -halfπ) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;
        } while (Math.abs(δ) > ε2 && --j > 0);
        break;
      }
    } while (--i0 >= 0);
    var ax = robinsonConstants[i0][0],
        bx = robinsonConstants[i0 + 1][0],
        cx = robinsonConstants[Math.min(19, i0 + 2)][0];
    return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), φ * radians];
  };
  (d3.geoRobinson = function () {
    return projection(robinson);
  }).raw = robinson;
  function satelliteVertical(P) {
    function forward(λ, φ) {
      var cosφ = Math.cos(φ),
          k = (P - 1) / (P - cosφ * Math.cos(λ));
      return [k * cosφ * Math.sin(λ), k * Math.sin(φ)];
    }
    forward.invert = function (x, y) {
      var ρ2 = x * x + y * y,
          ρ = Math.sqrt(ρ2),
          sinc = (P - Math.sqrt(1 - ρ2 * (P + 1) / (P - 1))) / ((P - 1) / ρ + ρ / (P - 1));
      return [Math.atan2(x * sinc, ρ * Math.sqrt(1 - sinc * sinc)), ρ ? asin(y * sinc / ρ) : 0];
    };
    return forward;
  }
  function satellite(P, ω) {
    var vertical = satelliteVertical(P);
    if (!ω) return vertical;
    var cosω = Math.cos(ω),
        sinω = Math.sin(ω);
    function forward(λ, φ) {
      var coordinates = vertical(λ, φ),
          y = coordinates[1],
          A = y * sinω / (P - 1) + cosω;
      return [coordinates[0] * cosω / A, y / A];
    }
    forward.invert = function (x, y) {
      var k = (P - 1) / (P - 1 - y * sinω);
      return vertical.invert(k * x, k * y * cosω);
    };
    return forward;
  }
  function satelliteProjection() {
    var P = 1.4,
        ω = 0,
        m = projectionMutator(satellite),
        p = m(P, ω);
    p.distance = function (_) {
      if (!arguments.length) return P;
      return m(P = +_, ω);
    };
    p.tilt = function (_) {
      if (!arguments.length) return ω * 180 / π;
      return m(P, ω = _ * π / 180);
    };
    return p;
  }
  (d3.geoSatellite = satelliteProjection).raw = satellite;
  function times(λ, φ) {
    var t = Math.tan(φ / 2),
        s = Math.sin(π / 4 * t);
    return [λ * (.74482 - .34588 * s * s), 1.70711 * t];
  }
  times.invert = function (x, y) {
    var t = y / 1.70711,
        s = Math.sin(π / 4 * t);
    return [x / (.74482 - .34588 * s * s), 2 * Math.atan(t)];
  };
  (d3.geoTimes = function () {
    return projection(times);
  }).raw = times;
  function twoPointEquidistant(z0) {
    if (!z0) return d3.geoAzimuthalEquidistant.raw;
    var λa = -z0 / 2,
        λb = -λa,
        z02 = z0 * z0,
        tanλ0 = Math.tan(λb),
        S = .5 / Math.sin(λb);
    function forward(λ, φ) {
      var za = acos(Math.cos(φ) * Math.cos(λ - λa)),
          zb = acos(Math.cos(φ) * Math.cos(λ - λb)),
          ys = φ < 0 ? -1 : 1;
      za *= za, zb *= zb;
      return [(za - zb) / (2 * z0), ys * asqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)];
    }
    forward.invert = function (x, y) {
      var y2 = y * y,
          cosza = Math.cos(Math.sqrt(y2 + (t = x + λa) * t)),
          coszb = Math.cos(Math.sqrt(y2 + (t = x + λb) * t)),
          t,
          d;
      return [Math.atan2(d = cosza - coszb, t = (cosza + coszb) * tanλ0), (y < 0 ? -1 : 1) * acos(Math.sqrt(t * t + d * d) * S)];
    };
    return forward;
  }
  function twoPointEquidistantProjection() {
    var points = [[0, 0], [0, 0]],
        m = projectionMutator(twoPointEquidistant),
        p = m(0),
        rotate = p.rotate;
    delete p.rotate;
    p.points = function (_) {
      if (!arguments.length) return points;
      points = _;
      var interpolate = d3.geoInterpolate(_[0], _[1]),
          origin = interpolate(.5),
          p = d3.geoRotation([-origin[0], -origin[1]])(_[0]),
          b = interpolate.distance * .5,
          γ = -asin(Math.sin(p[1] * radians) / Math.sin(b));
      if (p[0] > 0) γ = π - γ;
      rotate.call(p, [-origin[0], -origin[1], -γ * degrees]);
      return m(b * 2);
    };
    return p;
  }
  (d3.geoTwoPointEquidistant = twoPointEquidistantProjection).raw = twoPointEquidistant;
  function twoPointAzimuthal(d) {
    var cosd = Math.cos(d);
    function forward(λ, φ) {
      var coordinates = d3.geoGnomonic.raw(λ, φ);
      coordinates[0] *= cosd;
      return coordinates;
    }
    forward.invert = function (x, y) {
      return d3.geoGnomonic.raw.invert(x / cosd, y);
    };
    return forward;
  }
  function twoPointAzimuthalProjection() {
    var points = [[0, 0], [0, 0]],
        m = projectionMutator(twoPointAzimuthal),
        p = m(0),
        rotate = p.rotate;
    delete p.rotate;
    p.points = function (_) {
      if (!arguments.length) return points;
      points = _;
      var interpolate = d3.geoInterpolate(_[0], _[1]),
          origin = interpolate(.5),
          p = d3.geoRotation([-origin[0], -origin[1]])(_[0]),
          b = interpolate.distance * .5,
          γ = -asin(Math.sin(p[1] * radians) / Math.sin(b));
      if (p[0] > 0) γ = π - γ;
      rotate.call(p, [-origin[0], -origin[1], -γ * degrees]);
      return m(b);
    };
    return p;
  }
  (d3.geoTwoPointAzimuthal = twoPointAzimuthalProjection).raw = twoPointAzimuthal;
  function vanDerGrinten(λ, φ) {
    if (Math.abs(φ) < ε) return [λ, 0];
    var sinθ = Math.abs(φ / halfπ),
        θ = asin(sinθ);
    if (Math.abs(λ) < ε || Math.abs(Math.abs(φ) - halfπ) < ε) return [0, sgn(φ) * π * Math.tan(θ / 2)];
    var cosθ = Math.cos(θ),
        A = Math.abs(π / λ - λ / π) / 2,
        A2 = A * A,
        G = cosθ / (sinθ + cosθ - 1),
        P = G * (2 / sinθ - 1),
        P2 = P * P,
        P2_A2 = P2 + A2,
        G_P2 = G - P2,
        Q = A2 + G;
    return [sgn(λ) * π * (A * G_P2 + Math.sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sgn(φ) * π * (P * Q - A * Math.sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];
  }
  vanDerGrinten.invert = function (x, y) {
    if (Math.abs(y) < ε) return [x, 0];
    if (Math.abs(x) < ε) return [0, halfπ * Math.sin(2 * Math.atan(y / π))];
    var x2 = (x /= π) * x,
        y2 = (y /= π) * y,
        x2_y2 = x2 + y2,
        z = x2_y2 * x2_y2,
        c1 = -Math.abs(y) * (1 + x2_y2),
        c2 = c1 - 2 * y2 + x2,
        c3 = -2 * c1 + 1 + 2 * y2 + z,
        d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,
        a1 = (c1 - c2 * c2 / (3 * c3)) / c3,
        m1 = 2 * Math.sqrt(-a1 / 3),
        θ1 = acos(3 * d / (a1 * m1)) / 3;
    return [π * (x2_y2 - 1 + Math.sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sgn(y) * π * (-m1 * Math.cos(θ1 + π / 3) - c2 / (3 * c3))];
  };
  (d3.geoVanDerGrinten = function () {
    return projection(vanDerGrinten);
  }).raw = vanDerGrinten;
  function vanDerGrinten2(λ, φ) {
    if (Math.abs(φ) < ε) return [λ, 0];
    var sinθ = Math.abs(φ / halfπ),
        θ = asin(sinθ);
    if (Math.abs(λ) < ε || Math.abs(Math.abs(φ) - halfπ) < ε) return [0, sgn(φ) * π * Math.tan(θ / 2)];
    var cosθ = Math.cos(θ),
        A = Math.abs(π / λ - λ / π) / 2,
        A2 = A * A,
        x1 = cosθ * (Math.sqrt(1 + A2) - A * cosθ) / (1 + A2 * sinθ * sinθ);
    return [sgn(λ) * π * x1, sgn(φ) * π * asqrt(1 - x1 * (2 * A + x1))];
  }
  vanDerGrinten2.invert = function (x, y) {
    if (!x) return [0, halfπ * Math.sin(2 * Math.atan(y / π))];
    var x1 = Math.abs(x / π),
        A = (1 - x1 * x1 - (y /= π) * y) / (2 * x1),
        A2 = A * A,
        B = Math.sqrt(A2 + 1);
    return [sgn(x) * π * (B - A), sgn(y) * halfπ * Math.sin(2 * Math.atan2(Math.sqrt((1 - 2 * A * x1) * (A + B) - x1), Math.sqrt(B + A + x1)))];
  };
  (d3.geoVanDerGrinten2 = function () {
    return projection(vanDerGrinten2);
  }).raw = vanDerGrinten2;
  function vanDerGrinten3(λ, φ) {
    if (Math.abs(φ) < ε) return [λ, 0];
    var sinθ = φ / halfπ,
        θ = asin(sinθ);
    if (Math.abs(λ) < ε || Math.abs(Math.abs(φ) - halfπ) < ε) return [0, π * Math.tan(θ / 2)];
    var A = (π / λ - λ / π) / 2,
        y1 = sinθ / (1 + Math.cos(θ));
    return [π * (sgn(λ) * asqrt(A * A + 1 - y1 * y1) - A), π * y1];
  }
  vanDerGrinten3.invert = function (x, y) {
    if (!y) return [x, 0];
    var y1 = y / π,
        A = (π * π * (1 - y1 * y1) - x * x) / (2 * π * x);
    return [x ? π * (sgn(x) * Math.sqrt(A * A + 1) - A) : 0, halfπ * Math.sin(2 * Math.atan(y1))];
  };
  (d3.geoVanDerGrinten3 = function () {
    return projection(vanDerGrinten3);
  }).raw = vanDerGrinten3;
  function vanDerGrinten4(λ, φ) {
    if (!φ) return [λ, 0];
    var φ0 = Math.abs(φ);
    if (!λ || φ0 === halfπ) return [0, φ];
    var B = φ0 / halfπ,
        B2 = B * B,
        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
        C2 = C * C,
        BC = B * C,
        B_C2 = B2 + C2 + 2 * BC,
        B_3C = B + 3 * C,
        λ0 = λ / halfπ,
        λ1 = λ0 + 1 / λ0,
        D = sgn(Math.abs(λ) - halfπ) * Math.sqrt(λ1 * λ1 - 4),
        D2 = D * D,
        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),
        x1 = (D * (B_C2 + C2 - 1) + 2 * asqrt(F)) / (4 * B_C2 + D2);
    return [sgn(λ) * halfπ * x1, sgn(φ) * halfπ * asqrt(1 + D * Math.abs(x1) - x1 * x1)];
  }
  vanDerGrinten4.invert = function (x, y) {
    if (!x || !y) return [x, y];
    y /= π;
    var x1 = sgn(x) * x / halfπ,
        D = (x1 * x1 - 1 + 4 * y * y) / Math.abs(x1),
        D2 = D * D,
        B = 2 * y,
        i = 50;
    do {
      var B2 = B * B,
          C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),
          C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),
          C2 = C * C,
          BC = B * C,
          B_C = B + C,
          B_C2 = B_C * B_C,
          B_3C = B + 3 * C,
          F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),
          F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),
          sqrtF = Math.sqrt(F),
          f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),
          f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);
      B -= δ = f / f_;
    } while (δ > ε && --i > 0);
    return [sgn(x) * (Math.sqrt(D * D + 4) + D) * π / 4, halfπ * B];
  };
  (d3.geoVanDerGrinten4 = function () {
    return projection(vanDerGrinten4);
  }).raw = vanDerGrinten4;
  var wagner4 = function () {
    var A = 4 * π + 3 * Math.sqrt(3),
        B = 2 * Math.sqrt(2 * π * Math.sqrt(3) / A);
    return mollweideBromley(B * Math.sqrt(3) / π, B, A / 6);
  }();
  (d3.geoWagner4 = function () {
    return projection(wagner4);
  }).raw = wagner4;
  function wagner6(λ, φ) {
    return [λ * Math.sqrt(1 - 3 * φ * φ / (π * π)), φ];
  }
  wagner6.invert = function (x, y) {
    return [x / Math.sqrt(1 - 3 * y * y / (π * π)), y];
  };
  (d3.geoWagner6 = function () {
    return projection(wagner6);
  }).raw = wagner6;
  function wagner7(λ, φ) {
    var s = .90631 * Math.sin(φ),
        c0 = Math.sqrt(1 - s * s),
        c1 = Math.sqrt(2 / (1 + c0 * Math.cos(λ /= 3)));
    return [2.66723 * c0 * c1 * Math.sin(λ), 1.24104 * s * c1];
  }
  wagner7.invert = function (x, y) {
    var t1 = x / 2.66723,
        t2 = y / 1.24104,
        p = Math.sqrt(t1 * t1 + t2 * t2),
        c = 2 * asin(p / 2);
    return [3 * Math.atan2(x * Math.tan(c), 2.66723 * p), p && asin(y * Math.sin(c) / (1.24104 * .90631 * p))];
  };
  (d3.geoWagner7 = function () {
    return projection(wagner7);
  }).raw = wagner7;
  function wiechel(λ, φ) {
    var cosφ = Math.cos(φ),
        sinφ = Math.cos(λ) * cosφ,
        sin1_φ = 1 - sinφ,
        cosλ = Math.cos(λ = Math.atan2(Math.sin(λ) * cosφ, -Math.sin(φ))),
        sinλ = Math.sin(λ);
    cosφ = asqrt(1 - sinφ * sinφ);
    return [sinλ * cosφ - cosλ * sin1_φ, -cosλ * cosφ - sinλ * sin1_φ];
  }
  wiechel.invert = function (x, y) {
    var w = -.5 * (x * x + y * y),
        k = Math.sqrt(-w * (2 + w)),
        b = y * w + x * k,
        a = x * w - y * k,
        D = Math.sqrt(a * a + b * b);
    return [Math.atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0];
  };
  (d3.geoWiechel = function () {
    return projection(wiechel);
  }).raw = wiechel;
  function winkel3(λ, φ) {
    var coordinates = aitoff(λ, φ);
    return [(coordinates[0] + λ / halfπ) / 2, (coordinates[1] + φ) / 2];
  }
  winkel3.invert = function (x, y) {
    var λ = x,
        φ = y,
        i = 25;
    do {
      var cosφ = Math.cos(φ),
          sinφ = Math.sin(φ),
          sin_2φ = Math.sin(2 * φ),
          sin2φ = sinφ * sinφ,
          cos2φ = cosφ * cosφ,
          sinλ = Math.sin(λ),
          cosλ_2 = Math.cos(λ / 2),
          sinλ_2 = Math.sin(λ / 2),
          sin2λ_2 = sinλ_2 * sinλ_2,
          C = 1 - cos2φ * cosλ_2 * cosλ_2,
          E = C ? acos(cosφ * cosλ_2) * Math.sqrt(F = 1 / C) : F = 0,
          F,
          fx = .5 * (2 * E * cosφ * sinλ_2 + λ / halfπ) - x,
          fy = .5 * (E * sinφ + φ) - y,
          δxδλ = .5 * F * (cos2φ * sin2λ_2 + E * cosφ * cosλ_2 * sin2φ) + .5 / halfπ,
          δxδφ = F * (sinλ * sin_2φ / 4 - E * sinφ * sinλ_2),
          δyδλ = .125 * F * (sin_2φ * sinλ_2 - E * sinφ * cos2φ * sinλ),
          δyδφ = .5 * F * (sin2φ * cosλ_2 + E * sin2λ_2 * cosφ) + .5,
          denominator = δxδφ * δyδλ - δyδφ * δxδλ,
          δλ = (fy * δxδφ - fx * δyδφ) / denominator,
          δφ = (fx * δyδλ - fy * δxδλ) / denominator;
      λ -= δλ, φ -= δφ;
    } while ((Math.abs(δλ) > ε || Math.abs(δφ) > ε) && --i > 0);
    return [λ, φ];
  };
  (d3.geoWinkel3 = function () {
    return projection(winkel3);
  }).raw = winkel3;
};

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = __webpack_require__(1);

var utils = _interopRequireWildcard(_utils);

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

var _css = __webpack_require__(437);

var _css2 = _interopRequireDefault(_css);

var _iconset = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var label = function label(context) {

  return function d3_label() {

    var _this = context;

    var _cssPrefix = void 0;
    label.setCssPrefix = function (cssPrefix) {
      _cssPrefix = cssPrefix;
      return label;
    };

    var labelDragger = d3.drag().on("start", function (d, i) {
      d3.event.sourceEvent.stopPropagation();
      var KEY = _this.KEY;
    }).on("drag", function (d, i) {
      var KEY = _this.KEY;
      if (!_this.model.ui.chart.labels.dragging) return;
      if (!this.druging) _this.druging = d[KEY];
      var cache = _this.cached[d[KEY]];
      cache.labelFixed = true;

      var viewWidth = _this.context.width;
      var viewHeight = _this.context.height;

      cache.labelX_ += d3.event.dx / viewWidth;
      cache.labelY_ += d3.event.dy / viewHeight;

      var resolvedX = _this.xScale(cache.labelX0) + cache.labelX_ * viewWidth;
      var resolvedY = _this.yScale(cache.labelY0) + cache.labelY_ * viewHeight;

      var resolvedX0 = _this.xScale(cache.labelX0);
      var resolvedY0 = _this.yScale(cache.labelY0);

      var lineGroup = _this.entityLines.filter(function (f) {
        return f[KEY] == d[KEY];
      });

      label._repositionLabels(d, i, null, this, resolvedX, resolvedY, resolvedX0, resolvedY0, 0, null, lineGroup);
    }).on("end", function (d, i) {
      var KEY = _this.KEY;
      if (_this.druging) {
        var cache = _this.cached[d[KEY]];
        _this.druging = null;
        cache.labelOffset[0] = cache.labelX_;
        cache.labelOffset[1] = cache.labelY_;
        _this.model.marker.setLabelOffset(d, [cache.labelX_, cache.labelY_]);
      }
    });

    function label(container, isTooltip) {
      container.each(function (d, index) {
        var view = d3.select(this);

        // Ola: Clicking bubble label should not zoom to countries boundary #811
        // It's too easy to accidentally zoom
        // This feature will be activated later, by making the label into a "context menu" where users can click Split, or zoom,.. hide others etc....

        view.append("rect").attr("class", "vzb-label-glow").attr("filter", "url(" + location.pathname + "#vzb-glow-filter)");
        view.append("rect").attr("class", "vzb-label-fill vzb-tooltip-border");
        //          .on("click", function(d, i) {
        //            //default prevented is needed to distinguish click from drag
        //            if(d3.event.defaultPrevented) return;
        //
        //            var maxmin = _this.cached[d[KEY]].maxMinValues;
        //            var radius = utils.areaToRadius(_this.sScale(maxmin.valueSmax));
        //            _this._panZoom._zoomOnRectangle(_this.element,
        //              _this.xScale(maxmin.valueXmin) - radius,
        //              _this.yScale(maxmin.valueYmin) + radius,
        //              _this.xScale(maxmin.valueXmax) + radius,
        //              _this.yScale(maxmin.valueYmax) - radius,
        //              false, 500);
        //          });

        var text = view.append("text").attr("class", _cssPrefix + "-label-content stroke");
        if (!view.style("paint-order").length) {
          view.insert("text", "." + _cssPrefix + "-label-content").attr("class", _cssPrefix + "-label-content " + _cssPrefix + "-label-shadow vzb-noexport");

          text.classed("stroke", false);
        }

        if (!isTooltip) {
          var cross = view.append("g").attr("class", _cssPrefix + "-label-x vzb-transparent");
          utils.setIcon(cross, _iconset.close);

          cross.insert("circle", "svg");

          cross.select("svg").attr("class", _cssPrefix + "-label-x-icon").attr("width", "0px").attr("height", "0px");

          cross.on("click", function () {
            //default prevented is needed to distinguish click from drag
            if (d3.event.defaultPrevented) return;
            d3.event.stopPropagation();
            _this.model.marker.clearHighlighted();
            _this.model.marker.selectMarker(d);
          });
        }
      });

      if (!isTooltip) {
        container.call(labelDragger).on("mouseover", function (d) {
          if (utils.isTouchDevice()) return;
          _this.model.marker.highlightMarker(d);
          var KEY = _this.KEY || _this.context.KEY;
          // hovered label should be on top of other labels: if "a" is not the hovered element "d", send "a" to the back
          _this.entityLabels.sort(function (a, b) {
            return a[KEY] != d[KEY] ? -1 : 1;
          });
          d3.select(this).selectAll("." + _cssPrefix + "-label-x").classed("vzb-transparent", false);
        }).on("mouseout", function (d) {
          if (utils.isTouchDevice()) return;
          _this.model.marker.clearHighlighted();
          d3.select(this).selectAll("." + _cssPrefix + "-label-x").classed("vzb-transparent", true);
        }).on("click", function (d) {
          if (!utils.isTouchDevice()) return;
          var cross = d3.select(this).selectAll("." + _cssPrefix + "-label-x");
          var KEY = _this.KEY || _this.context.KEY;
          var hidden = cross.classed("vzb-transparent");
          if (hidden) {
            // hovered label should be on top of other labels: if "a" is not the hovered element "d", send "a" to the back
            _this.entityLabels.sort(function (a, b) {
              return a[KEY] != d[KEY] ? -1 : 1;
            });
            _this.showCloseCross(null, false);
          }
          cross.classed("vzb-transparent", !hidden);
          if (!_this.options.SUPPRESS_HIGHLIGHT_DURING_PLAY || !_this.model.time.playing) {
            if (hidden) {
              _this.model.marker.setHighlight(d);
            } else {
              _this.model.marker.clearHighlighted();
            }
          }
        });
      }

      return label;
    }

    label.line = function (container) {
      container.append("line").attr("class", _cssPrefix + "-label-line");
    };

    label._repositionLabels = _repositionLabels;
    function _repositionLabels(d, i, _cache, labelContext, _X, _Y, _X0, _Y0, duration, showhide, lineGroup) {

      var cache = _cache || _this.cached[d[_this.KEY]];

      var labelGroup = d3.select(labelContext);

      //protect label and line from the broken data
      var brokenInputs = !_X && _X !== 0 || !_Y && _Y !== 0 || !_X0 && _X0 !== 0 || !_Y0 && _Y0 !== 0;
      if (brokenInputs) {
        labelGroup.classed("vzb-invisible", brokenInputs);
        lineGroup.classed("vzb-invisible", brokenInputs);
        return;
      }

      var viewWidth = _this.context.width;
      var viewHeight = _this.context.height;
      var rectBBox = cache.rectBBox;
      var height = rectBBox.height;
      var offsetX = cache.rectOffsetX;
      var offsetY = cache.rectOffsetY;

      //apply limits so that the label doesn't stick out of the visible field
      if (_X + rectBBox.x <= 0) {
        //check left
        _X = -rectBBox.x;
        cache.labelX_ = (_X - _this.xScale(cache.labelX0)) / viewWidth;
      } else if (_X + offsetX > viewWidth) {
        //check right
        _X = viewWidth - offsetX;
        cache.labelX_ = (_X - _this.xScale(cache.labelX0)) / viewWidth;
      }
      if (_Y + rectBBox.y <= 0) {
        // check top
        _Y = -rectBBox.y;
        cache.labelY_ = (_Y - _this.yScale(cache.labelY0)) / viewHeight;
      } else if (_Y + offsetY > viewHeight) {
        //check bottom
        _Y = viewHeight - offsetY;
        cache.labelY_ = (_Y - _this.yScale(cache.labelY0)) / viewHeight;
      }
      // if (_Y - height * 0.75 <= 0) { // check top
      //   _Y = height * 0.75;
      //   cache.labelY_ = (_Y - _this.yScale(cache.labelY0)) / viewHeight;
      // } else if (_Y + height * 0.35 > viewHeight) { //check bottom
      //   _Y = viewHeight - height * 0.35;
      //   cache.labelY_ = (_Y - _this.yScale(cache.labelY0)) / viewHeight;
      // }

      if (duration == null) duration = _this.context.duration;
      if (cache._new) {
        duration = 0;
        delete cache._new;
      }
      if (duration) {
        if (showhide && !d.hidden) {
          //if need to show label

          labelGroup.classed("vzb-invisible", d.hidden);
          labelGroup.attr("transform", "translate(" + _X + "," + _Y + ")").style("opacity", 0).transition().duration(duration).ease(d3.easeExp).style("opacity", 1)
          //i would like to set opactiy to null in the end of transition.
          //but then fade in animation is not working for some reason
          .on("interrupt", function () {
            labelGroup.style("opacity", 1);
          });
          lineGroup.classed("vzb-invisible", d.hidden);
          lineGroup.attr("transform", "translate(" + _X + "," + _Y + ")").style("opacity", 0).transition().duration(duration).ease(d3.easeExp).style("opacity", 1)
          //i would like to set opactiy to null in the end of transition.
          //but then fade in animation is not working for some reason
          .on("interrupt", function () {
            lineGroup.style("opacity", 1);
          });
        } else if (showhide && d.hidden) {
          //if need to hide label

          labelGroup.style("opacity", 1).transition().duration(duration).ease(d3.easeExp).style("opacity", 0).on("end", function () {
            labelGroup.style("opacity", 1) //i would like to set it to null. but then fade in animation is not working for some reason
            .classed("vzb-invisible", d.hidden);
          });
          lineGroup.style("opacity", 1).transition().duration(duration).ease(d3.easeExp).style("opacity", 0).on("end", function () {
            lineGroup.style("opacity", 1) //i would like to set it to null. but then fade in animation is not working for some reason
            .classed("vzb-invisible", d.hidden);
          });
        } else {
          // just update the position

          labelGroup.transition().duration(duration).ease(d3.easeLinear).attr("transform", "translate(" + _X + "," + _Y + ")");
          lineGroup.transition().duration(duration).ease(d3.easeLinear).attr("transform", "translate(" + _X + "," + _Y + ")");
        }
      } else {
        labelGroup.interrupt().attr("transform", "translate(" + _X + "," + _Y + ")").transition();
        lineGroup.interrupt().attr("transform", "translate(" + _X + "," + _Y + ")").transition();
        if (showhide) labelGroup.classed("vzb-invisible", d.hidden);
        if (showhide) lineGroup.classed("vzb-invisible", d.hidden);
      }

      var diffX1 = _X0 - _X;
      var diffY1 = _Y0 - _Y;
      var textBBox = labelGroup.select("text").node().getBBox();
      var diffX2 = -textBBox.width * 0.5;
      var diffY2 = -height * 0.2;
      var labels = _this.model.ui.chart.labels;

      var bBox = labels.removeLabelBox ? textBBox : rectBBox;

      var FAR_COEFF = _this.activeProfile.labelLeashCoeff || 0;

      var lineHidden = circleRectIntersects({ x: diffX1, y: diffY1, r: cache.scaledS0 }, { x: diffX2, y: diffY2, width: bBox.height * 2 * FAR_COEFF + bBox.width, height: bBox.height * (2 * FAR_COEFF + 1) });
      lineGroup.select("line").classed("vzb-invisible", lineHidden);
      if (lineHidden) return;

      if (labels.removeLabelBox) {
        var angle = Math.atan2(diffX1 - diffX2, diffY1 - diffY2) * 180 / Math.PI;
        var deltaDiffX2 = angle >= 0 && angle <= 180 ? bBox.width * 0.5 : -bBox.width * 0.5;
        var deltaDiffY2 = Math.abs(angle) <= 90 ? bBox.height * 0.55 : -bBox.height * 0.45;
        diffX2 += Math.abs(diffX1 - diffX2) > textBBox.width * 0.5 ? deltaDiffX2 : 0;
        diffY2 += Math.abs(diffY1 - diffY2) > textBBox.height * 0.5 ? deltaDiffY2 : textBBox.height * 0.05;
      }

      var longerSideCoeff = Math.abs(diffX1) > Math.abs(diffY1) ? Math.abs(diffX1) : Math.abs(diffY1);
      lineGroup.select("line").style("stroke-dasharray", "0 " + cache.scaledS0 + " " + ~~longerSideCoeff * 2);

      lineGroup.selectAll("line").attr("x1", diffX1).attr("y1", diffY1).attr("x2", diffX2).attr("y2", diffY2);
    }

    /*
    * Adapted from
    * http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection
    *
    * circle {
    *  x: center X
    *  y: center Y
    *  r: radius
    * }
    *
    * rect {
    *  x: center X
    *  y: center Y
    *  width: width
    *  height: height
    * }
    */
    function circleRectIntersects(circle, rect) {
      var circleDistanceX = Math.abs(circle.x - rect.x);
      var circleDistanceY = Math.abs(circle.y - rect.y);
      var halfRectWidth = rect.width * 0.5;
      var halfRectHeight = rect.height * 0.5;

      if (circleDistanceX > halfRectWidth + circle.r) {
        return false;
      }
      if (circleDistanceY > halfRectHeight + circle.r) {
        return false;
      }

      if (circleDistanceX <= halfRectWidth) {
        return true;
      }
      if (circleDistanceY <= halfRectHeight) {
        return true;
      }

      var cornerDistance_sq = Math.pow(circleDistanceX - halfRectWidth, 2) + Math.pow(circleDistanceY - halfRectHeight, 2);

      return cornerDistance_sq <= Math.pow(circle.r, 2);
    }

    return label;
  }();
};

var OPTIONS = {
  LABELS_CONTAINER_CLASS: "",
  LINES_CONTAINER_CLASS: "",
  LINES_CONTAINER_SELECTOR: "",
  CSS_PREFIX: "",
  SUPPRESS_HIGHLIGHT_DURING_PLAY: true
};

var Labels = _class2.default.extend({
  init: function init(context, conditions) {
    var _this = this;
    this.context = context;

    this.options = utils.extend({}, OPTIONS);
    this.label = label(this);
    this._xScale = null;
    this._yScale = null;
    this._closeCrossHeight = 0;
    this.labelSizeTextScale = null;
  },
  ready: function ready() {
    this.KEYS = this.context.KEYS;
    this.KEY = this.context.KEY;
    this.updateIndicators();
    this.updateLabelSizeLimits();
    //this.updateLabelsOnlyTextSize();
  },
  readyOnce: function readyOnce() {
    var _this = this;

    this.model = this.context.model;

    this.model.on("change:marker.select", function () {
      if (!_this.context._readyOnce) return;
      //console.log("EVENT change:entities:select");
      _this.selectDataPoints();
    });

    if (this.model.marker.size_label) this.model.on("change:marker.size_label.extent", function (evt, path) {
      //console.log("EVENT change:marker:size:max");
      if (!_this.context._readyOnce) return;
      _this.updateLabelSizeLimits();
      if (_this.model.time.splash) return;
      _this.updateLabelsOnlyTextSize();
    });

    if (this.model.ui.chart.labels.hasOwnProperty("removeLabelBox")) this.model.on("change:ui.chart.labels.removeLabelBox", function (evt, path) {
      //console.log("EVENT change:marker:size:max");
      if (!_this.context._readyOnce) return;
      _this.updateLabelsOnlyTextSize();
    });

    this.KEYS = this.context.KEYS;
    this.KEY = this.context.KEY;

    this.cached = {};

    this.label.setCssPrefix(this.options.CSS_PREFIX);

    this.rootEl = this.context.root.element instanceof Array ? this.context.root.element : d3.select(this.context.root.element);
    this.labelsContainer = this.rootEl.select("." + this.options.LABELS_CONTAINER_CLASS);
    this.linesContainer = this.rootEl.select("." + this.options.LINES_CONTAINER_CLASS);
    this.updateIndicators();
    this.updateSize();
    this.selectDataPoints();
    this._initLabelTooltip();
  },
  config: function config(newOptions) {
    utils.extend(this.options, newOptions);
  },
  updateLabelSizeLimits: function updateLabelSizeLimits() {
    var _this = this;
    if (!this.model.marker.size_label) return;
    var extent = this.model.marker.size_label.extent || [0, 1];

    var minLabelTextSize = this.activeProfile.minLabelTextSize;
    var maxLabelTextSize = this.activeProfile.maxLabelTextSize;
    var minMaxDelta = maxLabelTextSize - minLabelTextSize;

    this.minLabelTextSize = Math.max(minLabelTextSize + minMaxDelta * extent[0], minLabelTextSize);
    this.maxLabelTextSize = Math.max(minLabelTextSize + minMaxDelta * extent[1], minLabelTextSize);

    if (this.model.marker.size_label.use == "constant") {
      // if(!this.model.marker.size_label.which) {
      //   this.maxLabelTextSize = this.activeProfile.defaultLabelTextSize;
      //   this.model.marker.size_label.set({'domainMax': (this.maxLabelTextSize - minLabelTextSize) / minMaxDelta, 'which': '_default'});
      //   return;
      // }
      this.minLabelTextSize = this.maxLabelTextSize;
    }

    if (this.model.marker.size_label.scaleType !== "ordinal" || this.model.marker.size_label.use == "constant") {
      this.labelSizeTextScale.range([_this.minLabelTextSize, _this.maxLabelTextSize]);
    } else {
      this.labelSizeTextScale.rangePoints([_this.minLabelTextSize, _this.maxLabelTextSize], 0).range();
    }
  },
  updateIndicators: function updateIndicators() {
    var _this = this;

    //scales
    if (this.model.marker.size_label) {
      this.labelSizeTextScale = this.model.marker.size_label.getScale();
    }
  },
  setScales: function setScales(xScale, yScale) {
    this._xScale = xScale;
    this._yScale = yScale;
  },
  setCloseCrossHeight: function setCloseCrossHeight(closeCrossHeight) {
    if (this._closeCrossHeight != closeCrossHeight) {
      this._closeCrossHeight = closeCrossHeight;
      this.updateLabelCloseGroupSize(this.entityLabels.selectAll("." + this.options.CSS_PREFIX + "-label-x"), this._closeCrossHeight);
    }
  },
  xScale: function xScale(x) {
    return this._xScale ? this._xScale(x) : x * this.context.width;
  },
  yScale: function yScale(y) {
    return this._yScale ? this._yScale(y) : y * this.context.height;
  },
  selectDataPoints: function selectDataPoints() {
    var _this = this;
    var KEYS = this.KEYS;
    var KEY = this.KEY;
    var _cssPrefix = this.options.CSS_PREFIX;

    var select = _this.model.marker.select.map(function (d) {
      var p = utils.clone(d, KEYS);
      p[KEY] = utils.getKey(d, KEYS);
      return p;
    });
    this.entityLabels = this.labelsContainer.selectAll("." + _cssPrefix + "-entity").data(select, function (d) {
      return d[KEY];
    });
    this.entityLines = this.linesContainer.selectAll("g.entity-line." + _cssPrefix + "-entity").data(select, function (d) {
      return d[KEY];
    });

    this.entityLabels.exit().each(function (d) {
      if (_this.cached[d[KEY]] != null) {
        _this.cached[d[KEY]] = void 0;
      }
    }).remove();
    this.entityLines.exit().remove();

    this.entityLines = this.entityLines.enter().insert("g", function (d) {
      return this.querySelector("." + _this.options.LINES_CONTAINER_SELECTOR_PREFIX + (0, _css2.default)(d[KEY]));
    }).attr("class", function (d, index) {
      return _cssPrefix + "-entity entity-line line-" + d[KEY];
    }).each(function (d, index) {
      _this.label.line(d3.select(this));
    }).merge(this.entityLines);

    this.entityLabels = this.entityLabels.enter().append("g").attr("class", function (d, index) {
      return _cssPrefix + "-entity label-" + d[KEY];
    }).each(function (d, index) {
      _this.cached[d[KEY]] = { _new: true };
      _this.label(d3.select(this));
    }).merge(this.entityLabels);
  },
  showCloseCross: function showCloseCross(d, show) {
    var KEY = this.KEY;
    //show the little cross on the selected label
    this.entityLabels.filter(function (f) {
      return d ? f[KEY] == d[KEY] : true;
    }).select("." + this.options.CSS_PREFIX + "-label-x").classed("vzb-transparent", !show);
  },
  highlight: function highlight(d, _highlight) {
    var KEY = this.KEY;
    var labels = this.entityLabels;
    if (d) {
      labels = labels.filter(function (f) {
        return d ? f[KEY] == d[KEY] : true;
      });
    }
    labels.classed("vzb-highlighted", _highlight);
  },
  updateLabel: function updateLabel(d, index, cache, valueX, valueY, valueS, valueC, valueL, valueLST, duration, showhide) {
    var _this = this;
    var KEYS = this.KEYS;
    var KEY = this.KEY;
    if (d[KEY] == _this.druging) return;

    var _cssPrefix = this.options.CSS_PREFIX;

    // only for selected entities
    if (_this.model.marker.isSelected(d) && _this.entityLabels != null) {
      if (_this.cached[d[KEY]] == null) this.selectDataPoints();

      var cached = _this.cached[d[KEY]];
      if (cache) utils.extend(cached, cache);

      if (cached.scaledS0 == null || cached.labelX0 == null || cached.labelY0 == null) {
        //initialize label once
        this._initNewCache(cached, valueX, valueY, valueS, valueC, valueLST);
      }

      if (cached.labelX_ == null || cached.labelY_ == null) {
        var select = utils.find(_this.model.marker.select, function (f) {
          return utils.getKey(f, KEYS) == d[KEY];
        });
        cached.labelOffset = select.labelOffset || [0, 0];
      }

      var brokenInputs = !cached.labelX0 && cached.labelX0 !== 0 || !cached.labelY0 && cached.labelY0 !== 0 || !cached.scaledS0 && cached.scaledS0 !== 0;

      var lineGroup = _this.entityLines.filter(function (f) {
        return f[KEY] == d[KEY];
      });
      // reposition label
      _this.entityLabels.filter(function (f) {
        return f[KEY] == d[KEY];
      }).each(function (groupData) {

        var labelGroup = d3.select(this);

        if (brokenInputs) {
          labelGroup.classed("vzb-invisible", brokenInputs);
          lineGroup.classed("vzb-invisible", brokenInputs);
          return;
        }

        var text = labelGroup.selectAll("." + _cssPrefix + "-label-content").text(valueL);

        _this._updateLabelSize(d, index, null, labelGroup, valueLST, text);

        _this.positionLabel(d, index, null, this, duration, showhide, lineGroup);
      });
    }
  },
  _initNewCache: function _initNewCache(cached, valueX, valueY, valueS, valueC, valueLST) {
    if (valueS || valueS === 0) cached.scaledS0 = utils.areaToRadius(this.context.sScale(valueS));
    cached.labelX0 = valueX;
    cached.labelY0 = valueY;
    cached.valueLST = valueLST;
    cached.scaledC0 = valueC != null ? this.context.cScale(valueC) : this.context.COLOR_WHITEISH;
  },
  _initLabelTooltip: function _initLabelTooltip() {
    this.tooltipEl = this.labelsContainer.append("g").attr("class", this.options.CSS_PREFIX + "-tooltip");
  },
  setTooltip: function setTooltip(d, tooltipText, tooltipCache, labelValues) {
    if (tooltipText) {
      var position = 0;
      var _cssPrefix = this.options.CSS_PREFIX;
      this.tooltipEl.raise().text(null);
      this.label(this.tooltipEl, true);
      if (d) {
        var cache = {};
        this._initNewCache(cache, labelValues.valueX, labelValues.valueY, labelValues.valueS, labelValues.valueC, labelValues.valueLST);
        this.tooltipEl.classed(this.options.CSS_PREFIX + "-tooltip", false).classed(this.options.CSS_PREFIX + "-entity", true).selectAll("." + _cssPrefix + "-label-content").text(labelValues.labelText);
        this._updateLabelSize(d, null, cache, this.tooltipEl, labelValues.valueLST);
        position = this.positionLabel(d, null, cache, this.tooltipEl.node(), 0, null, this.tooltipEl.select(".lineemptygroup"));
      }
      this.tooltipEl.classed(this.options.CSS_PREFIX + "-entity", false).classed(this.options.CSS_PREFIX + "-tooltip", true).selectAll("." + _cssPrefix + "-label-content").text(tooltipText);
      this._updateLabelSize(d, null, tooltipCache, this.tooltipEl, null);
      this.positionLabel(d, null, tooltipCache, this.tooltipEl.node(), 0, null, this.tooltipEl.select(".lineemptygroup"), position);
    } else {
      this.tooltipEl.text(null);
    }
  },
  setTooltipFontSize: function setTooltipFontSize(fontSize) {
    this.tooltipEl.style("font-size", fontSize);
  },
  _updateLabelSize: function _updateLabelSize(d, index, cache, labelGroup, valueLST, text) {
    var _this = this;
    var KEY = this.KEY;
    var cached = cache || _this.cached[d[KEY]];

    var _cssPrefix = this.options.CSS_PREFIX;

    var labels = _this.model.ui.chart.labels || {};
    labelGroup.classed("vzb-label-boxremoved", labels.removeLabelBox);

    var _text = text || labelGroup.selectAll("." + _cssPrefix + "-label-content");

    if (_this.labelSizeTextScale) {
      if (valueLST != null) {
        var range = _this.labelSizeTextScale.range();
        var fontSize = range[0] + Math.sqrt((_this.labelSizeTextScale(valueLST) - range[0]) * (range[1] - range[0]));
        _text.attr("font-size", fontSize + "px");
      } else {
        _text.attr("font-size", null);
      }
    }

    //turn off stroke because ie11/edge return stroked bounding box for text
    _text.style("stroke", "none");
    var contentBBox = _text.node().getBBox();
    _text.style("stroke", null);

    var rect = labelGroup.selectAll("rect");

    if (!cached.textWidth || cached.textWidth != contentBBox.width) {
      cached.textWidth = contentBBox.width;

      var labelCloseHeight = _this._closeCrossHeight || contentBBox.height; //_this.activeProfile.infoElHeight * 1.2;//contentBBox.height;

      var isRTL = _this.model.locale.isRTL();
      var labelCloseGroup = labelGroup.select("." + _cssPrefix + "-label-x").attr("transform", "translate(" + (isRTL ? -contentBBox.width - 4 : 4) + "," + -contentBBox.height * 0.85 + ")");

      this.updateLabelCloseGroupSize(labelCloseGroup, labelCloseHeight);

      rect.attr("width", contentBBox.width + 8).attr("height", contentBBox.height * 1.2).attr("x", -contentBBox.width - 4).attr("y", -contentBBox.height * 0.85).attr("rx", contentBBox.height * 0.2).attr("ry", contentBBox.height * 0.2);

      //cache label bound rect for reposition
      cached.rectBBox = rect.node().getBBox();
      cached.rectOffsetX = cached.rectBBox.width + cached.rectBBox.x;
      cached.rectOffsetY = cached.rectBBox.height + cached.rectBBox.y;
    }

    var glowRect = labelGroup.select(".vzb-label-glow");
    if (glowRect.attr("stroke") !== cached.scaledC0) {
      glowRect.attr("stroke", cached.scaledC0);
    }
  },
  updateLabelCloseGroupSize: function updateLabelCloseGroupSize(labelCloseGroup, labelCloseHeight) {
    labelCloseGroup.select("circle").attr("cx", /*contentBBox.height * .0 + */0).attr("cy", 0).attr("r", labelCloseHeight * 0.5);

    labelCloseGroup.select("svg").attr("x", -labelCloseHeight * 0.5).attr("y", labelCloseHeight * -0.5).attr("width", labelCloseHeight).attr("height", labelCloseHeight);
  },
  updateLabelsOnlyTextSize: function updateLabelsOnlyTextSize() {
    var _this = this;
    var KEYS = this.KEYS;
    var KEY = this.KEY;

    this.entityLabels.each(function (d, index) {
      var cached = _this.cached[d[KEY]];
      _this._updateLabelSize(d, index, null, d3.select(this), _this.context.frame.size_label[utils.getKey(d, KEYS)]);
      var lineGroup = _this.entityLines.filter(function (f) {
        return f[KEY] == d[KEY];
      });
      _this.positionLabel(d, index, null, this, 0, null, lineGroup);
    });
  },
  updateLabelOnlyPosition: function updateLabelOnlyPosition(d, index, cache) {
    var _this = this;
    var KEY = this.KEY;
    var cached = this.cached[d[KEY]];
    if (cache) utils.extend(cached, cache);

    var lineGroup = _this.entityLines.filter(function (f) {
      return f[KEY] == d[KEY];
    });

    this.entityLabels.filter(function (f) {
      return f[KEY] == d[KEY];
    }).each(function (groupData) {
      _this.positionLabel(d, index, null, this, 0, null, lineGroup);
    });
  },
  updateLabelOnlyColor: function updateLabelOnlyColor(d, index, cache) {
    var _this = this;
    var KEY = this.KEY;
    var cached = this.cached[d[KEY]];
    if (cache) utils.extend(cached, cache);

    var labelGroup = _this.entityLabels.filter(function (f) {
      return f[KEY] == d[KEY];
    });

    _this._updateLabelSize(d, index, null, labelGroup, null);
  },
  positionLabel: function positionLabel(d, index, cache, context, duration, showhide, lineGroup, position) {
    var KEY = this.KEY;
    var cached = cache || this.cached[d[KEY]];

    var lockPosition = position || position === 0;
    var hPos = (position || 0) & 1;
    var vPos = ((position || 0) & 2) >> 1;
    var hPosNew = 0;
    var vPosNew = 0;
    var viewWidth = this.context.width;
    var viewHeight = this.context.height;

    var resolvedX0 = this.xScale(cached.labelX0);
    var resolvedY0 = this.yScale(cached.labelY0);

    var offsetX = cached.rectOffsetX;
    var offsetY = cached.rectOffsetY;

    if (!cached.labelOffset) cached.labelOffset = [0, 0];

    cached.labelX_ = cached.labelOffset[0] || (-cached.scaledS0 * 0.75 - offsetX) / viewWidth;
    cached.labelY_ = cached.labelOffset[1] || (-cached.scaledS0 * 0.75 - offsetY) / viewHeight;

    //check default label position and switch to mirror position if position
    //does not bind to visible field
    var resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
    var resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
    if (cached.labelOffset[0] + cached.labelOffset[1] == 0) {
      if (!lockPosition && resolvedY - cached.rectBBox.height + offsetY <= 0 || vPos) {
        // check top
        vPosNew = 1;
        cached.labelY_ = (cached.scaledS0 * 0.75 + cached.rectBBox.height - offsetY) / viewHeight;
        resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
      }
      //  else if (resolvedY + 10 > viewHeight) { //check bottom
      //   cached.labelY_ = (viewHeight - 10 - resolvedY0) / viewHeight;
      //   resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
      // }

      if (!lockPosition && resolvedX - cached.rectBBox.width + offsetX <= 0 || hPos) {
        //check left
        hPosNew = 1;
        cached.labelX_ = (cached.scaledS0 * 0.75 + cached.rectBBox.width - offsetX) / viewWidth;
        resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
        if (resolvedX > viewWidth) {
          hPosNew = 0;
          vPosNew = vPosNew == 0 && resolvedY0 - offsetY * 0.5 - cached.scaledS0 < cached.rectBBox.height ? 1 : vPosNew;
          cached.labelY_ = vPosNew ? -offsetY * 0.5 + cached.rectBBox.height + cached.scaledS0 : -offsetY * 1.5 - cached.scaledS0;
          cached.labelY_ /= viewHeight;
          resolvedY = resolvedY0 + cached.labelY_ * viewHeight;
          cached.labelX_ = (cached.rectBBox.width - offsetX - resolvedX0) / viewWidth;
          resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
        }
      }
      //  else if (resolvedX + 15 > viewWidth) { //check right
      //   cached.labelX_ = (viewWidth - 15 - resolvedX0) / viewWidth;
      //   resolvedX = resolvedX0 + cached.labelX_ * viewWidth;
      // }
    }

    if (lockPosition) {
      var topCornerCase = false;
      if (resolvedX - cached.rectBBox.width + offsetX <= 0) {
        var deltaX = resolvedX0 - cached.rectBBox.width;
        var deltaY = deltaX > 0 ? utils.cathetus(cached.scaledS0, deltaX) : cached.scaledS0;
        resolvedY = vPosNew ? resolvedY0 + cached.rectBBox.height - offsetY * 0.5 + deltaY : resolvedY0 - offsetY * 1.5 - deltaY;
        if (resolvedY - cached.rectBBox.height < 0) {
          topCornerCase = true;
        }
      }
      if (resolvedY - cached.rectBBox.height + offsetY <= 0) {
        var _deltaY = resolvedY0 - cached.rectBBox.height;
        var _deltaX = _deltaY > 0 ? utils.cathetus(cached.scaledS0, _deltaY) : cached.scaledS0;
        resolvedX = hPosNew ? resolvedX0 + cached.rectBBox.width + _deltaX : resolvedX0 - offsetX * 2 - _deltaX;
        if (resolvedX - cached.rectBBox.width < 0 || resolvedX > viewWidth) {
          topCornerCase = true;
        }
      }
      if (topCornerCase) {
        vPosNew++;
        var _deltaX2 = resolvedX0 - cached.rectBBox.width;
        resolvedY = resolvedY0 + cached.rectBBox.height - offsetY * 0.5 + (_deltaX2 > 0 ? utils.cathetus(cached.scaledS0, _deltaX2) : cached.scaledS0);
      }
    }

    this.label._repositionLabels(d, index, cache, context, resolvedX, resolvedY, resolvedX0, resolvedY0, duration, showhide, lineGroup);

    return vPosNew * 2 + hPosNew;
  },
  updateSize: function updateSize() {
    var profiles = {
      small: {
        minLabelTextSize: 7,
        maxLabelTextSize: 21,
        defaultLabelTextSize: 12,
        labelLeashCoeff: 0.4
      },
      medium: {
        minLabelTextSize: 7,
        maxLabelTextSize: 30,
        defaultLabelTextSize: 15,
        labelLeashCoeff: 0.3
      },
      large: {
        minLabelTextSize: 6,
        maxLabelTextSize: 48,
        defaultLabelTextSize: 20,
        labelLeashCoeff: 0.2
      }
    };

    var presentationProfiles = {
      medium: {
        minLabelTextSize: 15,
        maxLabelTextSize: 35,
        defaultLabelTextSize: 15,
        labelLeashCoeff: 0.3
      },
      large: {
        minLabelTextSize: 20,
        maxLabelTextSize: 55,
        defaultLabelTextSize: 20,
        labelLeashCoeff: 0.2
      }
    };

    this.activeProfile = this.context.getActiveProfile(profiles, presentationProfiles);
    this.updateLabelSizeLimits();
  }
});

exports.default = Labels;

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */
;(function(root, factory) {
	// https://github.com/umdjs/umd/blob/master/returnExports.js
	if (true) {
		// For Node.js.
		module.exports = factory(root);
	} else {}
}(typeof global != 'undefined' ? global : this, function(root) {

	if (root.CSS && root.CSS.escape) {
		return root.CSS.escape;
	}

	// https://drafts.csswg.org/cssom/#serialize-an-identifier
	var cssEscape = function(value) {
		if (arguments.length == 0) {
			throw new TypeError('`CSS.escape` requires an argument.');
		}
		var string = String(value);
		var length = string.length;
		var index = -1;
		var codeUnit;
		var result = '';
		var firstCodeUnit = string.charCodeAt(0);
		while (++index < length) {
			codeUnit = string.charCodeAt(index);
			// Note: there’s no need to special-case astral symbols, surrogate
			// pairs, or lone surrogates.

			// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
			// (U+FFFD).
			if (codeUnit == 0x0000) {
				result += '\uFFFD';
				continue;
			}

			if (
				// If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
				// U+007F, […]
				(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||
				// If the character is the first character and is in the range [0-9]
				// (U+0030 to U+0039), […]
				(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
				// If the character is the second character and is in the range [0-9]
				// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
				(
					index == 1 &&
					codeUnit >= 0x0030 && codeUnit <= 0x0039 &&
					firstCodeUnit == 0x002D
				)
			) {
				// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
				result += '\\' + codeUnit.toString(16) + ' ';
				continue;
			}

			if (
				// If the character is the first character and is a `-` (U+002D), and
				// there is no second character, […]
				index == 0 &&
				length == 1 &&
				codeUnit == 0x002D
			) {
				result += '\\' + string.charAt(index);
				continue;
			}

			// If the character is not handled by one of the above rules and is
			// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
			// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
			// U+005A), or [a-z] (U+0061 to U+007A), […]
			if (
				codeUnit >= 0x0080 ||
				codeUnit == 0x002D ||
				codeUnit == 0x005F ||
				codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
				codeUnit >= 0x0041 && codeUnit <= 0x005A ||
				codeUnit >= 0x0061 && codeUnit <= 0x007A
			) {
				// the character itself
				result += string.charAt(index);
				continue;
			}

			// Otherwise, the escaped character.
			// https://drafts.csswg.org/cssom/#escape-a-character
			result += '\\' + string.charAt(index);

		}
		return result;
	};

	if (!root.CSS) {
		root.CSS = {};
	}

	root.CSS.escape = cssEscape;
	return cssEscape;

}));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(80)))

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _prefix = "";
var _deleteClasses = [];
var SVGHEADER = '<?xml version="1.0" encoding="utf-8"?>';

exports.default = _class2.default.extend({

  init: function init(context) {
    this.context = context;
    this.shapes = [];
    this.groups = [];
    this.counter = 0;
    this.name = "";
    this.label = "";
  },

  reset: function reset() {
    this.container.remove();
    this.context.element.selectAll(".vzb-export-redball").remove();
    this.context.element.selectAll(".vzb-export-counter").remove();
    this.counter = 0;
  },

  prefix: function prefix(arg) {
    if (!arguments.length) return _prefix;
    _prefix = arg;
    return this;
  },
  deleteClasses: function deleteClasses(arg) {
    if (!arguments.length) return _deleteClasses;
    _deleteClasses = arg;
    return this;
  },

  open: function open(element, name) {
    var _this = this;

    //reset if some exports exists on opening
    if (this.svg) this.reset();

    if (!element) element = this.context.element;
    if (!name) name = this.context.name;
    this.name = name;

    var width = parseInt(element.style("width"), 10) || 0;
    var height = parseInt(element.style("height"), 10) || 0;

    this.container = element.append("div").attr("class", "vzb-svg-export");
    this.svg = this.container.node().appendChild(element.select("svg").node().cloneNode(true));
    this.svg = d3.select(this.svg);
    this.svg.attr("viewBox", "0 0 " + width + " " + height).attr("version", "1.1").attr("param1", "http://www.w3.org/2000/svg").attr("param2", "http://www.w3.org/1999/xlink").attr("x", "0px").attr("y", "0px").attr("style", "enable-background:new " + "0 0 " + width + " " + height).attr("xml:space", "preserve");

    this.redBall = element.append("div").attr("class", "vzb-export-redball").style("position", "absolute").style("top", "20px").style("right", "20px").style("width", "20px").style("height", "20px").style("background", "red").style("color", "white").style("text-align", "center").style("border-radius", "10px").style("font-size", "14px").style("line-height", "20px").style("opacity", .8).style("cursor", "pointer").on("mouseover", function () {
      d3.select(this).style("opacity", 1).text("▼");
      _this.counterEl.text("Download");
    }).on("mouseout", function () {
      d3.select(this).style("opacity", .8).text("");
      _this.counterEl.text(_this.label);
    }).on("click", function () {
      _this.close();
    });

    this.counterEl = element.append("div").attr("class", "vzb-export-counter").style("position", "absolute").style("top", "20px").style("right", "45px").style("color", "red").style("opacity", .8).style("line-height", "20px").style("font-size", "14px").style("text-align", "center");

    this.root = this.svg.select("." + _prefix + "graph");

    this.root.selectAll("g, text, svg, line, rect").filter(function () {
      var view = d3.select(this);
      var result = false;
      _deleteClasses.forEach(function (one) {
        result = result || view.classed(one);
      });
      return result;
    }).remove();

    this.svg.selectAll(".tick line").attr("fill", "none").attr("stroke", "#999");
    this.svg.selectAll("." + _prefix + "axis-x path").attr("fill", "none").attr("stroke", "#999");
    this.svg.selectAll("." + _prefix + "axis-y path").attr("fill", "none").attr("stroke", "#999");
  },

  write: function write(me) {
    var groupBy = "time";

    if (!this.root) this.open();

    //avoid writing the same thing again
    if (this.shapes.indexOf(me.id + "_" + me.time) > -1) return;

    this.shapes.push(me.id + "_" + me.time);

    // check if need to create a new group and do so
    if (this.groups.indexOf(me[groupBy]) == -1) {
      this.root.append("g").attr("id", "g_" + me[groupBy]);
      this.groups.push(me[groupBy]);
    }

    // put a marker into the group
    if (me.opacity == null) me.opacity = .5;
    if (me.fill == null) me.fill = "#ff80dd";

    var marker = this.root.select("#g_" + me[groupBy]).append(me.type).attr("id", me.id + "_" + me.time).style("fill", me.fill).style("opacity", me.opacity);

    switch (me.type) {
      case "path":
        marker.attr("d", me.d);
        break;

      case "circle":
        marker.attr("cx", me.cx).attr("cy", me.cy).attr("r", me.r);
        break;
    }

    this.counter++;
    this.redBall.style("opacity", this.counter % 10 / 12 + .2);
    this.label = me.type + " shapes: " + this.counter;
    this.counterEl.text(this.label);
  },

  close: function close() {

    var result = SVGHEADER + " " + this.container.node().innerHTML.replace("param1", "xmlns").replace("param2", "xmlns:xlink")
    //round all numbers in SVG code
    .replace(/\d+(\.\d+)/g, function (x) {
      return Math.round(+x * 100) / 100 + "";
    });

    if (result.length / 1024 / 1024 > 2) {

      alert("The file size is " + Math.round(result.length / 1024) + "kB, which is too large to download. Will try to print it in the console instead...");
      console.log(result);
    } else {

      var link = document.createElement('a');
      link.download = this.name + " " + this.counter + " shapes" + ".svg";
      link.href = 'data:,' + result;
      link.click();
    }
  }

});

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _class = __webpack_require__(31);

var _class2 = _interopRequireDefault(_class);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextEllipsis = _class2.default.extend({
  init: function init(context) {
    this.context = context;
    this.interact = this._createInteract();
  },
  setTooltip: function setTooltip(tooltip) {
    this.tooltip = tooltip;
  },
  _createInteract: function _createInteract() {
    var _this = this;
    return {
      mouseOver: function mouseOver() {
        var evt = d3.event;
        var mouse = d3.mouse(_this.context.element.node());
        _this._setTooltip(d3.select(evt.target).attr("data-text"), mouse[0], mouse[1]);
      },
      mouseOut: function mouseOut() {
        _this._setTooltip();
      },
      tap: function tap() {}
    };
  },
  _setTooltip: function _setTooltip(tooltipText, x, y) {
    if (tooltipText) {

      //position tooltip
      this.tooltip.classed("vzb-hidden", false)
      //.attr("style", "left:" + (mouse[0] + 50) + "px;top:" + (mouse[1] + 50) + "px")
      .selectAll("text").text(tooltipText);

      var contentBBox = this.tooltip.select("text").node().getBBox();
      if (x - contentBBox.width < 0) {
        x += contentBBox.width + 5; // corrective to the block Radius and text padding
      } else {
        x -= 5; // corrective to the block Radius and text padding
      }
      if (y - contentBBox.height < 0) {
        y += contentBBox.height;
      } else {
        y -= 11; // corrective to the block Radius and text padding
      }

      this.tooltip.attr("transform", "translate(" + x + "," + y + ")");

      this.tooltip.selectAll("rect").attr("width", contentBBox.width + 8).attr("height", contentBBox.height * 1.2).attr("x", -contentBBox.width - 4).attr("y", -contentBBox.height * 0.85).attr("rx", contentBBox.height * 0.2).attr("ry", contentBBox.height * 0.2);
    } else {
      this.tooltip.classed("vzb-hidden", true);
    }
  },
  clear: function clear(selection) {
    selection.attr("data-text", null);
  },
  wrap: function wrap(_this, width) {
    var textEl = d3.select(_this);

    var abs = Math.abs;
    var initialText = textEl.attr("data-text");
    if (!initialText) {
      initialText = textEl.text();
      textEl.attr("data-text", initialText);
    }
    textEl.text(initialText);
    var text = initialText;
    var textLength = text.length;
    var textWidth = textEl.node().getComputedTextLength();

    while (width - textWidth <= 0 && text !== "") {
      text = textWidth >= width ? text.slice(0, -abs(textLength * 0.5)) : initialText.slice(0, abs(textLength * 0.5));
      textEl.text(text + "…");
      textWidth = textEl.node().getComputedTextLength();
      textLength = text.length;
    }

    if (text !== initialText) {
      if (text === "") {
        textEl.text(initialText[0]);
      }
      textEl.on("mouseover.tooltip", this.interact.mouseOver).on("mouseout.tooltip", this.interact.mouseOut).style("pointer-events", "all");
    } else {
      textEl.on("mouseover.tooltip", null).on("mouseout.tooltip", null).style("pointer-events", null);
    }
  }
});

exports.default = TextEllipsis;

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

// topojson
exports.default = function () {
  var topojson = {
    version: "1.6.19",
    mesh: function mesh(topology) {
      return object(topology, meshArcs.apply(this, arguments));
    },
    meshArcs: meshArcs,
    merge: function merge(topology) {
      return object(topology, mergeArcs.apply(this, arguments));
    },
    mergeArcs: mergeArcs,
    feature: featureOrCollection,
    neighbors: neighbors,
    presimplify: presimplify
  };

  function stitchArcs(topology, arcs) {
    var stitchedArcs = {},
        fragmentByStart = {},
        fragmentByEnd = {},
        fragments = [],
        emptyIndex = -1;

    // Stitch empty arcs first, since they may be subsumed by other arcs.
    arcs.forEach(function (i, j) {
      var arc = topology.arcs[i < 0 ? ~i : i],
          t;
      if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
        t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
      }
    });

    arcs.forEach(function (i) {
      var e = ends(i),
          start = e[0],
          end = e[1],
          f,
          g;

      if (f = fragmentByEnd[start]) {
        delete fragmentByEnd[f.end];
        f.push(i);
        f.end = end;
        if (g = fragmentByStart[end]) {
          delete fragmentByStart[g.start];
          var fg = g === f ? f : f.concat(g);
          fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else if (f = fragmentByStart[end]) {
        delete fragmentByStart[f.start];
        f.unshift(i);
        f.start = start;
        if (g = fragmentByEnd[start]) {
          delete fragmentByEnd[g.end];
          var gf = g === f ? f : g.concat(f);
          fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
        } else {
          fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
        }
      } else {
        f = [i];
        fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
      }
    });

    function ends(i) {
      var arc = topology.arcs[i < 0 ? ~i : i],
          p0 = arc[0],
          p1;
      if (topology.transform) p1 = [0, 0], arc.forEach(function (dp) {
        p1[0] += dp[0], p1[1] += dp[1];
      });else p1 = arc[arc.length - 1];
      return i < 0 ? [p1, p0] : [p0, p1];
    }

    function flush(fragmentByEnd, fragmentByStart) {
      for (var k in fragmentByEnd) {
        var f = fragmentByEnd[k];
        delete fragmentByStart[f.start];
        delete f.start;
        delete f.end;
        f.forEach(function (i) {
          stitchedArcs[i < 0 ? ~i : i] = 1;
        });
        fragments.push(f);
      }
    }

    flush(fragmentByEnd, fragmentByStart);
    flush(fragmentByStart, fragmentByEnd);
    arcs.forEach(function (i) {
      if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]);
    });

    return fragments;
  }

  function meshArcs(topology, o, filter) {
    var arcs = [];

    function arc(i) {
      var j = i < 0 ? ~i : i;
      (geomsByArc[j] || (geomsByArc[j] = [])).push({
        i: i,
        g: geom
      });
    }

    function line(arcs) {
      arcs.forEach(arc);
    }

    function polygon(arcs) {
      arcs.forEach(line);
    }

    function geometry(o) {
      if (o.type === "GeometryCollection") o.geometries.forEach(geometry);else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
    }

    if (arguments.length > 1) {
      var geomsByArc = [],
          geom;

      var geometryType = {
        LineString: line,
        MultiLineString: polygon,
        Polygon: polygon,
        MultiPolygon: function MultiPolygon(arcs) {
          arcs.forEach(polygon);
        }
      };

      geometry(o);

      geomsByArc.forEach(arguments.length < 3 ? function (geoms) {
        arcs.push(geoms[0].i);
      } : function (geoms) {
        if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i);
      });
    } else {
      for (var i = 0, n = topology.arcs.length; i < n; ++i) {
        arcs.push(i);
      }
    }

    return {
      type: "MultiLineString",
      arcs: stitchArcs(topology, arcs)
    };
  }

  function mergeArcs(topology, objects) {
    var polygonsByArc = {},
        polygons = [],
        components = [];

    objects.forEach(function (o) {
      if (o.type === "Polygon") register(o.arcs);else if (o.type === "MultiPolygon") o.arcs.forEach(register);
    });

    function register(polygon) {
      polygon.forEach(function (ring) {
        ring.forEach(function (arc) {
          (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
        });
      });
      polygons.push(polygon);
    }

    function exterior(ring) {
      return cartesianRingArea(object(topology, {
        type: "Polygon",
        arcs: [ring]
      }).coordinates[0]) > 0; // TODO allow spherical?
    }

    polygons.forEach(function (polygon) {
      if (!polygon._) {
        var component = [],
            neighbors = [polygon];
        polygon._ = 1;
        components.push(component);
        while (polygon = neighbors.pop()) {
          component.push(polygon);
          polygon.forEach(function (ring) {
            ring.forEach(function (arc) {
              polygonsByArc[arc < 0 ? ~arc : arc].forEach(function (polygon) {
                if (!polygon._) {
                  polygon._ = 1;
                  neighbors.push(polygon);
                }
              });
            });
          });
        }
      }
    });

    polygons.forEach(function (polygon) {
      delete polygon._;
    });

    return {
      type: "MultiPolygon",
      arcs: components.map(function (polygons) {
        var arcs = [];

        // Extract the exterior (unique) arcs.
        polygons.forEach(function (polygon) {
          polygon.forEach(function (ring) {
            ring.forEach(function (arc) {
              if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
                arcs.push(arc);
              }
            });
          });
        });

        // Stitch the arcs into one or more rings.
        arcs = stitchArcs(topology, arcs);

        // If more than one ring is returned,
        // at most one of these rings can be the exterior;
        // this exterior ring has the same winding order
        // as any exterior ring in the original polygons.
        if ((n = arcs.length) > 1) {
          var sgn = exterior(polygons[0][0]);
          for (var i = 0, t; i < n; ++i) {
            if (sgn === exterior(arcs[i])) {
              t = arcs[0], arcs[0] = arcs[i], arcs[i] = t;
              break;
            }
          }
        }

        return arcs;
      })
    };
  }

  function featureOrCollection(topology, o) {
    return o.type === "GeometryCollection" ? {
      type: "FeatureCollection",
      features: o.geometries.map(function (o) {
        return feature(topology, o);
      })
    } : feature(topology, o);
  }

  function feature(topology, o) {
    var f = {
      type: "Feature",
      id: o.id,
      properties: o.properties || {},
      geometry: object(topology, o)
    };
    if (o.id == null) delete f.id;
    return f;
  }

  function object(topology, o) {
    var absolute = transformAbsolute(topology.transform),
        arcs = topology.arcs;

    function arc(i, points) {
      if (points.length) points.pop();
      for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
        points.push(p = a[k].slice());
        absolute(p, k);
      }
      if (i < 0) reverse(points, n);
    }

    function point(p) {
      p = p.slice();
      absolute(p, 0);
      return p;
    }

    function line(arcs) {
      var points = [];
      for (var i = 0, n = arcs.length; i < n; ++i) {
        arc(arcs[i], points);
      }if (points.length < 2) points.push(points[0].slice());
      return points;
    }

    function ring(arcs) {
      var points = line(arcs);
      while (points.length < 4) {
        points.push(points[0].slice());
      }return points;
    }

    function polygon(arcs) {
      return arcs.map(ring);
    }

    function geometry(o) {
      var t = o.type;
      return t === "GeometryCollection" ? {
        type: t,
        geometries: o.geometries.map(geometry)
      } : t in geometryType ? {
        type: t,
        coordinates: geometryType[t](o)
      } : null;
    }

    var geometryType = {
      Point: function Point(o) {
        return point(o.coordinates);
      },
      MultiPoint: function MultiPoint(o) {
        return o.coordinates.map(point);
      },
      LineString: function LineString(o) {
        return line(o.arcs);
      },
      MultiLineString: function MultiLineString(o) {
        return o.arcs.map(line);
      },
      Polygon: function Polygon(o) {
        return polygon(o.arcs);
      },
      MultiPolygon: function MultiPolygon(o) {
        return o.arcs.map(polygon);
      }
    };

    return geometry(o);
  }

  function reverse(array, n) {
    var t,
        j = array.length,
        i = j - n;
    while (i < --j) {
      t = array[i], array[i++] = array[j], array[j] = t;
    }
  }

  function bisect(a, x) {
    var lo = 0,
        hi = a.length;
    while (lo < hi) {
      var mid = lo + hi >>> 1;
      if (a[mid] < x) lo = mid + 1;else hi = mid;
    }
    return lo;
  }

  function neighbors(objects) {
    var indexesByArc = {},
        // arc index -> array of object indexes
    neighbors = objects.map(function () {
      return [];
    });

    function line(arcs, i) {
      arcs.forEach(function (a) {
        if (a < 0) a = ~a;
        var o = indexesByArc[a];
        if (o) o.push(i);else indexesByArc[a] = [i];
      });
    }

    function polygon(arcs, i) {
      arcs.forEach(function (arc) {
        line(arc, i);
      });
    }

    function geometry(o, i) {
      if (o.type === "GeometryCollection") o.geometries.forEach(function (o) {
        geometry(o, i);
      });else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
    }

    var geometryType = {
      LineString: line,
      MultiLineString: polygon,
      Polygon: polygon,
      MultiPolygon: function MultiPolygon(arcs, i) {
        arcs.forEach(function (arc) {
          polygon(arc, i);
        });
      }
    };

    objects.forEach(geometry);

    for (var i in indexesByArc) {
      for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
        for (var k = j + 1; k < m; ++k) {
          var ij = indexes[j],
              ik = indexes[k],
              n;
          if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
          if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
        }
      }
    }

    return neighbors;
  }

  function presimplify(topology, triangleArea) {
    var absolute = transformAbsolute(topology.transform),
        relative = transformRelative(topology.transform),
        heap = minAreaHeap();

    if (!triangleArea) triangleArea = cartesianTriangleArea;

    topology.arcs.forEach(function (arc) {
      var triangles = [],
          maxArea = 0,
          triangle;

      // To store each point鈥檚 effective area, we create a new array rather than
      // extending the passed-in point to workaround a Chrome/V8 bug (getting
      // stuck in smi mode). For midpoints, the initial effective area of
      // Infinity will be computed in the next step.
      for (var i = 0, n = arc.length, p; i < n; ++i) {
        p = arc[i];
        absolute(arc[i] = [p[0], p[1], Infinity], i);
      }

      for (var i = 1, n = arc.length - 1; i < n; ++i) {
        triangle = arc.slice(i - 1, i + 2);
        triangle[1][2] = triangleArea(triangle);
        triangles.push(triangle);
        heap.push(triangle);
      }

      for (var i = 0, n = triangles.length; i < n; ++i) {
        triangle = triangles[i];
        triangle.previous = triangles[i - 1];
        triangle.next = triangles[i + 1];
      }

      while (triangle = heap.pop()) {
        var previous = triangle.previous,
            next = triangle.next;

        // If the area of the current point is less than that of the previous point
        // to be eliminated, use the latter's area instead. This ensures that the
        // current point cannot be eliminated without eliminating previously-
        // eliminated points.
        if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;else maxArea = triangle[1][2];

        if (previous) {
          previous.next = next;
          previous[2] = triangle[2];
          update(previous);
        }

        if (next) {
          next.previous = previous;
          next[0] = triangle[0];
          update(next);
        }
      }

      arc.forEach(relative);
    });

    function update(triangle) {
      heap.remove(triangle);
      triangle[1][2] = triangleArea(triangle);
      heap.push(triangle);
    }

    return topology;
  }

  function cartesianRingArea(ring) {
    var i = -1,
        n = ring.length,
        a,
        b = ring[n - 1],
        area = 0;

    while (++i < n) {
      a = b;
      b = ring[i];
      area += a[0] * b[1] - a[1] * b[0];
    }

    return area * .5;
  }

  function cartesianTriangleArea(triangle) {
    var a = triangle[0],
        b = triangle[1],
        c = triangle[2];
    return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
  }

  function compareArea(a, b) {
    return a[1][2] - b[1][2];
  }

  function minAreaHeap() {
    var heap = {},
        array = [],
        size = 0;

    heap.push = function (object) {
      up(array[object._ = size] = object, size++);
      return size;
    };

    heap.pop = function () {
      if (size <= 0) return;
      var removed = array[0],
          object;
      if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
      return removed;
    };

    heap.remove = function (removed) {
      var i = removed._,
          object;
      if (array[i] !== removed) return; // invalid request
      if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
      return i;
    };

    function up(object, i) {
      while (i > 0) {
        var j = (i + 1 >> 1) - 1,
            parent = array[j];
        if (compareArea(object, parent) >= 0) break;
        array[parent._ = i] = parent;
        array[object._ = i = j] = object;
      }
    }

    function down(object, i) {
      while (true) {
        var r = i + 1 << 1,
            l = r - 1,
            j = i,
            child = array[j];
        if (l < size && compareArea(array[l], child) < 0) child = array[j = l];
        if (r < size && compareArea(array[r], child) < 0) child = array[j = r];
        if (j === i) break;
        array[child._ = i] = child;
        array[object._ = i = j] = object;
      }
    }

    return heap;
  }

  function transformAbsolute(transform) {
    if (!transform) return noop;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function (point, i) {
      if (!i) x0 = y0 = 0;
      point[0] = (x0 += point[0]) * kx + dx;
      point[1] = (y0 += point[1]) * ky + dy;
    };
  }

  function transformRelative(transform) {
    if (!transform) return noop;
    var x0,
        y0,
        kx = transform.scale[0],
        ky = transform.scale[1],
        dx = transform.translate[0],
        dy = transform.translate[1];
    return function (point, i) {
      if (!i) x0 = y0 = 0;
      var x1 = (point[0] - dx) / kx | 0,
          y1 = (point[1] - dy) / ky | 0;
      point[0] = x1 - x0;
      point[1] = y1 - y0;
      x0 = x1;
      y0 = y1;
    };
  }

  function noop() {}

  return topojson;
}();

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })
/******/ ]);
});
//# sourceMappingURL=vizabi.js.map